// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizManager.Data;

#nullable disable

namespace QuizManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250908102417_UpdatedStudentProfile_GoogleScholarProfile")]
    partial class UpdatedStudentProfile_GoogleScholarProfile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QuizManager.Models.AnnouncementAsCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("CompanyAnnouncementAttachmentFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyAnnouncementCompanyEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyAnnouncementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyAnnouncementRNG")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyAnnouncementRNG_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyAnnouncementStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyAnnouncementTimeToBeActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyAnnouncementTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyAnnouncementUploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAnnouncementCompanyEmail");

                    b.HasIndex("CompanyAnnouncementRNG_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[CompanyAnnouncementRNG_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("AnnouncementsAsCompany");
                });

            modelBuilder.Entity("QuizManager.Models.AnnouncementAsProfessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ProfessorAnnouncementAttachmentFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfessorAnnouncementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorAnnouncementProfessorEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("ProfessorAnnouncementRNG")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfessorAnnouncementRNG_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessorAnnouncementStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProfessorAnnouncementTimeToBeActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorAnnouncementTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProfessorAnnouncementUploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorAnnouncementProfessorEmail");

                    b.HasIndex("ProfessorAnnouncementRNG_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[ProfessorAnnouncementRNG_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("AnnouncementsAsProfessor");
                });

            modelBuilder.Entity("QuizManager.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaSubFields")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("QuizManager.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AskForExperience")
                        .HasColumnType("bit");

                    b.Property<string>("AtlasID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompanEmployeesLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CompanyAcceptRules")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdminEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdminSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdminTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCEOSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCEOTaxID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDesiredSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyEmployees")
                        .HasColumnType("int");

                    b.Property<string>("CompanyExportCountries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompanyExportCountriesLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyExportCountriesNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompanyExportCountriesNumberLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyHREmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyHRName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyHRSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyHRTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CompanyLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameENG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyPC")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyPresentationEmbeddedVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyTaxID")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyTaxOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CompanyTurnover")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CompanyTurnoverLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompanyVisibleActivity")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsiteAnnouncements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsiteJobs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company_UniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SvseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SvseID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailUsedToUploadEvent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CompanyEventActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyEventAreasOfInterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CompanyEventAttachmentFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyEventCompanyDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventDimosLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CompanyEventOfferingTransportToEventLocation")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyEventOtherOrganizer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompanyEventOtherOrganizerToBeVisible")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyEventPerifereiaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventPlaceLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventPostalCodeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventResponsiblePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventResponsiblePersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventResponsiblePersonTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStartingPointLocationToTransportPeopleToEvent1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStartingPointLocationToTransportPeopleToEvent2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStartingPointLocationToTransportPeopleToEvent3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CompanyEventTime")
                        .HasColumnType("time");

                    b.Property<string>("CompanyEventTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyEventUploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RNGForEventUploadedAsCompany")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForEventUploadedAsCompany_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailUsedToUploadEvent");

                    b.HasIndex("RNGForEventUploadedAsCompany_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[RNGForEventUploadedAsCompany_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("CompanyEvents");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyInternship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailUsedToUploadInternship")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CompanyInternshipActivePeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyInternshipAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CompanyInternshipAttachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyInternshipContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipContactTelephonePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipDimosLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipEKPASupervisor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipESPA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyInternshipFinishEstimation")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyInternshipForeas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyInternshipLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyInternshipPerifereiaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipPostalCodeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyInternshipTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompanyInternshipTransportOffer")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyInternshipType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyInternshipUploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyUploadedInternshipStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForInternshipUploadedAsCompany")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForInternshipUploadedAsCompany_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailUsedToUploadInternship");

                    b.HasIndex("RNGForInternshipUploadedAsCompany_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[RNGForInternshipUploadedAsCompany_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("CompanyInternships");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailUsedToUploadJobs")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PositionActivePeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionAddressLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PositionAttachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PositionContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionContactTelephonePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PositionDimosLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionForeas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionPerifereiaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionPostalCodeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PositionTransportOffer")
                        .HasColumnType("bit");

                    b.Property<string>("PositionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForPositionUploaded")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForPositionUploaded_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimesUpdated")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmailUsedToUploadJobs");

                    b.HasIndex("RNGForPositionUploaded_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[RNGForPositionUploaded_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("CompanyJobs");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJobApplied", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyPositionStatusAppliedAtTheCompanySide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPositionStatusAppliedAtTheStudentSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanysEmailWhereStudentAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanysUniqueIDWhereStudentAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeStudentAppliedForCompanyJob")
                        .HasColumnType("datetime2");

                    b.Property<long>("RNGForCompanyJobApplied")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForCompanyJobAppliedAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForCompanyJob", "RNGForCompanyJobApplied")
                        .IsUnique();

                    b.ToTable("CompanyJobsApplied");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJobApplied_CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanysEmailWhereStudentAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanysUniqueIDWhereStudentAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanysEmailWhereStudentAppliedForCompanyJob");

                    b.ToTable("CompanyJobApplied_CompanyDetails");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJobApplied_StudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeStudentAppliedForCompanyJob")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForCompanyJobAppliedAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForCompanyJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForCompanyJob");

                    b.ToTable("CompanyJobApplied_StudentDetails");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailUsedToUploadThesis")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyThesisAreasUpload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CompanyThesisAttachmentUpload")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyThesisCompanySupervisorFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyThesisContactPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyThesisContactPersonTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyThesisDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyThesisDescriptionsUploaded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyThesisSkillsNeeded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyThesisStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyThesisStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyThesisTimesUpdated")
                        .HasColumnType("int");

                    b.Property<string>("CompanyThesisTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyThesisUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CompanyThesisUploadDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProfessorInteresetedInCompanyThesis")
                        .HasColumnType("bit");

                    b.Property<string>("IsProfessorInterestedInCompanyThesisStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEmailInterestedInCompanyThesis")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RNGForThesisUploadedAsCompany")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForThesisUploadedAsCompany_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ThesisType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailUsedToUploadThesis");

                    b.HasIndex("ProfessorEmailInterestedInCompanyThesis");

                    b.HasIndex("RNGForThesisUploadedAsCompany_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[RNGForThesisUploadedAsCompany_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("CompanyTheses");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesisApplied", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailWhereStudentAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyThesisStatusAppliedAtCompanySide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyThesisStatusAppliedAtStudentSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyUniqueIDWhereStudentAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeStudentAppliedForThesis")
                        .HasColumnType("datetime2");

                    b.Property<long>("RNGForCompanyThesisApplied")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForCompanyThesisAppliedAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForThesis", "RNGForCompanyThesisApplied")
                        .IsUnique();

                    b.ToTable("CompanyThesesApplied");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesisApplied_CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmailWhereStudentAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyUniqueIDWhereStudentAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailWhereStudentAppliedForThesis");

                    b.ToTable("CompanyThesisApplied_CompanyDetails");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesisApplied_StudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeStudentAppliedForThesis")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForCompanyThesisAppliedAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForThesis");

                    b.ToTable("CompanyThesisApplied_StudentDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailWhereStudentShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStatusAtCompanySide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStatusAtStudentSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyUniqueIDWhereStudentShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeStudentShowInterest")
                        .HasColumnType("datetime2");

                    b.Property<long>("RNGForCompanyEventInterest")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForCompanyEventInterest_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailShowInterestForEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentTransportChosenLocationWhenShowInterestForCompanyEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentTransportNeedWhenShowInterestForCompanyEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentUniqueIDShowInterestForEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailShowInterestForEvent", "RNGForCompanyEventInterest")
                        .IsUnique();

                    b.ToTable("InterestInCompanyEvents");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEvent_CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmailWhereStudentShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyUniqueIDWhereStudentShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailWhereStudentShowInterestForCompanyEvent");

                    b.ToTable("InterestInCompanyEvent_CompanyDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEvent_StudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeStudentShowInterestForCompanyEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForCompanyEventShowInterestAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailShowInterestForCompanyEvent");

                    b.ToTable("InterestInCompanyEvent_StudentDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEventAsProfessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailWhereProfessorShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStatus_ShowInterestAsProfessor_AtCompanySide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEventStatus_ShowInterestAsProfessor_AtProfessorSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyUniqueIDWhereProfessorShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeProfessorShowInterestForCompanyEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorEmailShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessorUniqueIDShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForCompanyEventInterestAsProfessor")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForCompanyEventInterestAsProfessor_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailShowInterestForCompanyEvent", "RNGForCompanyEventInterestAsProfessor")
                        .IsUnique();

                    b.ToTable("InterestInCompanyEventAsProfessor");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEventAsProfessor_CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmailWhereProfessorShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyUniqueIDWhereProfessorShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailWhereProfessorShowInterestForCompanyEvent");

                    b.ToTable("InterestInCompanyEventAsProfessor_CompanyDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEventAsProfessor_ProfessorDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeProfessorShowInterestForCompanyEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorEmailShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessorUniqueIDShowInterestForCompanyEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RNGForCompanyEventShowInterestAsProfessor_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailShowInterestForCompanyEvent");

                    b.ToTable("InterestInCompanyEventAsProfessor_ProfessorDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeStudentShowInterest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorEmailWhereStudentShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStatusAtProfessorSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStatusAtStudentSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorUniqueIDWhereStudentShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForProfessorEventInterest")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForProfessorEventInterest_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailShowInterestForEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentTransportChosenLocationWhenShowInterestForProfessorEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentTransportNeedWhenShowInterestForProfessorEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentUniqueIDShowInterestForEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailShowInterestForEvent", "RNGForProfessorEventInterest")
                        .IsUnique();

                    b.ToTable("InterestInProfessorEvents");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEvent_ProfessorDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProfessorEmailWhereStudentShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessorUniqueIDWhereStudentShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailWhereStudentShowInterestForProfessorEvent");

                    b.ToTable("InterestInProfessorEvent_ProfessorDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEvent_StudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeStudentShowInterestForProfessorEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForProfessorEventShowInterestAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailShowInterestForProfessorEvent");

                    b.ToTable("InterestInProfessorEvent_StudentDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEventAsCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyNumberOfPeopleToShowUpWhenShowInterestForProfessorEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyUniqueIDShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCompanyShowInterestForProfessorEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorEmailWhereCompanyShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStatus_ShowInterestAsCompany_AtCompanySide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStatus_ShowInterestAsCompany_AtProfessorSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorUniqueIDWhereCompanyShowedInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForProfessorEventInterestAsCompany")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForProfessorEventInterestAsCompany_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailShowInterestForProfessorEvent", "RNGForProfessorEventInterestAsCompany")
                        .IsUnique();

                    b.ToTable("InterestInProfessorEventsAsCompany");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEventAsCompany_CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmailShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyUniqueIDShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCompanyShowInterestForProfessorEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForProfessorEventShowInterestAsCompany_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailShowInterestForProfessorEvent");

                    b.ToTable("InterestInProfessorEventAsCompany_CompanyDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEventAsCompany_ProfessorDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProfessorEmailWhereCompanyShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessorUniqueIDWhereCompanyShowInterestForProfessorEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailWhereCompanyShowInterestForProfessorEvent");

                    b.ToTable("InterestInProfessorEventAsCompany_ProfessorDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InternshipApplied", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailWhereStudentAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyUniqueIDWhereStudentAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeStudentAppliedForInternship")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternshipStatusAppliedAtTheCompanySide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternshipStatusAppliedAtTheStudentSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForInternshipApplied")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForInternshipAppliedAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForInternship", "RNGForInternshipApplied")
                        .IsUnique();

                    b.ToTable("InternshipsApplied");
                });

            modelBuilder.Entity("QuizManager.Models.InternshipApplied_CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmailWhereStudentAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyUniqueIDWhereStudentAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailWhereStudentAppliedForInternship");

                    b.ToTable("InternshipApplied_CompanyDetails");
                });

            modelBuilder.Entity("QuizManager.Models.InternshipApplied_StudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeStudentAppliedForInternship")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForInternshipAppliedAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForInternship");

                    b.ToTable("InternshipApplied_StudentDetails");
                });

            modelBuilder.Entity("QuizManager.Models.PlatformActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime_PerformedAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForWhat_PerformedAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPositionRNG_PerformedAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfAction_PerformedAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole_PerformedAction")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformActions");
                });

            modelBuilder.Entity("QuizManager.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ProfCVAttachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfCourses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("ProfFEK")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfGeneralFieldOfWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfGeneralSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfGnostikoAntikeimeno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfLab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfLabFEK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfLabFEK_AttachmentFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfLinkedInSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfOrchidProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfPersonalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfPersonalTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfPersonalTelephoneVisibility")
                        .HasColumnType("bit");

                    b.Property<string>("ProfPersonalWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProfRegistryNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfResearchGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfScholarProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfVahmidaDEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfWorkTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Professor_UniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ProfessorEmailUsedToUploadEvent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ProfessorEventActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorEventAreasOfInterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfessorEventAttachmentFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfessorEventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventDimosLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProfessorEventOfferingTransportToEventLocation")
                        .HasColumnType("bit");

                    b.Property<string>("ProfessorEventOtherOrganizer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfessorEventOtherOrganizerToBeVisible")
                        .HasColumnType("bit");

                    b.Property<string>("ProfessorEventPerifereiaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventPlaceLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventPostalCodeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventResponsiblePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventResponsiblePersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventResponsiblePersonTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStartingPointLocationToTransportPeopleToEvent1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStartingPointLocationToTransportPeopleToEvent2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStartingPointLocationToTransportPeopleToEvent3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ProfessorEventTime")
                        .HasColumnType("time");

                    b.Property<string>("ProfessorEventTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEventUniversityDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProfessorEventUploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RNGForEventUploadedAsProfessor")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForEventUploadedAsProfessor_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailUsedToUploadEvent");

                    b.HasIndex("RNGForEventUploadedAsProfessor_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[RNGForEventUploadedAsProfessor_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("ProfessorEvents");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ProfessorEmailUsedToUploadInternship")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ProfessorInternshipActivePeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorInternshipAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfessorInternshipAttachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfessorInternshipContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipContactTelephonePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipDimosLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipEKPASupervisor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipESPA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProfessorInternshipFinishEstimation")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorInternshipForeas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProfessorInternshipLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorInternshipPerifereiaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipPostalCodeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorInternshipTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfessorInternshipTransportOffer")
                        .HasColumnType("bit");

                    b.Property<string>("ProfessorInternshipType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProfessorInternshipUploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorUploadedInternshipStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForInternshipUploadedAsProfessor")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForInternshipUploadedAsProfessor_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailUsedToUploadInternship");

                    b.HasIndex("RNGForInternshipUploadedAsProfessor_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[RNGForInternshipUploadedAsProfessor_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("ProfessorInternships");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternshipApplied", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeStudentAppliedForProfessorInternship")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternshipStatusAppliedAtTheProfessorSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternshipStatusAppliedAtTheStudentSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEmailWhereStudentAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorUniqueIDWhereStudentAppliedForInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForProfessorInternshipApplied")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForProfessorInternshipApplied_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForProfessorInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForProfessorInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForProfessorInternship", "RNGForProfessorInternshipApplied")
                        .IsUnique();

                    b.ToTable("ProfessorInternshipsApplied");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternshipsApplied_ProfessorDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProfessorEmailWhereStudentAppliedForProfessorInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessorUniqueIDWhereStudentAppliedForProfessorInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailWhereStudentAppliedForProfessorInternship");

                    b.ToTable("ProfessorInternshipsApplied_ProfessorDetails");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternshipsApplied_StudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeStudentAppliedForProfessorInternship")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForProfessorInternshipAppliedAsStudent_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForProfessorInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForProfessorInternship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForProfessorInternship");

                    b.ToTable("ProfessorInternshipsApplied_StudentDetails");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyEmailInterestedInProfessorThesis")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCompanyInteresetedInProfessorThesis")
                        .HasColumnType("bit");

                    b.Property<string>("IsCompanyInterestedInProfessorThesisStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorEmailUsedToUploadThesis")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RNGForThesisUploaded")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForThesisUploaded_HashedAsUniqueID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ThesisActivePeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThesisAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ThesisAttachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThesisDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThesisSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThesisStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThesisTimesUpdated")
                        .HasColumnType("int");

                    b.Property<string>("ThesisTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThesisType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ThesisUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThesisUploadDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailInterestedInProfessorThesis");

                    b.HasIndex("ProfessorEmailUsedToUploadThesis");

                    b.HasIndex("RNGForThesisUploaded_HashedAsUniqueID")
                        .IsUnique()
                        .HasFilter("[RNGForThesisUploaded_HashedAsUniqueID] IS NOT NULL");

                    b.ToTable("ProfessorTheses");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesisApplied", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeStudentAppliedForProfessorThesis")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessorEmailWhereStudentAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorThesisStatusAppliedAtProfessorSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorThesisStatusAppliedAtStudentSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessorUniqueIDWhereStudentAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RNGForProfessorThesisApplied")
                        .HasColumnType("bigint");

                    b.Property<string>("RNGForProfessorThesisApplied_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForProfessorThesis", "RNGForProfessorThesisApplied")
                        .IsUnique();

                    b.ToTable("ProfessorThesesApplied");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesisApplied_ProfessorDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProfessorEmailWhereStudentAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessorUniqueIDWhereStudentAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmailWhereStudentAppliedForProfessorThesis");

                    b.ToTable("ProfessorThesisApplied_ProfessorDetails");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesisApplied_StudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeStudentAppliedForProfessorThesis")
                        .HasColumnType("datetime2");

                    b.Property<string>("RNGForProfessorThesisApplied_HashedAsUniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmailAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUniqueIDAppliedForProfessorThesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmailAppliedForProfessorThesis");

                    b.ToTable("ProfessorThesisApplied_StudentDetails");
                });

            modelBuilder.Entity("QuizManager.Models.ResearchGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ResearchGroupAcronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupFEK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ResearchGroupImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResearchGroupLab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupPostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ResearchGroupTeamImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResearchGroupTelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroupUniversityDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_EmbeddedPromoVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ResearchGroup_PresentationAttachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResearchGroup_Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_UniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_YouTubeChannel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroups");
                });

            modelBuilder.Entity("QuizManager.Models.ResearchGroup_NonFacultyMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfRegistrationOnResearchGroup_ForNonFacultyMember")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK_NonFacultyMemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_NonFacultyMemberLevelOfStudies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroup_NonFacultyMembers");
                });

            modelBuilder.Entity("QuizManager.Models.ResearchGroup_Patents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ResearchGroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_Patent_PatentDOI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_Patent_PatentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_Patent_PatentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_Patent_PatentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_Patent_PatentURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_UniqueID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroup_Patents");
                });

            modelBuilder.Entity("QuizManager.Models.ResearchGroup_Professors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfRegistrationOnResearchGroup_ForProfessorMember")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK_ProfessorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ProfessorRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroup_Professors");
                });

            modelBuilder.Entity("QuizManager.Models.ResearchGroup_Publications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PK_ResearchGroupEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupMemberEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupMemberPublication_Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupMemberPublication_CitedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupMemberPublication_Journal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupMemberPublication_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupMemberPublication_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK_ResearchGroupMemberPublication_Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroup_Publications");
                });

            modelBuilder.Entity("QuizManager.Models.ResearchGroup_ResearchActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ResearchGroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_EuropaCordisWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_OurProjectBudget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectAcronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectCoordinator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectELKECode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResearchGroup_ProjectEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResearchGroup_ProjectFramework")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectGrantAgreementNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectProgramme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectScientificResponsibleEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResearchGroup_ProjectStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResearchGroup_ProjectStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectTopic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectTotalCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectTotalEUContribution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_ProjectWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_UniqueID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroup_ResearchActions");
                });

            modelBuilder.Entity("QuizManager.Models.ResearchGroup_SpinOffCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ResearchGroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_SpinOff_CompanyAFM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_SpinOff_CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_SpinOff_CompanyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchGroup_UniqueID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroup_SpinOffCompany");
                });

            modelBuilder.Entity("QuizManager.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("QuizManager.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreasOfExpertise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CompletedECTS")
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverLetter")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Databases")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnrollmentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedGraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Grades")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("HasFinishedStudies")
                        .HasColumnType("bit");

                    b.Property<bool>("HomeVisibility")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InternshipStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastCVUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastProfileUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelOfDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MachineLearning")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NetworksAndTelecom")
                        .HasColumnType("bit");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PermanentPC")
                        .HasColumnType("bigint");

                    b.Property<string>("PermanentRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentTown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneVisibility")
                        .HasColumnType("bit");

                    b.Property<string>("PreferedRegions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredTowns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreferredTownsBoolean")
                        .HasColumnType("bit");

                    b.Property<bool>("Programming")
                        .HasColumnType("bit");

                    b.Property<long>("RegNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("SelfAssesmentAreas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfAssesmentSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentGoogleScholarProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_UniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetAreas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TechnicalSkills")
                        .HasColumnType("bit");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThesisStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Transport")
                        .HasColumnType("bit");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("QuizManager.Models.ThesisApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeApplied")
                        .HasColumnType("datetime2");

                    b.Property<long>("RNGForThesisUploaded")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("StudentCV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("StudentImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StudentRegNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThesisTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ThesisApplications");
                });

            modelBuilder.Entity("QuizManager.Models.AnnouncementAsCompany", b =>
                {
                    b.HasOne("QuizManager.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyAnnouncementCompanyEmail")
                        .HasPrincipalKey("CompanyEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("QuizManager.Models.AnnouncementAsProfessor", b =>
                {
                    b.HasOne("QuizManager.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorAnnouncementProfessorEmail")
                        .HasPrincipalKey("ProfEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyEvent", b =>
                {
                    b.HasOne("QuizManager.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyEmailUsedToUploadEvent")
                        .HasPrincipalKey("CompanyEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyInternship", b =>
                {
                    b.HasOne("QuizManager.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyEmailUsedToUploadInternship")
                        .HasPrincipalKey("CompanyEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJob", b =>
                {
                    b.HasOne("QuizManager.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("EmailUsedToUploadJobs")
                        .HasPrincipalKey("CompanyEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJobApplied_CompanyDetails", b =>
                {
                    b.HasOne("QuizManager.Models.CompanyJobApplied", "Application")
                        .WithOne("CompanyDetails")
                        .HasForeignKey("QuizManager.Models.CompanyJobApplied_CompanyDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJobApplied_StudentDetails", b =>
                {
                    b.HasOne("QuizManager.Models.CompanyJobApplied", "Application")
                        .WithOne("StudentDetails")
                        .HasForeignKey("QuizManager.Models.CompanyJobApplied_StudentDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesis", b =>
                {
                    b.HasOne("QuizManager.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyEmailUsedToUploadThesis")
                        .HasPrincipalKey("CompanyEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuizManager.Models.Professor", "ProfessorInterested")
                        .WithMany()
                        .HasForeignKey("ProfessorEmailInterestedInCompanyThesis")
                        .HasPrincipalKey("ProfEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ProfessorInterested");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesisApplied_CompanyDetails", b =>
                {
                    b.HasOne("QuizManager.Models.CompanyThesisApplied", "Application")
                        .WithOne("CompanyDetails")
                        .HasForeignKey("QuizManager.Models.CompanyThesisApplied_CompanyDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesisApplied_StudentDetails", b =>
                {
                    b.HasOne("QuizManager.Models.CompanyThesisApplied", "Application")
                        .WithOne("StudentDetails")
                        .HasForeignKey("QuizManager.Models.CompanyThesisApplied_StudentDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEvent_CompanyDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInCompanyEvent", "Application")
                        .WithOne("CompanyDetails")
                        .HasForeignKey("QuizManager.Models.InterestInCompanyEvent_CompanyDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEvent_StudentDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInCompanyEvent", "Application")
                        .WithOne("StudentDetails")
                        .HasForeignKey("QuizManager.Models.InterestInCompanyEvent_StudentDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEventAsProfessor_CompanyDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInCompanyEventAsProfessor", "EventInterest")
                        .WithOne("CompanyDetails")
                        .HasForeignKey("QuizManager.Models.InterestInCompanyEventAsProfessor_CompanyDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventInterest");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEventAsProfessor_ProfessorDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInCompanyEventAsProfessor", "EventInterest")
                        .WithOne("ProfessorDetails")
                        .HasForeignKey("QuizManager.Models.InterestInCompanyEventAsProfessor_ProfessorDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventInterest");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEvent_ProfessorDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInProfessorEvent", "Application")
                        .WithOne("ProfessorDetails")
                        .HasForeignKey("QuizManager.Models.InterestInProfessorEvent_ProfessorDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEvent_StudentDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInProfessorEvent", "Application")
                        .WithOne("StudentDetails")
                        .HasForeignKey("QuizManager.Models.InterestInProfessorEvent_StudentDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEventAsCompany_CompanyDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInProfessorEventAsCompany", "EventInterest")
                        .WithOne("CompanyDetails")
                        .HasForeignKey("QuizManager.Models.InterestInProfessorEventAsCompany_CompanyDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventInterest");
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEventAsCompany_ProfessorDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InterestInProfessorEventAsCompany", "EventInterest")
                        .WithOne("ProfessorDetails")
                        .HasForeignKey("QuizManager.Models.InterestInProfessorEventAsCompany_ProfessorDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventInterest");
                });

            modelBuilder.Entity("QuizManager.Models.InternshipApplied_CompanyDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InternshipApplied", "Application")
                        .WithOne("CompanyDetails")
                        .HasForeignKey("QuizManager.Models.InternshipApplied_CompanyDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.InternshipApplied_StudentDetails", b =>
                {
                    b.HasOne("QuizManager.Models.InternshipApplied", "Application")
                        .WithOne("StudentDetails")
                        .HasForeignKey("QuizManager.Models.InternshipApplied_StudentDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorEvent", b =>
                {
                    b.HasOne("QuizManager.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorEmailUsedToUploadEvent")
                        .HasPrincipalKey("ProfEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternship", b =>
                {
                    b.HasOne("QuizManager.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorEmailUsedToUploadInternship")
                        .HasPrincipalKey("ProfEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternshipsApplied_ProfessorDetails", b =>
                {
                    b.HasOne("QuizManager.Models.ProfessorInternshipApplied", "Application")
                        .WithOne("ProfessorDetails")
                        .HasForeignKey("QuizManager.Models.ProfessorInternshipsApplied_ProfessorDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternshipsApplied_StudentDetails", b =>
                {
                    b.HasOne("QuizManager.Models.ProfessorInternshipApplied", "Application")
                        .WithOne("StudentDetails")
                        .HasForeignKey("QuizManager.Models.ProfessorInternshipsApplied_StudentDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesis", b =>
                {
                    b.HasOne("QuizManager.Models.Company", "CompanyInterested")
                        .WithMany()
                        .HasForeignKey("CompanyEmailInterestedInProfessorThesis")
                        .HasPrincipalKey("CompanyEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuizManager.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorEmailUsedToUploadThesis")
                        .HasPrincipalKey("ProfEmail")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CompanyInterested");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesisApplied_ProfessorDetails", b =>
                {
                    b.HasOne("QuizManager.Models.ProfessorThesisApplied", "Application")
                        .WithOne("ProfessorDetails")
                        .HasForeignKey("QuizManager.Models.ProfessorThesisApplied_ProfessorDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesisApplied_StudentDetails", b =>
                {
                    b.HasOne("QuizManager.Models.ProfessorThesisApplied", "Application")
                        .WithOne("StudentDetails")
                        .HasForeignKey("QuizManager.Models.ProfessorThesisApplied_StudentDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("QuizManager.Models.CompanyJobApplied", b =>
                {
                    b.Navigation("CompanyDetails")
                        .IsRequired();

                    b.Navigation("StudentDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.CompanyThesisApplied", b =>
                {
                    b.Navigation("CompanyDetails")
                        .IsRequired();

                    b.Navigation("StudentDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEvent", b =>
                {
                    b.Navigation("CompanyDetails")
                        .IsRequired();

                    b.Navigation("StudentDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.InterestInCompanyEventAsProfessor", b =>
                {
                    b.Navigation("CompanyDetails")
                        .IsRequired();

                    b.Navigation("ProfessorDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEvent", b =>
                {
                    b.Navigation("ProfessorDetails")
                        .IsRequired();

                    b.Navigation("StudentDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.InterestInProfessorEventAsCompany", b =>
                {
                    b.Navigation("CompanyDetails")
                        .IsRequired();

                    b.Navigation("ProfessorDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.InternshipApplied", b =>
                {
                    b.Navigation("CompanyDetails")
                        .IsRequired();

                    b.Navigation("StudentDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorInternshipApplied", b =>
                {
                    b.Navigation("ProfessorDetails")
                        .IsRequired();

                    b.Navigation("StudentDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizManager.Models.ProfessorThesisApplied", b =>
                {
                    b.Navigation("ProfessorDetails")
                        .IsRequired();

                    b.Navigation("StudentDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
