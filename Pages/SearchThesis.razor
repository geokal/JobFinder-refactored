@page "/searchthesis"
@using Microsoft.EntityFrameworkCore
@using QuizManager.Models
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using System.Net.Http
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using QuizManager.Data
@inject IJSRuntime JS // Inject IJSRuntime for JSInterop

<style>
    h3 {
        font-size: 24px;
        color: #FF5733;
    }

    .position-description {
        max-width: 800px; /* Adjust the width as needed */
        word-wrap: break-word;
    }

    .apply-button {
        padding: 8px 16px;
        font-size: 14px;
        color: white;
        background-color: #007bff; /* Blue color */
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .apply-button:hover {
            background-color: #0056b3; /* Darker blue color on hover */
        }

    /* Added styles for the table */
    .table-container {
        margin-top: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 8px;
            border: 1px solid #dee2e6;
            text-align: left;
        }

        .table th {
            background-color: #f8f9fa; /* Light gray background */
            color: #333; /* Dark gray text color */
        }

        .table tbody tr:nth-child(even) {
            background-color: #f2f2f2; /* Alternate row background color */
        }

        .table tbody tr:hover {
            background-color: #e9ecef; /* Hover row background color */
        }
</style>

<h3><strong>Εύρεση Πτυχιακής Εργασίας</strong></h3>
<br />

<div class="table-container">
    @if (theses != null && theses.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Thesis Title</th>
                    <th>Professor</th>
                    <th>Date Uploaded</th>
                    <th>Attachment</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (thesis, index) in theses.Select((th, index) => (th, index)))
                {
                    <tr>
                        <td>@(index + 1)</td>
                        <td>
                            <button class="btn btn-link" @onclick="() => ToggleThesisDetails(thesis)">
                                @if (thesisDetails.ContainsKey(thesis.ThesisId) && thesisDetails[thesis.ThesisId])
                                {
                                    <i class="fas fa-minus"></i>
                                }
                                else
                                {
                                    <i class="fas fa-plus"></i>
                                }
                                @thesis.ThesisTitle
                            </button>
                        </td>
                        <td>@thesis.ProfessorName</td>
                        <td>@thesis.UploadDateTime.ToString("dd/MM/yyyy")</td>
                        <td>
                            @if (thesis.ThesisAttachment != null)
                            {
                                <button class="apply-button" @onclick="() => DownloadAttachment(thesis.ThesisAttachment, thesis.ThesisTitle)">Download</button>
                            }
                        </td>
                        <td>
                            <button class="apply-button" @onclick="() => ApplyForThesis(thesis)">Apply</button>
                        </td>
                    </tr>
                    @if (thesisDetails.ContainsKey(thesis.ThesisId) && thesisDetails[thesis.ThesisId])
                    {
                        <tr>
                            <td></td>
                            <td colspan="5">
                                <table class="inner-table">
                                    <tr>
                                        <th>Thesis Description</th>
                                        <td colspan="3" class="position-description">@thesis.ThesisDescription</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No theses available.</p>
    }
</div>

@inject IJSRuntime JSRuntime
@code {
    private List<ThesisWithProfessor> theses;
    private Dictionary<int, bool> thesisDetails = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTheses();
    }

    private async Task LoadTheses()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            // Now using Include to load related Professor data in a single query
            var thesesList = await dbContext.ProfessorTheses
                .Include(t => t.Professor)  // Eager load the Professor data
                .ToListAsync();

            theses = thesesList.Select(thesis => new ThesisWithProfessor
                {
                    ThesisId = thesis.Id,
                    ThesisTitle = thesis.ThesisTitle,
                    ThesisDescription = thesis.ThesisDescription,
                    UploadDateTime = thesis.ThesisUploadDateTime,
                    ProfessorName = thesis.Professor?.ProfName,  // Using null-conditional operator
                    ProfessorSurnname = thesis.Professor?.ProfSurname,
                    ProfessorEmail = thesis.ProfessorEmailUsedToUploadThesis,
                    ThesisAttachment = thesis.ThesisAttachment,
                    RNGForThesisUploaded = thesis.RNGForThesisUploaded,
                }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading theses: {ex.Message}");
        }
    }

    private void ToggleThesisDetails(ThesisWithProfessor thesis)
    {
        if (thesisDetails.ContainsKey(thesis.ThesisId))
        {
            thesisDetails[thesis.ThesisId] = !thesisDetails[thesis.ThesisId];
        }
        else
        {
            thesisDetails[thesis.ThesisId] = true; // Default to true if not found
        }
    }

    private async void ApplyForThesis(ThesisWithProfessor thesis)
    {
        Console.WriteLine($"Applying for thesis: {thesis.ThesisTitle}");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var student = await GetStudentDetails(user.Identity.Name);

            // Check if the student has already applied for this thesis with the same RNGForThesisUploaded
            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            var existingApplication = await dbContext.ThesisApplications
                .FirstOrDefaultAsync(app =>
                    app.StudentRegNumber == student.RegNumber &&
                    app.RNGForThesisUploaded == thesis.RNGForThesisUploaded);

            if (existingApplication != null)
            {
                // Handle case where student has already applied for this thesis
                await JSRuntime.InvokeVoidAsync("alert", $"You have already applied for thesis {thesis.ThesisTitle} with Unique Number {thesis.RNGForThesisUploaded}. You cannot apply again.");
                return;
            }

            // Continue with application since there is no existing application for this student and thesis
            var thesisApplication = new ThesisApplication
                {
                    RNGForThesisUploaded = thesis.RNGForThesisUploaded,
                    DateTimeApplied = DateTime.UtcNow,
                    StudentName = student.Name,
                    StudentSurname = student.Surname,
                    StudentRegNumber = student.RegNumber,
                    StudentCV = student.Attachment,
                    StudentImage = student.Image,
                    SupervisorName = thesis.ProfessorName,
                    SupervisorSurname = thesis.ProfessorSurnname,
                    SupervisorEmail = thesis.ProfessorEmail,
                    ThesisTitle = thesis.ThesisTitle
                };

            dbContext.ThesisApplications.Add(thesisApplication);
            await dbContext.SaveChangesAsync();

            // Display JavaScript alert after successful application
            await JSRuntime.InvokeVoidAsync("alert", $"You have successfully applied for thesis {thesis.ThesisTitle}. Go to Profile/Show My Applications to view your application details!");
        }
    }

    // Example method to get student details (this should be implemented based on your logic)
    private async Task<Student> GetStudentDetails(string email)
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        return await dbContext.Students.FirstOrDefaultAsync(s => s.Email == email);
    }

    private async Task DownloadAttachment(byte[] attachmentContent, string fileName)
    {
        try
        {
            var base64Content = Convert.ToBase64String(attachmentContent);
            await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading attachment: {ex.Message}");
        }
    }
}
