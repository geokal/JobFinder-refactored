@page "/companyRegistration"

@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using QuizManager.Data
@using QuizManager.Models
@using System.IO
@using System.Reflection.Metadata
@using static System.Net.FileWebRequest
@using System.Security.Claims
@using System.Linq
@using System.Runtime.InteropServices
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@inject ILogger<QuizViewer> Logger
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<style>
    /* Message styles */
    .good-message {
        background-color: green;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        width: 100%;
        box-sizing: border-box;
    }

    .error-message {
        background-color: palevioletred;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        width: 100%;
        box-sizing: border-box;
    }

    /* Button styles - original sizes */
    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        outline: none;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 5px;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s;
    }

    .btn:hover {
        background-color: #0056b3;
    }

    .btn-submit {
        background-color: #28a745;
    }

    .btn-submit:hover {
        background-color: #218838;
    }

    .btn-submit1 {
        background-color: #0056b3;
    }

    .btn-upload {
        background-color: burlywood;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

    .btn-upload:hover {
        background-color: #45a049;
    }

    /* Form structure - ultra-wide */
    .form-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin: 20px auto;
        width: 98%;
        max-width: 2400px; /* Extreme width */
        padding: 0 10px;
        box-sizing: border-box;
    }

    .grouped-section {
        background-color: #d0eaff;
        padding: 20px;
        border-radius: 8px;
        border: 2px solid black;
        width: 100%;
        min-width: 600px; /* Very wide columns */
        box-sizing: border-box;
    }

    /* Form groups - original sizing */
    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
        width: 100%;
    }

    /* Typography */
    body {
        background-color: #f0f0f0;
        color: #000000;
    }

    h3 {
        font-size: 24px;
        color: #FF5733;
    }

    h4 {
        font-size: 24px;
        color: darkblue;
    }

    /* Input styles */
    .readonly-input {
        background-color: #888888;
        color: navajowhite;
        font-weight: bold;
        width: 100%;
        max-width: 550px; /* Wider inputs */
    }

    .select-with-arrow {
        position: relative;
        width: 100%;
        max-width: 550px; /* Matches other inputs */
    }

    .select-with-arrow select {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: white;
        background-image: url('data:image/svg+xml;utf8,<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 8l3-3 3 3h0" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 20px 20px;
    }

    /* Tooltip styles */
    .tooltip-container {
        position: relative;
    }

    .tooltip-text {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 10px;
        z-index: 1;
        width: 200px;
        top: calc(100% + 5px);
        left: 0;
    }

    .tooltip-container.show-tooltip .tooltip-text {
        display: block;
    }

    /* Button containers */
    .button-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin-top: 10px;
    }

    .button-container button {
        padding: 10px 20px;
        font-size: 16px;
        color: white;
        background-color: #007bff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-bottom: 5px;
    }

    .button-container button:hover {
        background-color: #0056b3;
    }

    /* Form check elements */
    .form-check .form-check-input:disabled ~ .form-check-label {
        color: #000;
        opacity: 1;
    }

    /* Animations */
    @@keyframes blink {
        0% { opacity: 1; }
        50% { opacity: 0; }
        100% { opacity: 1; }
    }

    .blinking {
        animation: blink 1s infinite;
        color: black;
        font-size: 2em;
        text-align: left;
    }

    /* Input with hint */
    .input-with-hint {
        position: relative;
        width: 100%;
        max-width: 550px;
    }

    .input-with-hint .hint {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #495057;
    }

    .input-with-hint input {
        padding-right: 30px;
        width: 100%;
    }

    /* Telephone input group */
    .input-group-textfortelephone {
        background-color: #e9ecef;
        border: 1px solid #ced4da;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        line-height: 1.5;
        display: flex;
        align-items: center;
    }

    /* Validation animations */
	.shake {
		animation: shake 0.5s;
		border: 2px solid red !important;
	}

	@@keyframes shake {
		0% {
			transform: translateX(0);
		}

		20% {
			transform: translateX(-10px);
		}

		40% {
			transform: translateX(10px);
		}

		60% {
			transform: translateX(-10px);
		}

		80% {
			transform: translateX(10px);
		}

		100% {
			transform: translateX(0);
		}
	}

	.shake-input {
		background-color: #fff0f0 !important;
	}

	.error-message {
		color: red;
		font-weight: bold;
		padding: 10px;
		background-color: #fff0f0;
		border: 1px solid red;
		border-radius: 5px;
		margin: 10px 0;
	}

    .is-invalid {
        border: 1px solid red;
    }

    /* Responsive behavior */
    @@media (min-width: 1280px) {
        .form-container {
            flex-direction: row;
            flex-wrap: wrap;
        }
        
        .grouped-section {
            flex: 1 1 calc(50% - 20px);
            min-width: 600px;
        }
    }

    @@media (min-width: 1920px) {
        .form-container {
            flex-wrap: nowrap;
        }
        
        .grouped-section {
            flex: 1 1 calc(33.33% - 20px);
            min-width: 600px;
        }
    }

    @@media (max-width: 1279px) {
        .form-container {
            flex-direction: column;
        }
        .grouped-section {
            width: 100%;
            min-width: 100%;
        }
    }

	.multiselect-container {
		position: relative;
	}

	.selected-items-display {
		border: 1px solid #ccc;
		border-radius: 4px;
		padding: 6px 12px;
		min-height: 38px;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: space-between;
		background-color: white;
	}

		.selected-items-display .placeholder {
			color: #6c757d;
		}

	.selected-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 4px;
	}

	.selected-tag {
		background-color: #e9ecef;
		padding: 2px 6px;
		border-radius: 3px;
		display: flex;
		align-items: center;
		gap: 4px;
	}

	.remove-tag {
		cursor: pointer;
		font-weight: bold;
		color: #6c757d;
	}

		.remove-tag:hover {
			color: #dc3545;
		}

	.dropdown-arrow {
		color: #6c757d;
	}

	.multiselect-dropdown {
		position: absolute;
		top: 100%;
		left: 0;
		right: 0;
		background: white;
		border: 1px solid #ccc;
		border-radius: 4px;
		z-index: 1000;
		max-height: 300px;
		overflow-y: auto;
		box-shadow: 0 2px 8px rgba(0,0,0,0.15);
	}

	.multiselect-option {
		padding: 8px 12px;
		cursor: pointer;
		display: flex;
		align-items: center;
		gap: 8px;
	}

		.multiselect-option:hover {
			background-color: #f8f9fa;
		}

	.multiselect-actions {
		padding: 8px;
		border-top: 1px solid #eee;
		display: flex;
		gap: 8px;
	}

	.options-container {
		max-height: 200px;
		overflow-y: auto;
	}

	.search-container {
		border-bottom: 1px solid #eee;
	}
</style>

<div class="gray-background">
@if (!hasReadAsCompanyPermission)
{
	@*
	<div class="error-message">
		<p><strong>You are Not a Company User</strong></p>
		<p><strong>Please Login as Company User!</strong></p>
	</div>
	*@
}
else
{
	<h3 style="color: #000000;"><strong>★ Πληροφορίες Επιχείρησης ★</strong></h3>
		<EditForm Model="@newCompany" OnValidSubmit="SubmitForm">
			<div class="form-container">
				<div class="grouped-section">
					<h4>1) Στοιχεία Φορέα</h4>

					<div class="form-group">
						<label><strong>Email Επικοινωνίας Εταιρίας</strong></label>
						<InputText @bind-Value="newCompany.CompanyEmail" readonly class="readonly-input" />
					</div>

					<div class="form-group">
						<label><strong>Μοναδικό ID Εταιρείας</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-key"></i></span>
							<InputText @bind-Value="newCompany.Company_UniqueID"
									   readonly
									   class="readonly-input form-control"
									   style="color: blue;"
									   placeholder="Δημιουργείται αυτόματα μετά την πρώτη σας Εγγραφή" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Λογότυπο Εταιρίας</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-image"></i></span>
							<InputFile OnChange="HandleFileChange" accept="image/jpeg, image/png" class="form-control" />
						</div>
						@if (!string.IsNullOrEmpty(FileErrorMessage))
						{
							<div class="text-danger mt-2">@FileErrorMessage</div>
						}
					</div>

					<div class="form-group">
						<label><strong>Όνομα Εταιρίας(ENG)</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyName"
									   class="@($"{companyNameInputClass} form-control")" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Όνομα Εταιρίας(GR)</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyNameENG"
									   class="@($"{companyNameENGInputClass} form-control")" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Όνομα Εταιρίας(Short)</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyShortName"
									   class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Τύπος Εταιρίας</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<select @bind="newCompany.CompanyType" class="@($"{companyTypeInputClass} select-with-arrow")">
							<option value="">-- Είδος Φορέα --</option>
							@foreach (var foreas in ForeasType)
							{
								<option value="@foreas">@foreas</option>
							}
						</select>
					</div>

					<div class="form-group">
						<label><strong>Δραστηριότητα Εταιρίας</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="multiselect-container @companyActivityInputClass">
							<div class="selected-items-display" @onclick="ToggleActivityDropdown">
								@if (selectedActivities.Count == 0)
								{
									<span class>-- Πεδίο Δραστηριότητας --</span>
								}
								else
								{
									<div class="selected-tags">
										@foreach (var activity in selectedActivities)
										{
											<span class="selected-tag">
												@activity
												<button type="button" class="remove-tag" @onclick="@(() => RemoveActivity(activity))" @onclick:stopPropagation>×</button>
											</span>
										}
									</div>
								}
								<span class="dropdown-arrow">▼</span>
							</div>

							@if (showActivityDropdown)
							{
								<div class="multiselect-dropdown">
									<div class="search-container" style="padding: 5px;">
										<input type="text"
											   class="form-control"
											   placeholder="Αναζήτηση..."
											   value="@activitySearchTerm"
											   @oninput="HandleSearchInput" />
									</div>
									<div class="options-container">
										@if (filteredActivities.Count == 0 && !string.IsNullOrEmpty(activitySearchTerm))
										{
											<div class="no-results">Δεν βρέθηκαν αποτελέσματα</div>
										}
										else
										{
											@foreach (var activity in filteredActivities)
											{
												<div class="multiselect-option" @onclick="@(() => ToggleActivity(activity))">
													<input type="checkbox" checked="@selectedActivities.Contains(activity)" />
													<span>@activity</span>
												</div>
											}
										}
									</div>
									<div class="multiselect-actions">
										<button type="button" class="btn btn-sm btn-secondary" @onclick="SelectAllActivities" @onclick:stopPropagation>
											Επιλογή όλων
										</button>
										<button type="button" class="btn btn-sm btn-secondary" @onclick="ClearAllActivities" @onclick:stopPropagation>
											Αποεπιλογή όλων
										</button>
									</div>
								</div>
							}
						</div>
					</div>

					<div class="form-group">
						<label><strong>Α.Φ.Μ</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-id-card"></i></span>
							<input type="text" @bind="newCompany.CompanyTaxID"
								   @oninput="HandleCompanyTaxIDNumberInput"
								   class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Δ.Ο.Υ</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-university"></i></span>
							<InputText @bind-Value="newCompany.CompanyTaxOffice"
									   class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Τηλέφωνο</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-phone"></i></span>
							<InputText class="@($"{companyTelephoneInputClass} form-control")"
									   @bind-Value="newCompany.CompanyTelephone"
									   placeholder="69********"
									   maxlength="10" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Ιστοσελίδα</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-link"></i></span>
							<InputText @bind-Value="newCompany.CompanyWebsite"
									   class="@($"{companyWebsiteInputClass} form-control")" placeholder="https://www.mysite.com/" />
						</div>
						@if (!string.IsNullOrEmpty(newCompany.CompanyWebsite) && !IsValidWebsiteAtCompanyRegistration(newCompany.CompanyWebsite))
						{
							<div class="text-danger">Παρακαλώ εισάγετε μια έγκυρη διεύθυνση ιστότοπου.</div>
						}
					</div>

					<div class="form-group">
						<label><strong>Βίντεο Παρουσίασης Εταιρείας</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-link"></i></span>
							<InputText @bind-Value="newCompany.CompanyPresentationEmbeddedVideo"
									   class="form-control"
									   placeholder="https://www.youtube.com/****" />
						</div>
						@if (!string.IsNullOrEmpty(newCompany.CompanyPresentationEmbeddedVideo))
						{
							<div class="embed-responsive embed-responsive-16by9 mt-2">
								<iframe class="embed-responsive-item"
										src="@GetYoutubeEmbedUrl(newCompany.CompanyPresentationEmbeddedVideo)"
										allowfullscreen></iframe>
							</div>
						}
					</div>

					<div class="form-group">
						<label><strong>Ιστοσελίδα Ανακοινώσεων</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-link"></i></span>
							<InputText @bind-Value="newCompany.CompanyWebsiteAnnouncements" class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Ιστοσελίδα Θέσεων Εργασίας</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-link"></i></span>
							<InputText @bind-Value="newCompany.CompanyWebsiteJobs" class="form-control" />
						</div>
					</div>

					<div class="form-group tooltip-container">
						<label><strong>Κωδικός ATLAS</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-key"></i></span>
							<InputText @bind-Value="newCompany.AtlasID" @onclick="ShowTooltip" class="form-control" />
						</div>
						<div id="tooltip-text" class="tooltip-text">
							<a href="https://www.dind.uoa.gr/fileadmin/depts/dind.uoa.gr/www/uploads/Plirofories_praktikis_askisis_gia_to_tmima_Technologion_PSifiakis_Biomichanias_ver2.pdf" target="_blank">Οδηγός Εγγραφής στο Σύστημα ATLAS</a>
						</div>
					</div>

					<div class="form-group">
						<label><strong>Κωδικός ΣΒΣΕ</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-key"></i></span>
							<InputText @bind-Value="newCompany.SvseID" class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Ημερομηνία Εγγραφής ΣΒΣΕ</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
							<InputDate @bind-Value="newCompany.SvseDate" class="form-control" />
						</div>
					</div>

					<br />
					<h4>2) Στοιχεία Διεύθυνσης Παραρτήματος</h4>

					<div class="form-group">
						<label><strong>Χώρα</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<select @bind="newCompany.CompanyCountry" class="@($"{companyCountryInputClass} select-with-arrow")">
							<option value="" disabled selected> - Επιλέξτε Χώρα - </option>
							@foreach (var country in ExportCountries)
							{
								<option value="@country">@country</option>
							}
						</select>
					</div>

					<div class="form-group">
						<label><strong>Διεύθυνση</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<InputText id="autocomplete" @bind-Value="newCompany.CompanyLocation" class="@($"{companyLocationInputClass} form-control")" />
					</div>

					<div class="form-group">
						<label><strong>Ταχυδρομικός Κώδικας</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-home"></i></span>
							<input type="text"
								   @bind="newCompany.CompanyPC"
								   @oninput="HandleCompanyPCNumberInput"
								   maxlength="5"
								   pattern="\d*"
								   class="@($"{companyPCInputClass} form-control")"
								   placeholder="xxxxx" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Περιφέρεια</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<select @bind="newCompany.CompanyRegions" class="@($"{companyRegionsInputClass} select-with-arrow")">
							<option value="">-- Επιλέξτε Περιφέρεια --</option>
							@foreach (var region in Regions)
							{
								<option value="@region">@region</option>
							}
						</select>
					</div>

					<div class="form-group">
						<label><strong>Έδρα</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<select @bind="newCompany.CompanyTown" class="@($"{companyTownInputClass} select-with-arrow")">
							<option value="">-- Επιλέξτε Πόλη --</option>
							@if (!string.IsNullOrEmpty(newCompany.CompanyRegions) && RegionToTownsMap.ContainsKey(newCompany.CompanyRegions))
							{
								foreach (var town in RegionToTownsMap[newCompany.CompanyRegions])
								{
									<option value="@town">@town</option>
								}
							}
						</select>
					</div>
					<br />
					<br />
				</div>

				<div class="grouped-section">
					<h4>3) Τομέας Δραστηριότητας</h4>
					<div class="form-group">
						<label for="companyDescription"><strong>Περιγραφή Εταιρίας</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<InputTextAreaWithMaxLength @bind-Value="newCompany.CompanyDescription"
													CssClass="@($"{companyDescriptionInputClass} form-control")"
													Id="companyDescription" />
					</div>

					<div class="form-group">
						<label><strong>Περιοχές Δραστηριότητας</strong><span style="color: red; font-weight: bold;"> *</span></label>

						<div class="input-group mb-3">
							<input type="text" class="form-control" placeholder="Αναζήτηση/Προσθήκη Περιοχής"
								   @bind="areassearchTerm" @oninput="FilterAvailableAreas" />
							<div class="input-group-append">
								<span class="input-group-text"><i class="fas fa-search" style="color: #4682b4;"></i></span>
							</div>
						</div>

						<div class="d-flex align-items-center">
							<div style="width: 45%;">
								<div class="text-center mb-1">
									<i class="fas fa-list-alt" style="color: #4682b4; font-size: 1.2rem;"></i>
								</div>
								<select id="availableAreas" class="form-control" size="10" multiple @onchange="OnAreaSelect" style="height: 200px;">
									@foreach (var area in filteredAreas)
									{
										<option @key="area.AreaName" value="@area.AreaName" @onclick="() => ToggleExpansion(area.AreaName)">
											@area.AreaName
										</option>
										@if (expandedAreas.Contains(area.AreaName))
										{
											var subFields = area.AreaSubFields?.Split(',');
											if (subFields != null)
											{
												foreach (var subField in subFields)
												{
													<option @key="subField" value="@subField" style="padding-left: 20px;">• @subField</option>
												}
											}
										}
									}
								</select>
							</div>

							<div class="d-flex flex-column mx-1">
								<button type="button" class="btn btn-outline-primary mb-1 px-2" @onclick="MoveSelectedAreaToRight">
									<i class="fas fa-arrow-right"></i>
								</button>
								<button type="button" class="btn btn-outline-primary px-2" @onclick="MoveSelectedAreaToLeft">
									<i class="fas fa-arrow-left"></i>
								</button>
							</div>

							<div style="width: 45%;">
								<div class="text-center mb-1">
									<i class="fas fa-check-circle" style="color: #28a745; font-size: 1.2rem;"></i>
								</div>
								<select id="selectedAreas" class="form-control @companyAreasInputClass"
										size="10" multiple style="height: 200px;">
									@foreach (var selectedArea in selectedAreasForAssessment)
									{
										<option @key="selectedArea.AreaName">@selectedArea.AreaName</option>
									}
								</select>
							</div>
						</div>
					</div>

					<div class="form-group">
						<label><strong>Απαιτούμενες Ικανότητες</strong></label>

						<div class="input-group mb-3">
							<input type="text" class="form-control" placeholder="Αναζήτηση/Προσθήκη Ικανότητας"
								   @bind="skillSearchTerm" @oninput="FilterAvailableSkills" />
							<div class="input-group-append">
								<span class="input-group-text"><i class="fas fa-search" style="color: #4682b4;"></i></span>
							</div>
						</div>

						<div class="d-flex align-items-center">
							<div style="width: 45%;">
								<div class="text-center mb-1">
									<i class="fas fa-list-alt" style="color: #4682b4; font-size: 1.2rem;"></i>
								</div>
								<select id="availableSkills" class="form-control" size="5" multiple style="height: 200px;">
									@foreach (var skill in filteredSkills)
									{
										<option @key="skill">@skill</option>
									}
								</select>
							</div>

							<div class="d-flex flex-column mx-1">
								<button type="button" class="btn btn-outline-primary mb-1 px-2" @onclick="MoveSelectedToRight">
									<i class="fas fa-arrow-right"></i>
								</button>
								<button type="button" class="btn btn-outline-primary px-2" @onclick="MoveSelectedToLeft">
									<i class="fas fa-arrow-left"></i>
								</button>
							</div>

							<div style="width: 45%;">
								<div class="text-center mb-1">
									<i class="fas fa-check-circle" style="color: #28a745; font-size: 1.2rem;"></i>
								</div>
								<select id="selectedSkills" class="form-control" size="5" multiple style="height: 200px;">
									@foreach (var skill in selectedSkills)
									{
										<option @key="skill">@skill</option>
									}
								</select>
							</div>
						</div>
					</div>

					<br />
					<br />
					<h4>4) Στοιχεία Υπευθύνων Διαχείρισης Πλατφόρμας</h4>
					<div class="form-group">
						<label><strong>Όνομα CEO</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyCEOName" class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Επώνυμο CEO</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyCEOSurname" class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Όνομα Υπευθύνου HR</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyHRName" class="@($"{companyHRNameInputClass} form-control")" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Επώνυμο Υπευθύνου HR</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyHRSurname" class="@($"{companyHRSurnameInputClass} form-control")" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Email Επικοινωνίας Υπευθύνου HR</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-envelope"></i></span>
							<InputText @bind-Value="newCompany.CompanyHREmail"
									   @onblur="ValidateEmailHR"
									   class="@($"{companyHREmailInputClass} form-control")" />
						</div>
						@if (!string.IsNullOrEmpty(emailValidationMessagehr))
						{
							<div class="text-danger">@emailValidationMessagehr</div>
						}
					</div>

					<div class="form-group">
						<label><strong>Τηλέφωνο</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-phone"></i></span>
							<InputText class="@($"{companyHRTelephoneInputClass} form-control")"
									   @bind-Value="newCompany.CompanyHRTelephone"
									   placeholder="69********"
									   maxlength="10" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Όνομα Διαχειριστή Πλατφόρμας</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyAdminName" class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Επώνυμο Διαχειριστή Πλατφόρμας</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
							<InputText @bind-Value="newCompany.CompanyAdminSurname" class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Email Επικοινωνίας Διαχειριστή Πλατφόρμας</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-envelope"></i></span>
							<InputText @bind-Value="newCompany.CompanyAdminEmail"
									   @onblur="ValidateEmailAdmin"
									   class="form-control" />
						</div>
						@if (!string.IsNullOrEmpty(emailValidationMessageadmin))
						{
							<div class="text-danger">@emailValidationMessageadmin</div>
						}
					</div>

					<div class="form-group">
						<label><strong>Τηλέφωνο Επικοινωνίας Διαχειριστή Πλατφόρμας</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-phone"></i></span>
							<InputText class="form-control"
									   @bind-Value="newCompany.CompanyAdminTelephone"
									   placeholder="69********"
									   maxlength="10" />
						</div>
					</div>
				</div>

				<div class="grouped-section">
					<h4>5) Στοιχεία Εταιρικής Δραστηριότητας</h4>

					<div class="form-group">
						<label><strong>Αριθμός Εργαζομένων</strong></label>
						<div class="input-group">
							<span class="input-group-text"><i class="fas fa-users"></i></span>
							<InputNumber @bind-Value="newCompany.CompanyEmployees" class="form-control" />
						</div>
					</div>

					<div class="form-group">
						<label><strong>Τελευταία Ενημέρωση Αριθμού Εργαζομένων</strong></label>
						<InputDate @bind-Value="newCompany.CompanEmployeesLastUpdate" />
					</div>

					<div class="form-group">
						<label><strong>Κύκλος Εργασιών</strong></label>
						<div class="input-with-hint">
							<InputNumber @bind-Value="newCompany.CompanyTurnover" class="form-control" />
							<div class="hint">€</div>
						</div>
					</div>

					<br />
					<div class="form-group">
						<label @onclick="ToggleCountriesVisibility" style="cursor: pointer;" title="Εμφάνισε">
							<strong>Χώρες Εξαγωγών</strong><span style="color: lightskyblue; font-style: italic;">(Άνοιγμα/Κλείσιμο)</span>
						</label>
						<br />
						@if (showCountries)
						{
							<div class="table-responsive">
								<table class="table table-bordered">
									<tbody>
										@for (var rowIndex = 0; rowIndex < Math.Ceiling((double)ExportCountries.Count / 3); rowIndex++)
										{
											<tr>
												@for (var colIndex = 0; colIndex < 3; colIndex++)
												{
													var index = rowIndex * 3 + colIndex;
													if (index < ExportCountries.Count)
													{
														var country = ExportCountries[index];
														<td style="padding: 5px; border: none; width: 33%;">
															<div class="custom-control custom-checkbox d-flex align-items-center">
																<input type="checkbox" class="custom-control-input" id="@($"country_{country.Replace(" ", "_")}")"
																	   checked="@countrySelections[country]" @onchange="() => ToggleCountrySelection(country)" style="width: 14px; height: 14px; margin-right: 5px;" />
																<label class="custom-control-label small mb-0" for="@($"country_{country.Replace(" ", "_")}")" style="font-size: 12px;">@country</label>
															</div>
														</td>
													}
													else
													{
														<td style="padding: 5px; border: none;"></td>
													}
												}
											</tr>
										}
									</tbody>
								</table>
							</div>
						}
					</div>

					<div class="form-group">
						<label><strong>Αριθμός Χωρών Εξαγωγών</strong></label>
						<InputNumber @bind-Value="newCompany.CompanyExportCountriesNumber" />
					</div>

					<div class="form-group">
						<label><strong>Τελευταία Ενημέρωση Αριθμού Χωρών Εξαγωγών</strong></label>
						<InputDate @bind-Value="newCompany.CompanyExportCountriesLastUpdate" />
					</div>

					<div>
						<label><strong>Εμφάνιση Δραστηριότητας Εταιρίας</strong><span style="color: red; font-weight: bold;"> *</span></label>
						<InputRadioGroup @bind-Value="newCompany.CompanyVisibleActivity">
							<InputRadio Value="true" /> Yes
							<InputRadio Value="false" /> No
						</InputRadioGroup>
					</div>
				</div>
			</div>
			<br />
			<!-- Add error message display here -->
			@if (!string.IsNullOrEmpty(errorMessage))
			{
				<div class="alert alert-danger" role="alert">
					<strong>Σφάλμα:</strong> @errorMessage
				</div>
			}
			@*EDW KANW TO SUBMIT TA STOIXEIA TOY COMPANY*@
			<div class="form-check" @onclick="ShowMessage">
				<CustomCheckbox @bind-Value="agreeTerms" @ref="customCheckbox" />
				<label class="form-check-label" for="customCheckboxId">
					Έχω διαβάσει και αποδέχομαι τους
					<a @onclick="ShowUserAgreementModal" style="text-decoration: underline; color: blue;">όρους συμμετοχής</a>
					στην πλατφόρμα
				</label>
			</div>
			<br />
			@if (showMessage)
			{
				<div class="alert alert-warning" role="alert">
					Πατήστε πρώτα παραπάνω στους <span style="color: blue;">όρους συμμετοχής</span> και στην συνέχεια επιλέξτε Αποδοχή Όρων για να συνεχίσετε!
				</div>
			}

			@if (!isRegistered)
			{
				<button type="submit" class="btn btn-submit1" disabled="@(!agreeTerms)">Αποθήκευση</button>
			}
			else
			{
				<button type="button" class="btn btn-submit1" disabled="@(!agreeTerms)" @onclick="UpdateCompanyRegistration">Αποθήκευση Ανανέωσης</button>
				<br />
			}
			<UserAgreementModal OnAgree="AgreeToTerms" OnDecline="DeclineTerms" />

			<br />
			<br />
			@if (updated)
			{
				<p class="good-message"><strong>Η Ανανέωση των στοιχείων της εταιρίας ολοκληρώθηκε επιτυχώς!</strong></p>
			}
			@if (saved)
			{
				<p class="good-message"><strong>Η Εγγραφή της εταιρίας ολοκληρώθηκε επιτυχώς!</strong></p>
			}
			<br />
			@*
			@if (error)
			{
				<p class="error-message"><strong>Ooops...Κάτι πήγε στραβά :(</strong></p>
			}
			@if (showValidationError)
			{
				<div class="alert alert-danger" role="alert">
					Συμπληρώστε Όλα Τα Υποχρεωτικά Πεδία και Προσπαθήστε Ξανά!
				</div>
			}
			*@
			<br />
			<br />
		</EditForm>
}
</div>





@code {
	private bool showActivityDropdown = false;
	private string activitySearchTerm = string.Empty;
	private List<string> selectedActivities = new List<string>();
	private List<string> filteredActivities = new List<string>();

	private bool showStudentsWithProgrammingSkills = false;
	private bool showStudentsWithMachineLearningSkills = false;
	private bool showStudentsWithDatabaseSkills = false;
	private bool showStudentsWithNetworkAndTelecomSkills = false;
	private List<Student> filteredStudents = new List<Student>();
	private string companyName = "Anonymous User";
	public Company newCompany = new Company
	{
		CompanEmployeesLastUpdate = DateTime.Today.Date,
		CompanyTurnoverLastUpdate = DateTime.Today.Date,
		CompanyExportCountriesNumberLastUpdate = DateTime.Today.Date,
		CompanyExportCountriesLastUpdate = DateTime.Today.Date
	};

	public bool saved = false;
	public bool error = false;
	public bool showstudentSearch = false;
	private bool hasReadAsCompanyPermission = false;

	private bool showResultsClicked = false;

	private string keywordSearch;
	private List<Student> filteredStudentsByKeyword = new List<Student>();
	private bool showKeywordSearch = false;
	private IBrowserFile file;
	private Company imageData = new Company(); // Initialize companyData


		// Company validation variables
	private string errorMessage = "";
	private string? companyTaxIDNumberInput;
	private string companyTelephoneInputClass = "";
	private string? companyPCNumberInput;
	private string companyNameInputClass = "";
	private string companyNameENGInputClass = "";
	private string companyTypeInputClass = "";
	private string companyActivityInputClass = "";
	private string companyWebsiteInputClass = "";
	private string companyCountryInputClass = "";
	private string companyLocationInputClass = "";
	private string companyPCInputClass = "";
	private string companyRegionsInputClass = "";
	private string companyTownInputClass = "";
	private string companyHRNameInputClass = "";
	private string companyHRSurnameInputClass = "";
	private string companyHREmailInputClass = "";
	private string companyHRTelephoneInputClass = "";
	private string companyDescriptionInputClass = "";
	private string companyAreasInputClass = "";
	private string companySkillsInputClass = "";

	private string selectedRegion;
	private string selectedTown;

	private bool showTooltip = false;


	private List<Area> availableAreas = new List<Area>();
	private List<SelectedArea> selectedAreasForAssessment = new List<SelectedArea>();
	private List<string> expandedAreas = new List<string>();

	private List<string> availableSkills = new List<string> { };
	private List<string> selectedSkills = new List<string>();
	private List<string> finalSelectedSkills = new List<string>();
	private List<Skill> selectedSkillsForAssessment = new List<Skill>();

	private string emailValidationMessagehr;
	private string emailValidationMessageadmin;

	private bool agreeTerms = false;
	private CustomCheckbox customCheckbox;

	private Dictionary<string, bool> countrySelections = new Dictionary<string, bool>();

	private bool showCountries = false; 
	private bool isRegistered;
	public bool updated = false;

	List<Area> filteredAreas = new List<Area>();
	string areassearchTerm = "";
	List<string> filteredSkills = new List<string>();
	string skillSearchTerm = "";

	private string FileErrorMessage { get; set; }

	private bool showValidationError = false;

	private string websiteValidationMessageForCompanyProfile = "";
	private bool showMessage = false;


	private string GetValidationClass(string fieldValue)
	{
		return string.IsNullOrEmpty(fieldValue) && showValidationError ? "shake error" : "";
	}

	private bool IsValidWebsiteAtCompanyRegistration(string url)
	{
		// Return false if the input is null or empty
		if (string.IsNullOrEmpty(url))
			return false;

		// Simple regex to check for a valid website URL
		string pattern = @"^https?:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}.*$";
		return Regex.IsMatch(url, pattern);
	}




	private List<string> ForeasType = new List<string>
	{
		"Ιδιωτικός Φορέας",
		"Δημόσιος Φορέας",
		"Μ.Κ.Ο.",
		"Άλλο"
	};

	private List<string> Activity = new List<string>
	{
		"Αθλητισμός",
		"Άλλο",
		"Βιοϊατρική",
		"Βιομηχανία(γενικά)",
		"Βιοτεχνολογία",
		"Γεωργία/Κτηνοτροφία",
		"Γραφιστική/Σχέδιο",
		"Δημόσιες Σχέσεις",
		"Δημόσιες Υπηρεσίες",
		"Διατροφή/Γαστρονομία",
		"Διαφήμιση",
		"Διαχείριση Ακινήτων",
		"Διαχείριση Ανθρώπινου Δυναμικού",
		"Εκδόσεις/Εκτυπώσεις",
		"Εκπαιδευτικοί Φορείς",
		"Ενέργεια",
		"Ηλεκτρονικά",
		"Ηλεκτρονικό Εμπόριο",
		"Θέρμανση/Κλιματισμός",
		"Ιατρική",
		"Κοινωνικές Υπηρεσίες",
		"Λιανικό Εμπόριο",
		"Λογισμικό",
		"Μάρκετινγκ",
		"Μέσα Μαζικής Ενημέρωσης",
		"Μεταφορές/Logistics",
		"Μηχανολογία",
		"Μικροηλεκτρονική",
		"Μοριακή Βιολογία",
		"Νομικά",
		"Οικολογία/Προστασία Περιβάλλοντος/Ανακύκλωση",
		"Οικονομία/Τραπεζική/Ασφάλειες",
		"Οπτικά",
		"Παροχή Διαδικτυακών Υπηρεσιών",
		"Πετρελαιοειδή",
		"Πληροφορική",
		"Σύμβουλοι Επιχειρήσεων",
		"Τέχνη/Μουσεία",
		"Τεχνικά Γραφεία-Εταιρίες/Κατασκευές",
		"Τηλεοπτικές Παραγωγές",
		"Τηλεπικοινωνίες",
		"Τοπική/Κεντρική Διοίκηση",
		"Τουριστικές Επιχειρήσεις",
		"Υφάσματα/Ένδυση/Μόδα",
		"Φωτογραφία",
		"Χημικά Προϊόντα/Φάρμακα",
	};

	private List<string> Regions = new List<string>
	{
		"Ανατολική Μακεδονία και Θράκη",
		"Κεντρική Μακεδονία",
		"Δυτική Μακεδονία",
		"Ήπειρος",
		"Θεσσαλία",
		"Ιόνια Νησιά",
		"Δυτική Ελλάδα",
		"Κεντρική Ελλάδα",
		"Αττική",
		"Πελοπόννησος",
		"Βόρειο Αιγαίο",
		"Νότιο Αιγαίο",
		"Κρήτη"
};

	private List<string> ExportCountries = new List<string>
	{
		"United States", "Canada", "Afghanistan", "Albania", "Algeria", "American Samoa",
		"Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and/or Barbuda", "Argentina",
		"Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh",
		"Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina",
		 "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria",
		 "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Cape Verde", "Cayman Islands", "Central African Republic", 
		 "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands",
		 "Costa Rica", "Croatia (Hrvatska)", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", 
		 "Dominican Republic", "East Timor", "Ecudaor", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia",
		 "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "France, Metropolitan", "French Guiana",
		 "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece",
		 "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and Mc Donald Islands",
		 "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran (Islamic Republic of)", "Iraq", "Ireland", "Israel",
		 "Italy", "Ivory Coast", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Korea, Democratic People's Republic of",
		 "Korea, Republic of", "Kosovo", "Kuwait", "Kyrgyzstan", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho",
		 "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia", "Madagascar", "Malawi",
		 "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico",
		 "Micronesia, Federated States of", "Moldova, Republic of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar",
		 "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria",
		 "Niue", "Norfork Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru",
		 "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda",
		 "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe",
		 "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia",
		 "South Africa", "South Georgia South Sandwich Islands", "South Sudan", "Spain", "Sri Lanka", "St. Helena", "St. Pierre and Miquelon",
		 "Sudan", "Suriname", "Svalbarn and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan", "Tajikistan",
		 "Tanzania, United Republic of", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", 
		 "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States minor outlying islands",
		 "Uruguay", "Uzbekistan", "Vanuatu", "Vatican City State", "Venezuela", "Vietnam", "Virigan Islands (British)", "Virgin Islands (U.S.)", "Wallis and Futuna Islands",
		 "Western Sahara", "Yemen", "Yugoslavia", "Zaire", "Zambia", "Zimbabwe"
	};

	private Dictionary<string, List<string>> RegionToTownsMap = new Dictionary<string, List<string>>
    {
        {"Ανατολική Μακεδονία και Θράκη", new List<string> {"Κομοτηνή", "Αλεξανδρούπολη", "Καβάλα", "Ξάνθη", "Δράμα", "Ορεστιάδα", "Διδυμότειχο", "Ίασμος", "Νέα Βύσσα", "Φέρες"}},
        {"Κεντρική Μακεδονία", new List<string> {"Θεσσαλονίκη", "Κατερίνη", "Σέρρες", "Κιλκίς", "Πολύγυρος", "Ναούσα", "Έδεσσα", "Γιαννιτσά", "Καβάλα", "Άμφισσα"}},
        {"Δυτική Μακεδονία", new List<string> {"Κοζάνη", "Φλώρινα", "Καστοριά", "Γρεβενά"}},
        {"Ήπειρος", new List<string> {"Ιωάννινα", "Άρτα", "Πρέβεζα", "Ηγουμενίτσα"}},
        {"Θεσσαλία", new List<string> {"Λάρισα", "Βόλος", "Τρίκαλα", "Καρδίτσα"}},
        {"Ιόνια Νησιά", new List<string> {"Κέρκυρα", "Λευκάδα", "Κεφαλονιά", "Ζάκυνθος", "Ιθάκη", "Παξοί", "Κυθήρα"}},
        {"Δυτική Ελλάδα", new List<string> {"Πάτρα", "Μεσολόγγι", "Αμφιλοχία", "Πύργος", "Αιγίο", "Ναύπακτος"}},
        {"Κεντρική Ελλάδα", new List<string> {"Λαμία", "Χαλκίδα", "Λιβαδειά", "Θήβα", "Αλιάρτος", "Αμφίκλεια"}},
        {"Αττική", new List<string> {"Αθήνα", "Πειραιάς", "Κηφισιά", "Παλλήνη", "Αγία Παρασκευή", "Χαλάνδρι", "Καλλιθέα", "Γλυφάδα", "Περιστέρι", "Αιγάλεω"}},
        {"Πελοπόννησος", new List<string> {"Πάτρα", "Τρίπολη", "Καλαμάτα", "Κορίνθος", "Άργος", "Ναύπλιο", "Σπάρτη", "Κυπαρισσία", "Πύργος", "Μεσσήνη"}},
        {"Βόρειο Αιγαίο", new List<string> {"Μυτιλήνη", "Χίος", "Λήμνος", "Σάμος", "Ίκαρος", "Λέσβος", "Θάσος", "Σκύρος", "Ψαρά"}},
        {"Νότιο Αιγαίο", new List<string> {"Ρόδος", "Κως", "Κρήτη", "Κάρπαθος", "Σαντορίνη", "Μύκονος", "Νάξος", "Πάρος", "Σύρος", "Άνδρος"}},
        {"Κρήτη", new List<string> {"Ηράκλειο", "Χανιά", "Ρέθυμνο", "Αγία Νικόλαος", "Ιεράπετρα", "Σητεία", "Κίσαμος", "Παλαιόχωρα", "Αρχάνες", "Ανώγεια"}},
    };

	private async Task SubmitForm()
	{
		error = false;
		showValidationError = false;

		// Reset all input classes
		companyNameInputClass = "";
		companyNameENGInputClass = "";
		companyTypeInputClass = "";
		companyActivityInputClass = "";
		companyTelephoneInputClass = "";
		companyWebsiteInputClass = "";
		companyCountryInputClass = "";
		companyLocationInputClass = "";
		companyPCInputClass = "";
		companyRegionsInputClass = "";
		companyTownInputClass = "";
		companyHRNameInputClass = "";
		companyHRSurnameInputClass = "";
		companyHREmailInputClass = "";
		companyHRTelephoneInputClass = "";
		companyDescriptionInputClass = "";
		companyAreasInputClass = "";

		// List to track missing mandatory fields
		var missingFields = new List<string>();

		// Validate ONLY mandatory fields (non-mandatory fields are excluded)
		if (string.IsNullOrEmpty(newCompany.CompanyName))
		{
			companyNameInputClass = "shake shake-input";
			missingFields.Add("Όνομα Εταιρίας(ENG)");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyNameENG))
		{
			companyNameENGInputClass = "shake shake-input";
			missingFields.Add("Όνομα Εταιρίας(GR)");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyType))
		{
			companyTypeInputClass = "shake shake-input";
			missingFields.Add("Τύπος Εταιρίας");
		}
		if (selectedActivities.Count == 0)
		{
			companyActivityInputClass = "shake shake-input";
			missingFields.Add("Δραστηριότητα Εταιρίας");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyTelephone))
		{
			companyTelephoneInputClass = "shake shake-input";
			missingFields.Add("Τηλέφωνο");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyWebsite))
		{
			companyWebsiteInputClass = "shake shake-input";
			missingFields.Add("Ιστοσελίδα");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyCountry))
		{
			companyCountryInputClass = "shake shake-input";
			missingFields.Add("Χώρα");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyLocation))
		{
			companyLocationInputClass = "shake shake-input";
			missingFields.Add("Διεύθυνση");
		}
		if (newCompany.CompanyPC <= 0) 
		{
			companyPCInputClass = "shake shake-input";
			missingFields.Add("Ταχυδρομικός Κώδικας");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyRegions))
		{
			companyRegionsInputClass = "shake shake-input";
			missingFields.Add("Περιφέρεια");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyTown))
		{
			companyTownInputClass = "shake shake-input";
			missingFields.Add("Πόλη");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHRName))
		{
			companyHRNameInputClass = "shake shake-input";
			missingFields.Add("Όνομα Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHRSurname))
		{
			companyHRSurnameInputClass = "shake shake-input";
			missingFields.Add("Επώνυμο Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHREmail))
		{
			companyHREmailInputClass = "shake shake-input";
			missingFields.Add("Email Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHRTelephone))
		{
			companyHRTelephoneInputClass = "shake shake-input";
			missingFields.Add("Τηλέφωνο Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyDescription))
		{
			companyDescriptionInputClass = "shake shake-input";
			missingFields.Add("Περιγραφή Εταιρίας");
		}
		if (selectedAreasForAssessment.Count() == 0)
		{
			companyAreasInputClass = "shake shake-input";
			missingFields.Add("Περιοχές Δραστηριότητας");
		}

		// Check if any mandatory field is empty
		if (missingFields.Count > 0)
		{
			error = true;
			showValidationError = true;
			errorMessage = $"Συμπληρώστε τα ακόλουθα υποχρεωτικά πεδία: {string.Join(", ", missingFields)}";
			return;
		}

		try
		{
			newCompany.CompanyDesiredSkills = string.Join(",", selectedSkills);
			newCompany.CompanyAreas = string.Join(", ", selectedAreasForAssessment.Select(sa => $"{sa.AreaName}"));
			newCompany.Company_UniqueID = "COMP_" + HashingHelper.HashString(newCompany.CompanyEmail);

			using var dbContext = await DbContextFactory.CreateDbContextAsync();

			dbContext.Companies.Add(newCompany);
			await dbContext.SaveChangesAsync();
			saved = true;
			error = false;
		}
		catch (Exception)
		{
			showValidationError = true;
			error = true;
			errorMessage = "Σφάλμα κατά την αποθήκευση. Παρακαλώ δοκιμάστε ξανά.";
			throw;
		}

		// Reset validation after success
		await Task.Delay(3000);
		companyNameInputClass = "";
		companyNameENGInputClass = "";
		companyTypeInputClass = "";
		companyActivityInputClass = "";
		companyTelephoneInputClass = "";
		companyWebsiteInputClass = "";
		companyCountryInputClass = "";
		companyLocationInputClass = "";
		companyPCInputClass = "";
		companyRegionsInputClass = "";
		companyTownInputClass = "";
		companyHRNameInputClass = "";
		companyHRSurnameInputClass = "";
		companyHREmailInputClass = "";
		companyHRTelephoneInputClass = "";
		companyDescriptionInputClass = "";
		companyAreasInputClass = "";
		errorMessage = "";

		// Redirect or refresh
		StateHasChanged();
		NavigationManager.NavigateTo("/", forceLoad: true);
	}




	protected override async Task OnInitializedAsync()
	{
		//filteredAreas = availableAreas;
		//filteredSkills = availableSkills;
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		using var dbContext = await DbContextFactory.CreateDbContextAsync();
		
		availableAreas = await dbContext.Areas.ToListAsync();
		await LoadAvailableSkills();
		var companyEmail = user.Identity.Name;
		var companyFromDb = await dbContext.Companies.FirstOrDefaultAsync(s => s.CompanyEmail == companyEmail);

		filteredActivities = Activity;


		if (companyFromDb != null)
		{
			newCompany = companyFromDb;
		}
		else
		{
			Console.WriteLine($"Company with email {companyEmail} not found.");
		}
		if (companyFromDb != null)
		{
			isRegistered = true;
			newCompany = companyFromDb; // Load existing data
		}
		else
		{
			isRegistered = false;
		}


		if (user.Identity.IsAuthenticated)
		{
			Console.WriteLine($"Authentication Type: {user.Identity.AuthenticationType}");

			foreach (var claim in user.Claims)
			{
				Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
			}
			foreach (var country in ExportCountries)
			{
				countrySelections[country] = false;
			}
			// Set existing selected countries to true
			if (!string.IsNullOrWhiteSpace(newCompany.CompanyExportCountries))
			{
				var selectedCountries = newCompany.CompanyExportCountries.Split(',').Select(c => c.Trim());
				foreach (var country in selectedCountries)
				{
					if (countrySelections.ContainsKey(country))
					{
						countrySelections[country] = true;
					}
				}
			}

			var roleClaim = user.FindFirst("http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

			if (roleClaim != null)
			{
				companyName = user.Identity?.Name ?? "Anonymous User";
				newCompany.CompanyEmail = companyName;
				var userRole = roleClaim.Value;
				Console.WriteLine($"User Role: {userRole}");
				Console.WriteLine($"User Email: {companyName}");

				hasReadAsCompanyPermission = userRole == "Company";
			}
			Console.WriteLine($"User Has Student Permission: {hasReadAsCompanyPermission}");
		}
		else
		{
			Console.WriteLine("User is not authenticated.");
			hasReadAsCompanyPermission = false;
		}

		if (newCompany != null) // Check if in editing mode
		{
			// Load the areas already assigned to the company (CompanyAreas)
			var existingCompanyAreas = await dbContext.Companies
				.Where(c => c.Id == newCompany.Id)
				.Select(c => c.CompanyAreas) // Get the comma-separated string
				.FirstOrDefaultAsync();

			// Split the comma-separated string into a list of areas
			var areaList = existingCompanyAreas?
				.Split(',')
				.Select(a => a.Trim()) // Trim any extra spaces
				.ToList() ?? new List<string>();

			// Initialize selectedAreasForAssessment with these areas
			selectedAreasForAssessment = areaList
				.Select(area => new SelectedArea { AreaName = area })
				.ToList();

			// Remove areas that are already selected from the availableAreas
			availableAreas = availableAreas
				.Where(a => !selectedAreasForAssessment.Any(sa => sa.AreaName == a.AreaName))
				.ToList();

			// Load the skills already assigned to the company (CompanySkills)
			var existingCompanySkills = await dbContext.Companies
				.Where(c => c.Id == newCompany.Id)
				.Select(c => c.CompanyDesiredSkills) // Get the comma-separated string
				.FirstOrDefaultAsync();

			// Split the comma-separated string into a list of skills
			var skillList = existingCompanySkills?
				.Split(',')
				.Select(s => s.Trim()) // Trim any extra spaces
				.ToList() ?? new List<string>();

			// Initialize selectedSkillsForAssessment with these skills
			selectedSkillsForAssessment = skillList
				.Select(skill => new Skill { SkillName = skill, Assessment = 1 }) // Initialize with default assessment or other data as needed
				.ToList();

			// Initialize selectedSkills
			selectedSkills = new List<string>(selectedSkillsForAssessment.Select(s => s.SkillName));

			// Remove skills that are already selected from the availableSkills
			availableSkills = availableSkills
				.Where(s => !selectedSkills.Contains(s))
				.ToList();

			if (!string.IsNullOrEmpty(newCompany.CompanyActivity))
			{
				selectedActivities = newCompany.CompanyActivity.Split(',')
					.Select(a => a.Trim())
					.Where(a => !string.IsNullOrEmpty(a))
					.ToList();
			}


		}
		filteredAreas = availableAreas;
		filteredSkills = availableSkills;


	}

	private async Task ShowFilteredStudents()
	{
		// Clear the previously filtered students
		filteredStudents.Clear();

		using var dbContext = await DbContextFactory.CreateDbContextAsync();

		if (showStudentsWithProgrammingSkills || showStudentsWithMachineLearningSkills ||
			showStudentsWithDatabaseSkills || showStudentsWithNetworkAndTelecomSkills)
		{
			// Filter students based on the combination of selected checkboxes
			filteredStudents = dbContext.Students.Where(s =>
				(showStudentsWithProgrammingSkills && s.Programming) ||
				(showStudentsWithMachineLearningSkills && s.MachineLearning) ||
				(showStudentsWithDatabaseSkills && s.Databases) ||
				(showStudentsWithNetworkAndTelecomSkills && s.NetworksAndTelecom)
			).ToList();
		}
		showResultsClicked = true;
	}

	private async Task DownloadAttachment(byte[] attachment, string studentName)
	{
		try
		{
			if (attachment != null)
			{
				var fileName = $"{studentName}_CV.pdf";
				var content = Convert.ToBase64String(attachment);

				// Download the file
				await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, attachment);

				// Preview the file
				await PreviewPdf(content);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error downloading/previewing attachment: {ex.Message}");
		}
	}

	private async Task PreviewPdf(string content)
	{
		try
		{
			// Prepare the blob URL for the PDF content
			var blobUrl = $"data:application/pdf;base64,{content}";

			// Open the blob URL in a new tab for preview
			await JSRuntime.InvokeVoidAsync("open", blobUrl, "_blank");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error previewing PDF: {ex.Message}");
		}
	}

	private void NavigateToUploadJobs()
	{
		Console.WriteLine("Navigating to uploadJobs page...");
		NavigationManager.NavigateTo("/uploadJobs");
	}

	private void ToggleProgrammingSkillsCheckbox()
	{
		showStudentsWithProgrammingSkills = !showStudentsWithProgrammingSkills;
		ShowFilteredStudents();
	}

	private void ToggleMachineLearningSkillsCheckbox()
	{
		showStudentsWithMachineLearningSkills = !showStudentsWithMachineLearningSkills;
		ShowFilteredStudents();
	}

	private void ToggleDatabaseSkillsCheckbox()
	{
		showStudentsWithDatabaseSkills = !showStudentsWithDatabaseSkills;
		ShowFilteredStudents();
	}

	private void ToggleNetworkAndTelecomSkillsCheckbox()
	{
		showStudentsWithNetworkAndTelecomSkills = !showStudentsWithNetworkAndTelecomSkills;
		ShowFilteredStudents();
	}
	private async Task KeywordSearch()
	{
		// Clear the previously filtered students
		filteredStudentsByKeyword.Clear();

		using var dbContext = await DbContextFactory.CreateDbContextAsync();

		// Check if keywordSearch is not null or empty
		if (!string.IsNullOrEmpty(keywordSearch))
		{
			// Split the keywordSearch string based on commas
			var keywords = keywordSearch.Split(',');

			// Filter students based on each keyword
			foreach (var keyword in keywords)
			{
				var keywordTrimmed = keyword.Trim().ToLower();
				if (!string.IsNullOrEmpty(keywordTrimmed))
				{
					// Filter students where the keyword exactly matches any keyword in their list
					foreach (var student in dbContext.Students)
					{
						var studentKeywords = student.Keywords.ToLower().Split(',').Select(k => k.Trim());
						if (studentKeywords.Contains(keywordTrimmed))
						{
							filteredStudentsByKeyword.Add(student);
						}
					}
				}
			}
		}

		// Remove duplicate students, if any
		filteredStudentsByKeyword = filteredStudentsByKeyword.Distinct().ToList();

		showKeywordSearch = true;
	}

	private async Task HandleFileChange(InputFileChangeEventArgs e)
	{
		try
		{
			var selectedFiles = e.GetMultipleFiles();
			var file = selectedFiles.FirstOrDefault();

			if (file != null)
			{
				// Check file type
				var allowedTypes = new[] { "image/jpeg", "image/png" };
				if (!allowedTypes.Contains(file.ContentType))
				{
					FileErrorMessage = "Λάθος τύπος αρχείου. Επιλέξτε .jpg ή .png";
					newCompany.CompanyLogo = null;
					return;
				}

				using (var memoryStream = new MemoryStream())
				{
					await file.OpenReadStream().CopyToAsync(memoryStream);
					newCompany.CompanyLogo = memoryStream.ToArray();
				}

				// Clear any previous error message
				FileErrorMessage = null;
			}
			else
			{
				newCompany.CompanyLogo = null;
				FileErrorMessage = "Παρακαλώ επιλέξτε ένα αρχείο.";
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error uploading file: {ex.Message}");
			newCompany.CompanyLogo = null;
			FileErrorMessage = "Προέκυψε ένα σφάλμα κατά την μεταφόρτωση του αρχείου.";
		}
	}






	private void HandleCompanyTaxIDNumberInput(ChangeEventArgs e)
	{
		if (long.TryParse(e.Value?.ToString(), out long result))
		{
			newCompany.CompanyTaxID = result;
			companyTaxIDNumberInput = result.ToString();
		}

	}

	private void HandleCompanyPCNumberInput(ChangeEventArgs e)
	{
		var inputValue = e.Value?.ToString();
		companyPCNumberInput = inputValue; 

		if (long.TryParse(inputValue, out long result))
		{
			newCompany.CompanyPC = result;
		}
		else
		{
			newCompany.CompanyPC = 0; 
		}
	}

	private void ShowTooltip()
	{
		showTooltip = true;
	}

	private void OnAreaChange(ChangeEventArgs e)
	{
		var selectedValue = e.Value.ToString();
		var selectedArea = availableAreas.FirstOrDefault(a => a.AreaName == selectedValue);
		if (selectedArea != null)
		{
			ToggleSubFields(selectedArea);
		}
	}

	private async Task MoveSelectedAreaToLeft()
	{
		var newlySelectedAreas = await GetSelectedAreasFromDOM("selectedAreas");

		foreach (var areaName in newlySelectedAreas)
		{
			var areaToRemove = selectedAreasForAssessment.FirstOrDefault(a => a.AreaName == areaName);
			if (areaToRemove != null)
			{
				// Remove it from selectedAreasForAssessment before adding back to availableAreas
				selectedAreasForAssessment.Remove(areaToRemove);

				// Ensure it is not already in availableAreas before adding it back
				if (!availableAreas.Any(a => a.AreaName == areaName))
				{
					availableAreas.Add(new Area { AreaName = areaToRemove.AreaName });
				}
			}
		}

		// Update the filtered areas list
		FilterAvailableAreas(new ChangeEventArgs { Value = areassearchTerm });

		StateHasChanged(); // Refresh UI
	}




	private async Task MoveSelectedAreaToRight()
	{
		// Move predefined areas to the right
		var newlySelectedAreas = await GetSelectedAreasFromDOM("availableAreas");

		foreach (var areaName in newlySelectedAreas)
		{
			var areaToRemove = availableAreas.FirstOrDefault(a => a.AreaName == areaName);
			if (areaToRemove != null)
			{
				// Remove the area from availableAreas
				availableAreas.Remove(areaToRemove);

				// Add the area to selectedAreasForAssessment if it doesn't already exist
				if (!selectedAreasForAssessment.Any(a => a.AreaName == areaName))
				{
					selectedAreasForAssessment.Add(new SelectedArea { AreaName = areaToRemove.AreaName });
				}
			}
		}

		// Add a custom area directly if it doesn't already exist
		if (!string.IsNullOrWhiteSpace(areassearchTerm) &&
			!selectedAreasForAssessment.Any(a => a.AreaName.Equals(areassearchTerm, StringComparison.OrdinalIgnoreCase)))
		{
			selectedAreasForAssessment.Add(new SelectedArea { AreaName = areassearchTerm });

			Console.WriteLine($"Custom area {areassearchTerm} added to selectedAreasForAssessment (Right List Box)");

			// Clear the search term after adding the custom area
			areassearchTerm = string.Empty;
		}

		// Update the filtered areas list to exclude selected areas
		FilterAvailableAreas(new ChangeEventArgs { Value = areassearchTerm });

		StateHasChanged(); // Update the UI
	}




	private void ToggleSubFields(Area area)
	{
		if (expandedAreas.Contains(area.AreaName))
		{
			expandedAreas.Remove(area.AreaName);
		}
		else
		{
			expandedAreas.Add(area.AreaName);
		}
		StateHasChanged();
	}

	private async Task<List<string>> GetSelectedAreasFromDOM(string selectId)
	{
		var selectedAreas = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", selectId);
		return selectedAreas;
		StateHasChanged();
	}

	public class SelectedArea
	{
		public string AreaName { get; set; }
		public int Assessment { get; set; } = 1; // Default assessment value is 1
	}

	private async Task MoveSelectedToLeft()
	{
		var newlySelectedSkills = await GetSelectedSkillsFromDOM("selectedSkills");

		foreach (var skill in newlySelectedSkills)
		{
			selectedSkills.Remove(skill);
			finalSelectedSkills.Remove(skill);

			var skillForAssessment = selectedSkillsForAssessment.FirstOrDefault(s => s.SkillName == skill);
			if (skillForAssessment != null)
			{
				selectedSkillsForAssessment.Remove(skillForAssessment);
			}

			if (!availableSkills.Contains(skill))
			{
				availableSkills.Add(skill);
				Console.WriteLine($"Skill {skill} added back to availableSkills (Left List Box)");
			}
		}

		StateHasChanged(); // Update the UI
	}

	private async Task MoveSelectedToRight()
	{
		var newlySelectedSkills = await GetSelectedSkillsFromDOM("availableSkills");

		// Move predefined skills to the right
		foreach (var skill in newlySelectedSkills)
		{
			availableSkills.Remove(skill);

			if (!selectedSkills.Contains(skill))
			{
				selectedSkills.Add(skill);
				finalSelectedSkills.Add(skill);
				selectedSkillsForAssessment.Add(new Skill { SkillName = skill, Assessment = 1 });
				Console.WriteLine($"Skill {skill} added to selectedSkills (Right List Box)");
			}
		}

		// Add custom skill directly if it doesn't already exist
		if (!string.IsNullOrWhiteSpace(skillSearchTerm) &&
			!selectedSkills.Any(s => s.Equals(skillSearchTerm, StringComparison.OrdinalIgnoreCase)))
		{
			selectedSkills.Add(skillSearchTerm);
			finalSelectedSkills.Add(skillSearchTerm);
			selectedSkillsForAssessment.Add(new Skill { SkillName = skillSearchTerm, Assessment = 1 });

			Console.WriteLine($"Custom skill {skillSearchTerm} added to selectedSkills (Right List Box)");

			// Clear the search term after adding the custom skill
			skillSearchTerm = string.Empty;
		}

		StateHasChanged(); // Update the UI
	}



	private async Task<List<string>> GetSelectedSkillsFromDOM(string selectId)
	{
		var selectedSkills = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", selectId);
		return selectedSkills;
	}

	public class Skill
	{
		public string SkillName { get; set; }
		public int Assessment { get; set; } = 1; // Default assessment value is 1
	}

	public class SelectedSkill
	{
		public string SkillName { get; set; }
		public int Assessment { get; set; } = 1; // Default assessment value is 1
	}

	private async Task LoadAvailableSkills()
	{
		try
		{
			using var dbContext = await DbContextFactory.CreateDbContextAsync();
			var skills = await dbContext.Skills.ToListAsync();
			availableSkills = skills.Select(s => s.SkillName).ToList();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading available skills: {ex.Message}");
		}
	}

	private async Task ShowInfoMessage(FocusEventArgs e)
	{
		await JSRuntime.InvokeVoidAsync("showMessage", "infoMessage", " ** Η πληροφορία αυτή δεν θα είναι ορατή στους χρήστες της πλατφόρμας");
	}

	private async Task HideInfoMessage(FocusEventArgs e)
	{
		await JSRuntime.InvokeVoidAsync("hideMessage", "infoMessage");
	}


	private void ValidateEmailHR(FocusEventArgs e)
	{
		if (string.IsNullOrEmpty(newCompany.CompanyHREmail))
		{
			emailValidationMessagehr = " ";
		}
		else if (!IsValidEmailHR(newCompany.CompanyHREmail))
		{
			emailValidationMessagehr = "Correct form: * address@domain.gr/com";
		}
		else if (IsValidEmailHR(newCompany.CompanyHREmail))
		{
			emailValidationMessagehr = "";
		}

	}
	private bool IsValidEmailHR(string email)
	{
		// Regular expression for validating email format
		var emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
		return Regex.IsMatch(email, emailPattern);
	}



	private void ValidateEmailAdmin(FocusEventArgs e)
	{
		if (string.IsNullOrEmpty(newCompany.CompanyAdminEmail))
		{
			emailValidationMessageadmin = " ";
		}
		else if (!IsValidEmailAdmin(newCompany.CompanyAdminEmail))
		{
			emailValidationMessageadmin = "Correct form: * address@domain.gr/com";
		}
		else if (IsValidEmailHR(newCompany.CompanyAdminEmail))
		{
			emailValidationMessageadmin = "";
		}
	}
	private bool IsValidEmailAdmin(string email)
	{
		// Regular expression for validating email format
		var emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
		return Regex.IsMatch(email, emailPattern);
	}

	private async Task ShowUserAgreementModal(MouseEventArgs e)
	{
		await JSRuntime.InvokeVoidAsync("showModal1", "#userAgreementModal");
	}

	private void AgreeToTerms()
	{
		// Programmatically set the checkbox value
		customCheckbox?.SetValue(true);
		agreeTerms = true;
		showMessage = false;
		StateHasChanged(); // Re-render the component to reflect changes
	}

	private void DeclineTerms()
	{
		// Programmatically unset the checkbox value
		customCheckbox?.SetValue(false);
		agreeTerms = false;
		showMessage = true;
		StateHasChanged(); // Re-render the component to reflect changes
	}

	private void ToggleCountrySelection(string country)
	{
		countrySelections[country] = !countrySelections[country];
		UpdateExportCountries();
	}

	private void UpdateExportCountries()
	{
		var selectedCountries = countrySelections
			.Where(kvp => kvp.Value)
			.Select(kvp => kvp.Key)
			.ToList();

		newCompany.CompanyExportCountries = string.Join(",", selectedCountries);
		newCompany.CompanyExportCountriesNumber = selectedCountries.Count;

	}

	private void ToggleCountriesVisibility()
	{
		showCountries = !showCountries;
	}

	private async Task UpdateCompanyRegistration()
	{
		error = false;
		showValidationError = false;

		// Reset all input classes
		companyNameInputClass = "";
		companyNameENGInputClass = "";
		companyTypeInputClass = "";
		companyActivityInputClass = "";
		companyTelephoneInputClass = "";
		companyWebsiteInputClass = "";
		companyCountryInputClass = "";
		companyLocationInputClass = "";
		companyPCInputClass = "";
		companyRegionsInputClass = "";
		companyTownInputClass = "";
		companyHRNameInputClass = "";
		companyHRSurnameInputClass = "";
		companyHREmailInputClass = "";
		companyHRTelephoneInputClass = "";
		companyDescriptionInputClass = "";
		companyAreasInputClass = "";

		// List to track missing mandatory fields
		var missingFields = new List<string>();

		// Validate ONLY mandatory fields (non-mandatory fields are excluded)
		if (string.IsNullOrEmpty(newCompany.CompanyName))
		{
			companyNameInputClass = "shake shake-input";
			missingFields.Add("Όνομα Εταιρίας(ENG)");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyNameENG))
		{
			companyNameENGInputClass = "shake shake-input";
			missingFields.Add("Όνομα Εταιρίας(GR)");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyType))
		{
			companyTypeInputClass = "shake shake-input";
			missingFields.Add("Τύπος Εταιρίας");
		}
		if (selectedActivities.Count == 0)
		{
			companyActivityInputClass = "shake shake-input";
			missingFields.Add("Δραστηριότητα Εταιρίας");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyTelephone))
		{
			companyTelephoneInputClass = "shake shake-input";
			missingFields.Add("Τηλέφωνο");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyWebsite))
		{
			companyWebsiteInputClass = "shake shake-input";
			missingFields.Add("Ιστοσελίδα");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyCountry))
		{
			companyCountryInputClass = "shake shake-input";
			missingFields.Add("Χώρα");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyLocation))
		{
			companyLocationInputClass = "shake shake-input";
			missingFields.Add("Διεύθυνση");
		}
		if (newCompany.CompanyPC <= 0) 
		{
			companyPCInputClass = "shake shake-input";
			missingFields.Add("Ταχυδρομικός Κώδικας");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyRegions))
		{
			companyRegionsInputClass = "shake shake-input";
			missingFields.Add("Περιφέρεια");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyTown))
		{
			companyTownInputClass = "shake shake-input";
			missingFields.Add("Πόλη");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHRName))
		{
			companyHRNameInputClass = "shake shake-input";
			missingFields.Add("Όνομα Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHRSurname))
		{
			companyHRSurnameInputClass = "shake shake-input";
			missingFields.Add("Επώνυμο Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHREmail))
		{
			companyHREmailInputClass = "shake shake-input";
			missingFields.Add("Email Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyHRTelephone))
		{
			companyHRTelephoneInputClass = "shake shake-input";
			missingFields.Add("Τηλέφωνο Υπευθύνου HR");
		}
		if (string.IsNullOrEmpty(newCompany.CompanyDescription))
		{
			companyDescriptionInputClass = "shake shake-input";
			missingFields.Add("Περιγραφή Εταιρίας");
		}
		if (selectedAreasForAssessment.Count() == 0)
		{
			companyAreasInputClass = "shake shake-input";
			missingFields.Add("Περιοχές Δραστηριότητας");
		}

		// Check if any mandatory field is empty
		if (missingFields.Count > 0)
		{
			error = true;
			showValidationError = true;
			errorMessage = $"Συμπληρώστε τα ακόλουθα υποχρεωτικά πεδία: {string.Join(", ", missingFields)}";
			return;
		}

		using var dbContext = await DbContextFactory.CreateDbContextAsync();
		string originalCompanyName = null;
		string companyEmail = null;

		try
		{
			if (isRegistered)
			{
				// Update existing company
				var existingCompany = await dbContext.Companies
					.FirstOrDefaultAsync(c => c.Company_UniqueID == newCompany.Company_UniqueID);

				if (existingCompany != null)
				{
					// Store original values before updating
					originalCompanyName = existingCompany.CompanyName;
					companyEmail = existingCompany.CompanyEmail;

					// Update all fields
					existingCompany.CompanyLogo = newCompany.CompanyLogo;
					existingCompany.CompanyName = newCompany.CompanyName;
					existingCompany.CompanyNameENG = newCompany.CompanyNameENG;
					existingCompany.CompanyShortName = newCompany.CompanyShortName;
					existingCompany.CompanyType = newCompany.CompanyType;
					existingCompany.CompanyActivity = newCompany.CompanyActivity;
					existingCompany.CompanyTaxID = newCompany.CompanyTaxID;
					existingCompany.CompanyTaxOffice = newCompany.CompanyTaxOffice;
					existingCompany.CompanyTelephone = newCompany.CompanyTelephone;
					existingCompany.CompanyWebsite = newCompany.CompanyWebsite;
					existingCompany.CompanyPresentationEmbeddedVideo = newCompany.CompanyPresentationEmbeddedVideo;
					existingCompany.CompanyWebsiteAnnouncements = newCompany.CompanyWebsiteAnnouncements;
					existingCompany.CompanyWebsiteJobs = newCompany.CompanyWebsiteJobs;
					existingCompany.AtlasID = newCompany.AtlasID;
					existingCompany.SvseID = newCompany.SvseID;
					existingCompany.SvseDate = newCompany.SvseDate;
					existingCompany.CompanyActivity = string.Join(",", selectedActivities);

					// Address Information
					existingCompany.CompanyCountry = newCompany.CompanyCountry;
					existingCompany.CompanyLocation = newCompany.CompanyLocation;
					existingCompany.CompanyPC = newCompany.CompanyPC;
					existingCompany.CompanyRegions = newCompany.CompanyRegions;
					existingCompany.CompanyTown = newCompany.CompanyTown;

					// Company Description and Areas/Skills
					existingCompany.CompanyDescription = newCompany.CompanyDescription;
					existingCompany.CompanyAreas = string.Join(",", selectedAreasForAssessment.Select(a => a.AreaName).Where(a => !string.IsNullOrWhiteSpace(a)));
					existingCompany.CompanyDesiredSkills = string.Join(",", selectedSkillsForAssessment.Select(s => s.SkillName).Where(s => !string.IsNullOrWhiteSpace(s)));

					// Platform Management Info
					existingCompany.CompanyCEOName = newCompany.CompanyCEOName;
					existingCompany.CompanyCEOSurname = newCompany.CompanyCEOSurname;
					existingCompany.CompanyCEOTaxID = newCompany.CompanyCEOTaxID;
					existingCompany.CompanyHRName = newCompany.CompanyHRName;
					existingCompany.CompanyHRSurname = newCompany.CompanyHRSurname;
					existingCompany.CompanyHREmail = newCompany.CompanyHREmail;
					existingCompany.CompanyHRTelephone = newCompany.CompanyHRTelephone;
					existingCompany.CompanyAdminName = newCompany.CompanyAdminName;
					existingCompany.CompanyAdminSurname = newCompany.CompanyAdminSurname;
					existingCompany.CompanyAdminEmail = newCompany.CompanyAdminEmail;
					existingCompany.CompanyAdminTelephone = newCompany.CompanyAdminTelephone;

					// Company Activity Info
					existingCompany.CompanyEmployees = newCompany.CompanyEmployees;
					existingCompany.CompanEmployeesLastUpdate = newCompany.CompanEmployeesLastUpdate;
					existingCompany.CompanyTurnover = newCompany.CompanyTurnover;
					existingCompany.CompanyTurnoverLastUpdate = newCompany.CompanyTurnoverLastUpdate;
					existingCompany.CompanyExportCountriesNumber = newCompany.CompanyExportCountriesNumber;
					existingCompany.CompanyExportCountries = newCompany.CompanyExportCountries;
					existingCompany.CompanyExportCountriesLastUpdate = newCompany.CompanyExportCountriesLastUpdate;
					existingCompany.CompanyVisibleActivity = newCompany.CompanyVisibleActivity;

					dbContext.Companies.Update(existingCompany);
				}
			}
			else
			{
				// Register new company
				newCompany.CompanyLogo = newCompany.CompanyLogo;
				newCompany.CompanyName = newCompany.CompanyName;
				newCompany.CompanyNameENG = newCompany.CompanyNameENG;
				newCompany.CompanyShortName = newCompany.CompanyShortName;
				newCompany.CompanyType = newCompany.CompanyType;
				newCompany.CompanyActivity = newCompany.CompanyActivity;
				newCompany.CompanyTaxID = newCompany.CompanyTaxID;
				newCompany.CompanyTaxOffice = newCompany.CompanyTaxOffice;
				newCompany.CompanyTelephone = newCompany.CompanyTelephone;
				newCompany.CompanyWebsite = newCompany.CompanyWebsite;
				newCompany.CompanyPresentationEmbeddedVideo = newCompany.CompanyPresentationEmbeddedVideo;
				newCompany.CompanyWebsiteAnnouncements = newCompany.CompanyWebsiteAnnouncements;
				newCompany.CompanyWebsiteJobs = newCompany.CompanyWebsiteJobs;
				newCompany.AtlasID = newCompany.AtlasID;
				newCompany.SvseID = newCompany.SvseID;
				newCompany.SvseDate = newCompany.SvseDate;
				newCompany.CompanyActivity = string.Join(",", selectedActivities);

				// Address Information
				newCompany.CompanyCountry = newCompany.CompanyCountry;
				newCompany.CompanyLocation = newCompany.CompanyLocation;
				newCompany.CompanyPC = newCompany.CompanyPC;
				newCompany.CompanyRegions = newCompany.CompanyRegions;
				newCompany.CompanyTown = newCompany.CompanyTown;

				// Company Description and Areas/Skills
				newCompany.CompanyDescription = newCompany.CompanyDescription;
				newCompany.CompanyAreas = string.Join(",", selectedAreasForAssessment.Select(a => a.AreaName).Where(a => !string.IsNullOrWhiteSpace(a)));
				newCompany.CompanyDesiredSkills = string.Join(",", selectedSkillsForAssessment.Select(s => s.SkillName).Where(s => !string.IsNullOrWhiteSpace(s)));

				// Platform Management Info
				newCompany.CompanyCEOName = newCompany.CompanyCEOName;
				newCompany.CompanyCEOSurname = newCompany.CompanyCEOSurname;
				newCompany.CompanyCEOTaxID = newCompany.CompanyCEOTaxID;
				newCompany.CompanyHRName = newCompany.CompanyHRName;
				newCompany.CompanyHRSurname = newCompany.CompanyHRSurname;
				newCompany.CompanyHREmail = newCompany.CompanyHREmail;
				newCompany.CompanyHRTelephone = newCompany.CompanyHRTelephone;
				newCompany.CompanyAdminName = newCompany.CompanyAdminName;
				newCompany.CompanyAdminSurname = newCompany.CompanyAdminSurname;
				newCompany.CompanyAdminEmail = newCompany.CompanyAdminEmail;
				newCompany.CompanyAdminTelephone = newCompany.CompanyAdminTelephone;

				// Company Activity Info
				newCompany.CompanyEmployees = newCompany.CompanyEmployees;
				newCompany.CompanEmployeesLastUpdate = newCompany.CompanEmployeesLastUpdate;
				newCompany.CompanyTurnover = newCompany.CompanyTurnover;
				newCompany.CompanyTurnoverLastUpdate = newCompany.CompanyTurnoverLastUpdate;
				newCompany.CompanyExportCountriesNumber = newCompany.CompanyExportCountriesNumber;
				newCompany.CompanyExportCountries = newCompany.CompanyExportCountries;
				newCompany.CompanyExportCountriesLastUpdate = newCompany.CompanyExportCountriesLastUpdate;
				newCompany.CompanyVisibleActivity = newCompany.CompanyVisibleActivity;

				dbContext.Companies.Add(newCompany);
			}

			// Save all changes to the company first
			await dbContext.SaveChangesAsync();
			updated = true;

			// If this was an update and the company name changed, update all related jobs/thesis/internships/events
			if (isRegistered && originalCompanyName != newCompany.CompanyName && !string.IsNullOrEmpty(companyEmail))
			{
				await UpdateAllJobsForCompany(dbContext, companyEmail, newCompany.CompanyName);
				await UpdateAllThesesForCompany(dbContext, companyEmail, newCompany.CompanyName);
				await UpdateAllInternshipsForCompany(dbContext, companyEmail, newCompany.CompanyName);
				await UpdateAllEventsForCompany(dbContext, companyEmail, newCompany.CompanyName);
			}
			Console.WriteLine($"Updating jobs for {companyEmail} from {originalCompanyName} to {newCompany.CompanyName}");
		}
		catch (Exception ex)
		{
			error = true;
			showValidationError = true;
			errorMessage = "Σφάλμα κατά την ενημέρωση. Παρακαλώ δοκιμάστε ξανά.";
			Console.Error.WriteLine(ex);
			return;
		}

		// Reset validation after success
		await Task.Delay(3000);
		companyNameInputClass = "";
		companyNameENGInputClass = "";
		companyTypeInputClass = "";
		companyActivityInputClass = "";
		companyTelephoneInputClass = "";
		companyWebsiteInputClass = "";
		companyCountryInputClass = "";
		companyLocationInputClass = "";
		companyPCInputClass = "";
		companyRegionsInputClass = "";
		companyTownInputClass = "";
		companyHRNameInputClass = "";
		companyHRSurnameInputClass = "";
		companyHREmailInputClass = "";
		companyHRTelephoneInputClass = "";
		companyDescriptionInputClass = "";
		companyAreasInputClass = "";
		errorMessage = "";

		// Redirect or perform other actions
		StateHasChanged();
		NavigationManager.NavigateTo("/", forceLoad: true);
	}

	private async Task UpdateAllJobsForCompany(AppDbContext dbContext, string companyEmail, string newCompanyName)
	{
		// First get the company entity
		var company = await dbContext.Companies
			.FirstOrDefaultAsync(c => c.CompanyEmail == companyEmail);

		if (company == null)
		{
			// Handle case where company doesn't exist
			return;
		}

		// Update the company name
		company.CompanyName = newCompanyName;

		// Get all jobs for this company to update tracking fields
		var companyJobs = await dbContext.CompanyJobs
			.Where(j => j.EmailUsedToUploadJobs == companyEmail)
			.ToListAsync();

		// Update tracking fields for each job
		foreach (var job in companyJobs)
		{
			job.TimesUpdated++;
			job.UpdateDateTime = DateTime.Now;
		}

		// Save all changes (both company name and job updates)
		await dbContext.SaveChangesAsync();
	}

	private async Task UpdateAllThesesForCompany(AppDbContext dbContext, string companyEmail, string newCompanyName)
	{
		// No need to update thesis records directly since company name comes from Company table
		// Just update the times updated and update datetime
    
		var theses = await dbContext.CompanyTheses
			.Where(t => t.CompanyEmailUsedToUploadThesis == companyEmail)
			.ToListAsync();

		foreach (var thesis in theses)
		{
			thesis.CompanyThesisTimesUpdated++;
			thesis.CompanyThesisUpdateDateTime = DateTime.Now;
		}

		await dbContext.SaveChangesAsync();
	}

	private async Task UpdateAllInternshipsForCompany(AppDbContext dbContext, string companyEmail, string newCompanyName)
	{
		// Include the Company navigation property to ensure we can access it
		var internships = await dbContext.CompanyInternships
			.Include(i => i.Company)  // Important: Include the Company navigation property
			.Where(i => i.CompanyEmailUsedToUploadInternship == companyEmail)
			.ToListAsync();

		foreach (var internship in internships)
		{
			if (internship.Company != null)
			{
				internship.Company.CompanyName = newCompanyName;  // Update the Company's name
			}
			internship.CompanyInternshipLastUpdate = DateTime.Now;
		}

		await dbContext.SaveChangesAsync();
	}

	private async Task UpdateAllEventsForCompany(AppDbContext dbContext, string companyEmail, string newCompanyName)
	{
		var events = await dbContext.CompanyEvents
			.Include(e => e.Company)  // Include the Company navigation property
			.Where(e => e.CompanyEmailUsedToUploadEvent == companyEmail)
			.ToListAsync();

		foreach (var eventItem in events)
		{
			// Update the company name through the navigation property
			if (eventItem.Company != null)
			{
				eventItem.Company.CompanyName = newCompanyName;
			}
		}

		await dbContext.SaveChangesAsync();
	}


	private async Task AgreeToTermsAsync()
	{
		try
		{
			Logger.LogInformation("Agree button clicked.");
			customCheckbox?.SetValue(true);
			agreeTerms = true;
			await Task.Delay(10); // Optional: to simulate asynchronous delay
			StateHasChanged();
			Logger.LogInformation("Agree operation completed.");
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Error during AgreeToTermsAsync");
		}
	}

	private async Task DeclineTermsAsync()
	{
		try
		{
			Logger.LogInformation("Decline button clicked.");
			customCheckbox?.SetValue(false);
			agreeTerms = false;
			await Task.Delay(10); // Optional: to simulate asynchronous delay
			StateHasChanged();
			Logger.LogInformation("Decline operation completed.");
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Error during DeclineTermsAsync");
		}
	}

	private void FilterAvailableAreas(ChangeEventArgs e)
	{
		areassearchTerm = e.Value.ToString();

		// Filter the available areas based on the search term and exclude selected areas
		filteredAreas = availableAreas
			.Where(a => a.AreaName.Contains(areassearchTerm, StringComparison.OrdinalIgnoreCase) &&
						!selectedAreasForAssessment.Any(sa => sa.AreaName == a.AreaName))
			.ToList();

		StateHasChanged(); // Refresh UI
	}



	void FilterAvailableSkills(ChangeEventArgs e)
	{
		skillSearchTerm = e.Value.ToString();

		// Filter the available skills based on the search term
		filteredSkills = availableSkills
			.Where(s => s.Contains(skillSearchTerm, StringComparison.OrdinalIgnoreCase))
			.ToList();

		StateHasChanged();
	}



	private void OnAreaSelect(ChangeEventArgs e)
	{
		var selectedArea = e.Value.ToString();

		// If the area is selected, add it to the expanded areas
		if (expandedAreas.Contains(selectedArea))
		{
			expandedAreas.Remove(selectedArea); // Collapse the area
		}
		else
		{
			expandedAreas.Add(selectedArea); // Expand the area
		}

		// Re-trigger the UI to reflect changes
		StateHasChanged(); // Notify the UI to refresh
	}

	// Method to toggle the expansion of the selected area
	private void ToggleExpansion(string areaName)
	{
		if (expandedAreas.Contains(areaName))
		{
			expandedAreas.Remove(areaName); // Collapse the area
		}
		else
		{
			expandedAreas.Add(areaName); // Expand the area
		}

		StateHasChanged(); // Refresh UI
	}

	private string GetValidationClassForEmptyAreasWhenSaveCompanyRegistration(int areasCount)
	{
		return areasCount == 0 && showValidationError ? "shake error" : "";
	}

	private string GetYoutubeEmbedUrl(string url)
	{
		if (string.IsNullOrEmpty(url))
			return string.Empty;

		var match = Regex.Match(url, @"(youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})");
		if (match.Success)
		{
			string videoId = match.Groups[2].Value;
			return $"https://www.youtube.com/embed/{videoId}";
		}

		return string.Empty;
	}

	private void ShowMessage()
	{
		if (!agreeTerms)
		{
			showMessage = true;
		}
		else
		{
			showMessage = false;
		}
	}

	private void FilterActivities()
	{
		if (string.IsNullOrEmpty(activitySearchTerm))
		{
			filteredActivities = Activity;
		}
		else
		{
			filteredActivities = Activity
				.Where(a => a.Contains(activitySearchTerm, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}
    
		StateHasChanged(); // Ensure UI updates
	}

	// Toggle activity selection
	private void ToggleActivity(string activity)
	{
		if (selectedActivities.Contains(activity))
		{
			selectedActivities.Remove(activity);
		}
		else
		{
			selectedActivities.Add(activity);
		}

		// Update the bound property
		newCompany.CompanyActivity = string.Join(",", selectedActivities);
		StateHasChanged();
	}

	private void RemoveActivity(string activity)
	{
		selectedActivities.Remove(activity);
		newCompany.CompanyActivity = string.Join(",", selectedActivities);
		StateHasChanged();
	}


	private void ToggleActivityDropdown()
	{
		showActivityDropdown = !showActivityDropdown;
		if (showActivityDropdown)
		{
			activitySearchTerm = string.Empty;
			FilterActivities();
		}
	}

	private void SelectAllActivities()
	{
		selectedActivities = new List<string>(Activity);
		newCompany.CompanyActivity = string.Join(",", selectedActivities);
		StateHasChanged();
	}

	private void ClearAllActivities()
	{
		selectedActivities.Clear();
		newCompany.CompanyActivity = string.Empty;
		StateHasChanged();
	}

	private void HandleSearchInput(ChangeEventArgs e)
	{
		activitySearchTerm = e.Value?.ToString() ?? string.Empty;
		FilterActivities();
	}

}
