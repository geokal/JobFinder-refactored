@page "/searchjobs"
@using Microsoft.EntityFrameworkCore
@using QuizManager.Models
@inject Data.AppDbContext dbContext
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using System.Net.Http
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using QuizManager.Data
@inject IJSRuntime JS // Inject IJSRuntime for JSInterop

<style>
    h3 {
        font-size: 24px;
        color: #FF5733;
    }

    .position-description {
        max-width: 800px; /* Adjust the width as needed */
        word-wrap: break-word;
    }

    .apply-button {
        padding: 8px 16px;
        font-size: 14px;
        color: white;
        background-color: #007bff; /* Blue color */
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .apply-button:hover {
            background-color: #0056b3; /* Darker blue color on hover */
        }

    /* Added styles for the table */
    .table-container {
        margin-top: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 8px;
            border: 1px solid #dee2e6;
            text-align: left;
        }

        .table th {
            background-color: #f8f9fa; /* Light gray background */
            color: #333; /* Dark gray text color */
        }

        .table tbody tr:nth-child(even) {
            background-color: #f2f2f2; /* Alternate row background color */
        }

        .table tbody tr:hover {
            background-color: #e9ecef; /* Hover row background color */
        }

    .filter-button1 {
        margin-right: 10px;
        padding: 8px 16px;
        font-size: 14px;
        color: white;
        background-color: #CC6600; /* Custom color */
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .filter-button2 {
        margin-right: 10px;
        padding: 8px 16px;
        font-size: 14px;
        color: white;
        background-color: #999900; /* Custom color */
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .filter-button3 {
        margin-right: 10px;
        padding: 8px 16px;
        font-size: 14px;
        color: white;
        background-color: #666600; /* Custom color */
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .filter-button:hover {
        background-color: #218838; /* Darker color on hover */
    }

    .filter-button.active {
        background-color: #218838; /* Active state color */
    }
</style>

<h3><strong>Εύρεση Θέσης Εργασίας</strong></h3>
<br />
<div>
    <button class="filter-button1 @(selectedFilter == "Full-Time" ? "active" : "")" @onclick='() => FilterPositions("Full-Time")'>Full-Time</button>
    <button class="filter-button2 @(selectedFilter == "Part-Time" ? "active" : "")" @onclick='() => FilterPositions("Part-Time")'>Part-Time</button>
    <button class="filter-button3 @(selectedFilter == "Internship" ? "active" : "")" @onclick='() => FilterPositions("Internship")'>Internship</button>
</div>

<div class="table-container">
    @if (filteredPositions != null && filteredPositions.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Position Title</th>
                    <th>Company Name</th>
                    <th>Date Uploaded</th>
                    <th>Attachment</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (position, index) in filteredPositions.Select((pos, index) => (pos, index)))
                {
                    <tr>
                        <td>@(index + 1)</td>
                        <td>
                            <button class="btn btn-link" @onclick="() => TogglePositionDetails(position)">
                                @if (positionDetails.ContainsKey(position.JobId) && positionDetails[position.JobId])
                                {
                                    <i class="fas fa-minus"></i>
                                }
                                else
                                {
                                    <i class="fas fa-plus"></i>
                                }
                                @position.PositionTitle
                            </button>
                        </td>
                        <td>@position.CompanyName</td>
                        <td>@position.UploadDateTime.ToString("dd/MM/yyyy")</td>
                        <td>
                            @if (position.PositionAttachment != null)
                            {
                                <button class="apply-button" @onclick="() => DownloadAttachment(position.PositionAttachment, position.PositionTitle)">Download</button>
                            }
                        </td>
                        @*
                        <td>
                            <button class="apply-button" @onclick="() => ApplyForPosition(position)">Apply</button>
                        </td>
                *@
                    </tr>
                    @if (positionDetails.ContainsKey(position.JobId) && positionDetails[position.JobId])
                    {
                        <tr>
                            <td></td>
                            <td colspan="5">
                                <table class="inner-table">
                                    <tr>
                                        <th>Position Type</th>
                                        <td>@position.PositionType</td>
                                    </tr>
                                    <tr>
                                        <th>Position Description</th>
                                        <td colspan="3" class="position-description">@position.PositionDescription</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No positions available.</p>
    }
</div>


@inject IJSRuntime JSRuntime
@code {
    private List<JobWithCompany> positions;
    private List<JobWithCompany> filteredPositions;
    private Dictionary<int, bool> positionDetails = new Dictionary<int, bool>();
    private string selectedFilter = "Full-Time";

    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
        FilterPositions(selectedFilter); // Default to Full-Time on load
    }

    private async Task LoadPositions()
    {
        try
        {
            var jobs = await dbContext.CompanyJobs.ToListAsync();
            var companies = await dbContext.Companies.ToListAsync();

            positions = (from job in jobs
                         join company in companies on job.EmailUsedToUploadJobs equals company.CompanyEmail
                         select new JobWithCompany
                             {
                                 JobId = job.Id,
                                 PositionTitle = job.PositionTitle,
                                 PositionType = job.PositionType,
                                 PositionDescription = job.PositionDescription,
                                 UploadDateTime = job.UploadDateTime,
                                 CompanyName = company.CompanyNameENG,
                                 CompanyEmail = company.CompanyEmail,
                                 PositionAttachment = job.PositionAttachment,
                                 RNGForPositionUploaded = job.RNGForPositionUploaded

                             }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading positions: {ex.Message}");
        }
    }

    private void FilterPositions(string positionType)
    {
        selectedFilter = positionType;
        filteredPositions = positions.Where(p => p.PositionType == positionType).ToList();
    }

    private void TogglePositionDetails(JobWithCompany position)
    {
        if (positionDetails.ContainsKey(position.JobId))
        {
            positionDetails[position.JobId] = !positionDetails[position.JobId];
        }
        else
        {
            positionDetails[position.JobId] = true; // Default to true if not found
        }
    }

    @*
    private async void ApplyForPosition(JobWithCompany position)
    {
        Console.WriteLine($"Applying for position: {position.PositionTitle}");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var student = await GetStudentDetails(user.Identity.Name);

            // Check if the student has already applied for this position with the same RNGForPositionUploaded
            var existingApplication = await dbContext.CompanyJobsApplied
                .FirstOrDefaultAsync(app =>
                    app.StudentRegNumberApplied == student.RegNumber &&
                    app.RNGForPositionApplied == position.RNGForPositionUploaded);

            if (existingApplication != null)
            {
                // Handle case where student has already applied for this position
                await JSRuntime.InvokeVoidAsync("alert", $"You have already applied for position {position.PositionTitle} with Unique Number {position.RNGForPositionUploaded} . You cannot apply again.");
                return;
            }

            // Continue with application since there is no existing application for this student and position
            var jobApplication = new CompanyJobApplied
                {
                    RNGForPositionApplied = position.RNGForPositionUploaded,
                    DateTimeStudentAppliedForPosition = DateTime.UtcNow,
                    StudentNameApplied = student.Name,
                    StudentEmailApplied = student.Email,
                    StudentSurnameApplied = student.Surname,
                    StudentRegNumberApplied = student.RegNumber,
                    StudentCVApplied = student.Attachment,
                    StudentImageApplied = student.Image,
                    CompanyAppliedForPosition = position.CompanyName,
                    CompanyEmailAppliedForPosition = position.CompanyEmail,
                    PositionTitleAppliedAtTheCompany = position.PositionTitle,
                    PositionInCompanyApplied = position.PositionTitle,
                    CompanyPositionTypeApplied = position.PositionType,
                };

            dbContext.CompanyJobsApplied.Add(jobApplication);
            await dbContext.SaveChangesAsync();

            // Display JavaScript alert after successful application
            await JSRuntime.InvokeVoidAsync("alert", $"You have successfully applied for position {position.PositionTitle}. Go to Profile/Show My Applications to view your application details!");
        }
    }
    *@




    // Example method to get student details (this should be implemented based on your logic)
    private async Task<Student> GetStudentDetails(string email)
    {
        return await dbContext.Students.FirstOrDefaultAsync(s => s.Email == email);
    }


    private async Task DownloadAttachment(byte[] attachmentContent, string fileName)
    {
        try
        {
            var base64Content = Convert.ToBase64String(attachmentContent);
            await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading attachment: {ex.Message}");
        }
    }
}
