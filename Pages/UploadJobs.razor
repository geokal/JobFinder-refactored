@page "/uploadjobs"
@using Microsoft.EntityFrameworkCore
@using QuizManager.Models
@inject Data.AppDbContext dbContext
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using System.Net.Http
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using QuizManager.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities


<style>
    h3 {
        font-size: 24px;
        color: #FF5733;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .form-control-textarea {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        height: 150px;
    }

    button {
        padding: 10px 20px;
        font-size: 16px;
        color: #fff;
        background-color: #FF5733;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #e14e2b;
        }

    .error-message {
        background-color: palevioletred;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .good-message {
        background-color: green;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .textarea-container {
        position: relative;
        display: inline-block;
        width: 100%;
    }

        .textarea-container textarea {
            width: 100%;
            height: 150px; /* Adjust as needed */
            padding-right: 50px; /* Ensure space for the counter */
            box-sizing: border-box;
        }

    .char-counter {
        position: absolute;
        bottom: 8px;
        right: 10px;
        background: rgba(255, 255, 255, 0.8);
        padding: 2px 5px;
        border-radius: 3px;
        font-size: 0.8em;
        color: #666;
    }

    .update-btn {
        background-color: steelblue;
        color: white;
        margin-left: 10px;
    }
</style>

<h3>Θέση Εργασίας</h3>
<br />

@if (showSuccessMessage)
{
    <div class="good-message">
        Η θέση εργασίας υποβλήθηκε με επιτυχία!
    </div>
}
@if (showErrorMessage)
{
    <div class="error-message">
        Παρουσιάστηκε σφάλμα κατά την υποβολή της θέσης εργασίας. Παρακαλώ προσπαθήστε ξανά.
    </div>
}
@if (showSuccessUpdateMessage)
{
    <div class="good-message">
        Η Ανανέωση της Θέσης Εργασίας υποβλήθηκε με επιτυχία!
    </div>
}

<EditForm Model="@job" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="positionType">Position Type:</label>
        <InputSelect id="positionType" class="form-control" @bind-Value="job.PositionType">
            <option value="">-- Επιλέξτε Τύπο Εργασίας --</option>
            <option value="Full-Time">Πλήρης Απασχόλησης</option>
            <option value="Part-Time">Μερικής Απασχόλησης</option>
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="positionTitle">Position Title:</label>
        <InputText id="positionTitle" class="form-control" @bind-Value="job.PositionTitle" />
    </div>

    <div class="form-group">
        <label for="positionDescription">Position Description:</label>
        <InputTextAreaWithMaxLength @bind-Value="job.PositionDescription" />
    </div>

    <div class="form-group">
        <label for="positionAttachment">Position Attachment:</label>
        <InputFile id="positionAttachment" class="form-control" OnChange="HandleFileSelected" />
    </div>

    <button type="submit">Submit</button>
    @if (isEditing)
    {
        <button type="button" class="update-btn" @onclick="UpdateJob">Update</button>
    }
</EditForm>

@code {
    private CompanyJob job = new CompanyJob();
    private IBrowserFile? uploadedFile;
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    private bool showSuccessUpdateMessage = false;
    private bool isEditing = false;
    private string? companyName;
    private string? companyEmail;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userEmail = user.FindFirst("name")?.Value;

        if (!string.IsNullOrEmpty(userEmail))
        {
            var company = await dbContext.Companies.FirstOrDefaultAsync(c => c.CompanyEmail == userEmail);
            if (company != null)
            {
                companyName = company.CompanyName;
            }
        }

        var uri = new Uri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);
        if (queryParameters.TryGetValue("positionId", out var positionId))
        {
            if (int.TryParse(positionId, out var jobId))
            {
                var jobToEdit = await dbContext.CompanyJobs.FindAsync(jobId);
                if (jobToEdit != null)
                {
                    job = jobToEdit;
                }
                else
                {
                    Console.WriteLine($"Job position with ID {jobId} not found.");
                }
            }
            else
            {
                Console.WriteLine($"Invalid positionId provided: {positionId}");
            }
        }

        if (queryParameters.TryGetValue("isEditing", out var editingFlag))
        {
            if (bool.TryParse(editingFlag, out var isEditingValue))
            {
                isEditing = isEditingValue;
            }
            else
            {
                Console.WriteLine($"Invalid isEditing flag provided: {editingFlag}");
            }
        }

        if (!isEditing)
        {
            job.TimesUpdated = 0;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        var buffer = new byte[uploadedFile.Size];
        await uploadedFile.OpenReadStream().ReadAsync(buffer);
        job.PositionAttachment = buffer;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userEmail = user.FindFirst("name")?.Value;

            // Get the company entity first
            var company = await dbContext.Companies
                .FirstOrDefaultAsync(c => c.CompanyEmail == userEmail);

            if (company == null)
            {
                // Handle case where company doesn't exist
                showSuccessMessage = false;
                showErrorMessage = true;
                return;
            }

            // Set job properties
            job.RNGForPositionUploaded = new Random().NextInt64();
            job.EmailUsedToUploadJobs = userEmail;
            job.UploadDateTime = DateTime.Now;

            // Associate the job with the company
            job.Company = company;

            dbContext.CompanyJobs.Add(job);
            await dbContext.SaveChangesAsync();

            showSuccessMessage = true;
            showErrorMessage = false;
        }
        catch (Exception ex)  // Consider logging the exception
        {
            showSuccessMessage = false;
            showErrorMessage = true;
        }
    }

    private void OnPositionDescriptionChanged(string newValue)
    {
        job.PositionDescription = newValue;
        Console.WriteLine($"PositionDescription updated to: {job.PositionDescription}");
    }

    private async Task UpdateJob()
    {
        try
        {
            dbContext.CompanyJobs.Update(job);
            job.TimesUpdated++;
            job.UpdateDateTime = DateTime.Now;
            await dbContext.SaveChangesAsync();

            showSuccessUpdateMessage = true;
            showErrorMessage = false;
        }
        catch (Exception)
        {
            showSuccessMessage = false;
            showErrorMessage = true;
            showSuccessUpdateMessage = false;
        }
    }
}
