@page "/researchGroupRegistration"

@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using QuizManager.Data
@using QuizManager.Models
@using System.IO
@using System.Reflection.Metadata
@using static System.Net.FileWebRequest
@using System.Security.Claims
@using System.Linq
@using System.Runtime.InteropServices
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Globalization
@inject ILogger<QuizViewer> Logger
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Data.AppDbContext dbContext


<style>
    /* Message styles */
    .good-message {
        background-color: green;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        width: 100%;
        box-sizing: border-box;
    }

    .error-message {
        background-color: palevioletred;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        width: 100%;
        box-sizing: border-box;
    }

    /* Button styles - original sizes */
    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        outline: none;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 5px;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .btn-submit {
        background-color: #28a745;
    }

        .btn-submit:hover {
            background-color: #218838;
        }

    .btn-submit1 {
        background-color: #0056b3;
    }

    .btn-upload {
        background-color: burlywood;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-upload:hover {
            background-color: #45a049;
        }

    /* Form structure - ultra-wide */
    .form-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin: 20px auto;
        width: 98%;
        max-width: 2400px; /* Extreme width */
        padding: 0 10px;
        box-sizing: border-box;
    }

    .grouped-section {
        background-color: #d0eaff;
        padding: 20px;
        border-radius: 8px;
        border: 2px solid black;
        width: 100%;
        min-width: 600px; /* Very wide columns */
        box-sizing: border-box;
    }

    /* Form groups - original sizing */
    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
        width: 100%;
    }

    /* Typography */
    body {
        background-color: #f0f0f0;
        color: #000000;
    }

    h3 {
        font-size: 24px;
        color: #FF5733;
    }

    h4 {
        font-size: 24px;
        color: darkblue;
    }

    /* Input styles */
    .readonly-input {
        background-color: #888888;
        color: navajowhite;
        font-weight: bold;
        width: 100%;
        max-width: 550px; /* Wider inputs */
    }

    .select-with-arrow {
        position: relative;
        width: 100%;
        max-width: 550px; /* Matches other inputs */
    }

        .select-with-arrow select {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: white;
            background-image: url('data:image/svg+xml;utf8,<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 8l3-3 3 3h0" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>');
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 20px 20px;
        }

    /* Tooltip styles */
    .tooltip-container {
        position: relative;
    }

    .tooltip-text {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 10px;
        z-index: 1;
        width: 200px;
        top: calc(100% + 5px);
        left: 0;
    }

    .tooltip-container.show-tooltip .tooltip-text {
        display: block;
    }

    /* Button containers */
    .button-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin-top: 10px;
    }

        .button-container button {
            padding: 10px 20px;
            font-size: 16px;
            color: white;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-bottom: 5px;
        }

            .button-container button:hover {
                background-color: #0056b3;
            }

    /* Form check elements */
    .form-check .form-check-input:disabled ~ .form-check-label {
        color: #000;
        opacity: 1;
    }

    /* Animations */
    @@keyframes blink {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    .blinking {
        animation: blink 1s infinite;
        color: black;
        font-size: 2em;
        text-align: left;
    }

    /* Input with hint */
    .input-with-hint {
        position: relative;
        width: 100%;
        max-width: 550px;
    }

        .input-with-hint .hint {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #495057;
        }

        .input-with-hint input {
            padding-right: 30px;
            width: 100%;
        }

    /* Telephone input group */
    .input-group-textfortelephone {
        background-color: #e9ecef;
        border: 1px solid #ced4da;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        line-height: 1.5;
        display: flex;
        align-items: center;
    }

    /* Validation animations */
    .shake {
        animation: shake 0.5s;
    }

    @@keyframes shake {
        0% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        50% {
            transform: translateX(5px);
        }

        75% {
            transform: translateX(-5px);
        }

        100% {
            transform: translateX(0);
        }
    }

    .is-invalid {
        border: 1px solid red;
    }

    /* Responsive behavior */
    @@media (min-width: 1280px) {
        .form-container {
            flex-direction: row;
            flex-wrap: wrap;
        }

        .grouped-section {
            flex: 1 1 calc(50% - 20px);
            min-width: 600px;
        }
    }

    @@media (min-width: 1920px) {
        .form-container {
            flex-wrap: nowrap;
        }

        .grouped-section {
            flex: 1 1 calc(33.33% - 20px);
            min-width: 600px;
        }
    }

    @@media (max-width: 1279px) {
        .form-container {
            flex-direction: column;
        }

        .grouped-section {
            width: 100%;
            min-width: 100%;
        }
    }

    .professor-suggestions {
        top: 100%;
        left: 0;
        margin-top: 0.2rem;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

        .professor-suggestions li {
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .professor-suggestions li:hover {
                background-color: #f8f9fa;
            }

            .pagination {
                    margin-top: 1rem;
                }

                .page-item.active .page-link {
                    background-color: #0d6efd;
                    border-color: #0d6efd;
                }

                .page-link {
                    color: #0d6efd;
                }

                .page-link:hover {
                    color: #0a58ca;
                }

            .alert-fade {
                transition: opacity 0.5s ease-out;
            }
            .alert-fade.hide {
                opacity: 0;
            }

            .small-label {
                font-size: 0.80em; 
}

    /* Validation animations */
    .shake {
        animation: shake 0.5s;
        border: 2px solid red !important;
    }

    @@keyframes shake {
        0% {
            transform: translateX(0);
        }

        20% {
            transform: translateX(-10px);
        }

        40% {
            transform: translateX(10px);
        }

        60% {
            transform: translateX(-10px);
        }

        80% {
            transform: translateX(10px);
        }

        100% {
            transform: translateX(0);
        }
    }

    .shake-input {
        background-color: #fff0f0 !important;
    }

    .is-invalid {
        border: 1px solid red;
    }

</style>



<div class="gray-background">
    @if (hasReadAsResearchGroupPermission)
    {
        <h3 style="color: #000000;"><strong>★ Πληροφορίες Ερευνητικής Ομάδας ★</strong></h3>
        <EditForm Model="@newResearchGroup" OnValidSubmit="SubmitResearchGroupForm">
            <div class="form-container">
                <div class="grouped-section">
                    <h4>1) Βασικές Πληροφορίες</h4>

                            <div class="form-group">
                                <label>Email</label>
                                <InputText @bind-Value="newResearchGroup.ResearchGroupEmail" readonly class="readonly-input" />
                            </div>

                            <div class="form-group">
                                <label><strong>Μοναδικό ID Ερευνητικής Ομάδας</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-key"></i></span>
                                    <InputText @bind-Value="newResearchGroup.ResearchGroup_UniqueID"
                                               readonly
                                               class="readonly-input form-control"
                                               style="color: blue;"
                                               placeholder="Δημιουργείται αυτόματα μετά την πρώτη σας Εγγραφή" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label><strong>Λογότυπο</strong></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-image"></i></span>
                                    <InputFile OnChange="HandleFileChange" accept="image/jpeg, image/png" class="form-control" />
                                </div>
                                @if (!string.IsNullOrEmpty(FileErrorMessage))
                                {
                                    <div class="text-danger mt-2">@FileErrorMessage</div>
                                }
                            </div>

                            <div class="form-group">
                        <label><strong>Όνομα Ερευνητικής Ομάδας</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    <InputText @bind-Value="newResearchGroup.ResearchGroupName"
                                               class="@($"{researchGroupNameInputClass} form-control")" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label><strong>Ακρωνύμιο Ερευνητικής Ομάδας</strong></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-signature"></i></span>
                                    <InputText @bind-Value="newResearchGroup.ResearchGroupAcronym" class="form-control"
                                               placeholder="Π.χ. ABC, DEF, ... κτλ" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label><strong>Ημερομηνία Ίδρυσης Ερευνητικής Ομάδας</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <div class="input-group @researchGroupDateInputClass">
                                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                    <InputDate @bind-Value="newResearchGroup.ResearchGroup_DateOfCreation"
                                               class="form-control" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label><strong>Πανεπιστήμιο</strong></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-university"></i></span>
                                    <InputText @bind-Value="newResearchGroup.ResearchGroupUniversity" readonly class="form-control readonly-input" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label><strong>Σχολή</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-school"></i></span>
                                    <select value="@newResearchGroup.ResearchGroupSchool"
                                            @onchange="OnSchoolChange"
                                            class="@($"{researchGroupSchoolInputClass} form-control")">
                                        <option value="">-- Επιλογή Σχολής --</option>
                                        @foreach (var school in schools)
                                        {
                                            <option value="@school">@school</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="form-group">
                                <label><strong>Τμήμα</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <select value="@newResearchGroup.ResearchGroupUniversityDepartment"
                                        @onchange="OnDepartmentChange"
                                        class="@($"{researchGroupDepartmentInputClass} select-with-arrow")"
                                        disabled="@(string.IsNullOrEmpty(newResearchGroup.ResearchGroupSchool))">
                                    <option value="">-- Επιλογή Τμήματος --</option>
                                    @if (!string.IsNullOrEmpty(newResearchGroup.ResearchGroupSchool))
                                    {
                                        @foreach (var department in departments)
                                        {
                                            <option value="@department">@department</option>
                                        }
                                    }
                                </select>
                            </div>

                            <div class="form-group @researchGroupAttachmentInputClass">
                                <label><strong>Εργαστήριο</strong></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-laptop-code"></i></span>
                                    <InputText @bind-Value="newResearchGroup.ResearchGroupLab" class="form-control" />
                                </div>
                                <div class="ms-4">
                                    <h6 class="mb-3">→ ΦΕΚ (Αριθμός Ίδρυσης)</h6>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-plus"></i></span>
                                        <InputText @bind-Value="newResearchGroup.ResearchGroupFEK" class="form-control" />
                                    </div>
                                </div>
                                <br />
                                <label><span style="color: red; font-weight: bold;">*</span> <strong>Συννημένο Αρχείο</strong></label>
                                <InputFile OnChange="UploadResearchGroupPresentationAttachment" />
                                @if (showAttachmentAlert)
                                {
                                    <div class="alert alert-warning" role="alert">
                                        Δεν έχετε επισυνάψει κανένα αρχείο.
                                    </div>
                                }
                            </div>
                            <br />

                            <div class="form-group">
                        <label><strong>Email Επικοινωνίας</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                    <InputText @bind-Value="newResearchGroup.ResearchGroupContactEmail"
                                               class="@($"{researchGroupContactEmailInputClass} form-control")" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label><strong>Διεύθυνση</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <InputText id="autocomplete" @bind-Value="newResearchGroup.ResearchGroupPostalAddress"
                                           class="@($"{researchGroupAddressInputClass} form-control")" />
                            </div>

                            <div class="form-group">
                        <label><strong>Τηλέφωνο</strong><span style="color: red; font-weight: bold;"> *</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-phone"></i></span>
                                    <InputText class="@($"{researchGroupTelephoneInputClass} form-control")"
                                               @bind-Value="newResearchGroup.ResearchGroupTelephoneNumber"
                                               placeholder="69********"
                                               maxlength="10" />
                                </div>
                            </div>

                            <h4> • Κοινωνικά Δίκτυα • </h4>
                            <div class="form-group position-relative mb-3">
                                <div class="form-group position-relative mb-3">
                                    <label><strong>Ιστότοπος</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-globe"></i></span>
                                        <InputText @bind-Value="newResearchGroup.ResearchGroup_Website"
                                                   class="form-control"
                                                   placeholder="https://your-website.com" />
                                    </div>
                                </div>

                                <div class="form-group position-relative mb-3">
                                    <label><strong>Προφίλ Facebook</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fab fa-facebook"></i></span>
                                        <InputText @bind-Value="newResearchGroup.ResearchGroup_Facebook"
                                                   class="form-control"
                                                   placeholder="https://facebook.com/your-page" />
                                    </div>
                                </div>

                                <div class="form-group position-relative mb-3">
                                    <label><strong>Προφίλ X (Twitter)</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fab fa-twitter"></i></span>
                                        <InputText @bind-Value="newResearchGroup.ResearchGroup_Twitter"
                                                   class="form-control"
                                                   placeholder="https://twitter.com/your-handle" />
                                    </div>
                                </div>

                                <div class="form-group position-relative mb-3">
                            <label><strong>Προφίλ LinkedIn</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fab fa-linkedin"></i></span>
                                        <InputText @bind-Value="newResearchGroup.ResearchGroup_LinkedIn"
                                                   class="form-control"
                                                   placeholder="https://linkedin.com/company/your-company" />
                                    </div>
                                </div>

                                <div class="form-group position-relative mb-3">
                            <label><strong>Κανάλι YouTube</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fab fa-youtube"></i></span>
                                        <InputText @bind-Value="newResearchGroup.ResearchGroup_YouTubeChannel"
                                                   class="form-control"
                                                   placeholder="https://youtube.com/your-channel" />
                                    </div>
                                </div>

                                <div class="form-group position-relative mb-3">
                            <label><strong>Βίντεο Παρουσίασης Ερευνητικής Ομάδας</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-link"></i></span>
                                        <InputText @bind-Value="newResearchGroup.ResearchGroup_EmbeddedPromoVideo"
                                                   class="@($"{GetValidationClass(newResearchGroup.ResearchGroup_EmbeddedPromoVideo)} form-control")"
                                                   placeholder="https://www.youtube.com/****" />
                                    </div>
                                    @if (!string.IsNullOrEmpty(newResearchGroup.ResearchGroup_EmbeddedPromoVideo))
                                    {
                                        <div class="embed-responsive embed-responsive-16by9 mt-2">
                                            <iframe class="embed-responsive-item"
                                                    src="@GetYoutubeEmbedUrl(newResearchGroup.ResearchGroup_EmbeddedPromoVideo)"
                                                    allowfullscreen></iframe>
                                        </div>
                                    }
                                </div>
                            </div>


                            @* SELECT AREAS FOR RESEARCH GROUP *@
                            <div class="form-group @researchGroupAreasInputClass">
                                <label><strong>Περιοχές Ερευνητικού Ενδιαφέροντος</strong><span style="color: red; font-weight: bold;"> *</span></label>

                                <!-- Search field with icon -->
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" placeholder="Αναζήτηση/Προσθήκη Περιοχής"
                                           @bind="researchGroupAreasSearchTerm" @oninput="FilterResearchGroupAvailableAreas" />
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fas fa-search" style="color: #4682b4;"></i></span>
                                    </div>
                                </div>

                                <div class="d-flex align-items-center">
                                    <!-- Available areas box -->
                                    <div style="width: 45%;">
                                        <div class="text-center mb-1">
                                            <i class="fas fa-list-alt" style="color: #4682b4; font-size: 1.2rem;"></i>
                                        </div>
                                        <select id="researchGroupAvailableAreas" class="form-control" size="10" multiple @onchange="OnResearchGroupAreaSelect" style="height: 200px;">
                                            @foreach (var area in filteredResearchGroupAreas)
                                            {
                                                <option @key="area.AreaName" value="@area.AreaName" @onclick="() => ToggleResearchGroupExpansion(area.AreaName)">
                                                    @area.AreaName
                                                </option>
                                                @if (expandedResearchGroupAreas.Contains(area.AreaName))
                                                {
                                                    var subFields = area.AreaSubFields?.Split(',');
                                                    if (subFields != null)
                                                    {
                                                        foreach (var subField in subFields)
                                                        {
                                                            <option @key="subField" value="@subField" style="padding-left: 20px;">• @subField</option>
                                                        }
                                                    }
                                                }
                                            }
                                        </select>
                                    </div>

                                    <!-- Move buttons -->
                                    <div class="d-flex flex-column mx-1">
                                        <button type="button" class="btn btn-outline-primary mb-1 px-2" @onclick="MoveSelectedResearchGroupAreaToRight">
                                            <i class="fas fa-arrow-right"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-primary px-2" @onclick="MoveSelectedResearchGroupAreaToLeft">
                                            <i class="fas fa-arrow-left"></i>
                                        </button>
                                    </div>

                                    <!-- Selected areas box -->
                                    <div style="width: 45%;">
                                        <div class="text-center mb-1">
                                            <i class="fas fa-check-circle" style="color: #28a745; font-size: 1.2rem;"></i>
                                        </div>
                                        <select id="researchGroupSelectedAreas" class="form-control @(GetValidationClassForEmptyResearchGroupAreas(selectedResearchGroupAreas.Count))"
                                                size="10" multiple style="height: 200px;">
                                            @foreach (var selectedArea in selectedResearchGroupAreas)
                                            {
                                                <option @key="selectedArea.AreaName">@selectedArea.AreaName</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <br/>
                            @* SELECT SKILLS FOR RESEARCH GROUP *@
                            <div class="form-group">
                                <label><strong>Τεχνολογίες</strong></label>

                                <!-- Search field with icon -->
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" placeholder="Αναζήτηση/Προσθήκη Ικανότητας"
                                           @bind="researchGroupSkillSearchTerm" @oninput="FilterResearchGroupAvailableSkills" />
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fas fa-search" style="color: #4682b4;"></i></span>
                                    </div>
                                </div>

                                <div class="d-flex align-items-center">
                                    <!-- Available skills box -->
                                    <div style="width: 45%;">
                                        <div class="text-center mb-1">
                                            <i class="fas fa-list-alt" style="color: #4682b4; font-size: 1.2rem;"></i>
                                        </div>
                                        <select id="researchGroupAvailableSkills" class="form-control" size="5" multiple style="height: 200px;">
                                            @foreach (var skill in filteredResearchGroupSkills)
                                            {
                                                <option @key="skill">@skill</option>
                                            }
                                        </select>
                                    </div>

                                    <!-- Move buttons -->
                                    <div class="d-flex flex-column mx-1">
                                        <button type="button" class="btn btn-outline-primary mb-1 px-2" @onclick="MoveSelectedResearchGroupSkillToRight">
                                            <i class="fas fa-arrow-right"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-primary px-2" @onclick="MoveSelectedResearchGroupSkillToLeft">
                                            <i class="fas fa-arrow-left"></i>
                                        </button>
                                    </div>

                                    <!-- Selected skills box -->
                                    <div style="width: 45%;">
                                        <div class="text-center mb-1">
                                            <i class="fas fa-check-circle" style="color: #28a745; font-size: 1.2rem;"></i>
                                        </div>
                                        <select id="researchGroupSelectedSkills" class="form-control" size="5" multiple style="height: 200px;">
                                            @foreach (var skill in selectedResearchGroupSkills)
                                            {
                                                <option @key="skill">@skill</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            @* KEYWORDS FOR RESEARCH GROUP *@
                            <div class="form-group mb-3">
                                <label><strong>Λέξεις Κλειδιά</strong></label>
                                <input type="text" class="form-control" @bind="researchGroupKeywordsInput"
                                       placeholder="Πληκτρολογήστε και πατήστε δύο φορές Enter για προσθήκη"
                                       @onkeypress="AddResearchGroupKeyword" />
                                <small class="form-text text-muted">Διαχωρίστε τις λέξεις κλειδιά με κόμμα</small>
                                <div class="mt-2">
                                    @if (!string.IsNullOrEmpty(ResearchGroupKeywords))
                                    {
                                        var keywords = ResearchGroupKeywords.Split(',');
                                        foreach (var keyword in keywords)
                                        {
                                            if (!string.IsNullOrWhiteSpace(keyword))
                                            {
                                                <span class="badge bg-secondary me-1 mb-1">
                                                    @keyword.Trim()
                                                    <button type="button" class="btn-close btn-close-white ms-1" style="font-size: 0.5rem;"
                                                            @onclick="() => RemoveResearchGroupKeyword(keyword.Trim())"></button>
                                                </span>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                    </div>
<!------------------------------------------------------------------------------------------------ Key Personnel Info START ------------------------------------------------------------------------------------------------------->
                    <div class="grouped-section">
                        <h4>2) Μέλη ΔΕΠ</h4>

                        <div class="form-group">
                        <label><strong>Φωτογραφία Ερευνητικής Ομάδας</strong></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-image"></i></span>
                                <InputFile OnChange="HandleFileChangeForTeamImage" accept="image/jpeg, image/png" class="form-control" />
                            </div>
                            @if (!string.IsNullOrEmpty(FileErrorMessage))
                            {
                                <div class="text-danger mt-2">@FileErrorMessage</div>
                            }
                        </div>

                        <!-- Professor Selection Container -->
                        <div class="professor-selection-container">
                            <!-- Single Search Professor by Name and Surname -->
                            <div class="form-group position-relative mb-3">
                                <label for="searchProfessor" style="font-weight: bold;"><strong>Όνοματεπώνυμο/Email Καθηγητή</strong></label>
                                <!-- Wrapper div for proper dropdown positioning -->
                                <div class="position-relative">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                        <input type="text"
                                               id="searchProfessor"
                                               class="form-control"
                                               placeholder="Αναζήτηση/Προσθήκη Καθηγητή (όνομα, επώνυμο ή email)"
                                               @bind="currentProfessorSearch"
                                               @oninput="HandleProfessorInputWhenSearchForProfessorAsResearchGroup" />
                                    </div>

                                    <ul class="list-group position-absolute w-100 professor-suggestions"
                                        style="z-index: 1000; max-height: 150px; overflow-y: auto;"
                                        hidden="@(!professorNameSurnameSuggestions.Any() || currentProfessorSearch.Length < 2)">
                                        @foreach (var suggestion in professorNameSurnameSuggestions
                                       .Where(s => !SelectedProfessors.Contains(s, StringComparer.OrdinalIgnoreCase)))
                                       {
                                            <li class="list-group-item list-group-item-action"
                                                @onclick="async () => {
                                                    await AddProfessor(suggestion);
                                                    await Task.Delay(10);
                                                    currentProfessorSearch = string.Empty;
                                                    StateHasChanged();
                                                }"
                                            @onclick:stopPropagation>
                                                @suggestion
                                            </li>
                                       }
                                    </ul>
                                    <!-- Professor not found message with invitation option -->
                                    @if (currentProfessorSearch.Length >= 2 && !professorNameSurnameSuggestions.Any() && hasSearched && showInvitationPromptWhenSendInvitationEmailToProfessor)
                                    {
                                        <div class="mt-2">
                                            <div class="alert alert-info py-2 mb-2" style="font-size: 0.875rem;">
                                                <i class="fas fa-info-circle me-1"></i>
                                                Το Μέλος-ΔΕΠ δεν είναι εγγεγραμμένο στο σύστημα....Απαιτείται η Εγγραφή στην πλατφόρμα για κάθε Μέλος! 
                                                Πληκτρολογείστε το email του/της στο παραπάνω πεδίο Αναζήτησης για αποστολή email Πρόσκλησης Εγγραφής..
                                            </div>

                                            @if (IsValidEmail(currentProfessorSearch))
                                            {
                                                <div class="d-flex align-items-center">
                                                    <span class="me-2">Θέλετε να στείλετε πρόσκληση Εγγραφής στο email <strong>@currentProfessorSearch</strong>;</span>
                                                    <button class="btn btn-sm btn-success" @onclick="() => SendInvitationToProfessor(currentProfessorSearch)"
                                                    @onclick:preventDefault>
                                                        <i class="fas fa-check"></i> Ναι
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>

                                <br />
                                <!-- Selected Professors List -->
                                <div class="selected-professors ms-4">
                                    @if (SelectedProfessors.Any())
                                    {
                                        <h6 class="mb-3" style="color: darkblue;">
                                            → <i class="fas fa-user-tie"></i> Επιλεγμένοι Καθηγητές:
                                        </h6>
                                        @foreach (var (professor, index) in SelectedProfessors.Select((p, i) => (p, i)))
                                        {
                                            <div class="selected-professor-item bg-light p-2 mb-2 rounded d-flex justify-content-between align-items-center">
                                                <span>@professor</span>
                                                <div class="d-flex align-items-center">
                                                    <!-- For Professors -->
                                                    <select class="form-select form-select-sm me-2" style="width: 120px;"
                                                            @bind="SelectedProfessorDetails[index].Role"
                                                            @bind:event="onchange">
                                                        <option value="">Ρόλος</option>
                                                        <option value="Head" disabled="@IsHeadAssignedToOther(index)">Head</option>
                                                        <option value="Senior">Senior</option>
                                                        <option value="Researcher">Researcher</option>
                                                    </select>
                                                    <button class="btn btn-sm btn-primary me-2"
                                                            @onclick="() => ToggleProfessorDetails(index)"
                                                            @onclick:preventDefault>
                                                        <i class="fas @(SelectedProfessorDetails[index].IsExpanded ? "fa-eye-slash" : "fa-eye")"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger"
                                                            @onclick="() => RemoveProfessor(professor)"
                                                            @onclick:preventDefault
                                                            @onclick:stopPropagation>
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- Professor details section - only show if expanded -->
                                            @if (SelectedProfessorDetails[index].IsExpanded)
                                            {
                                                <div class="professor-details-section bg-white p-3 mb-3 rounded border">
                                                    <div class="form-group">
                                                        <label><strong>Όνομα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                                                            <InputText @bind-Value="SelectedProfessorDetails[index].Name" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Επώνυμο</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                                                            <InputText @bind-Value="SelectedProfessorDetails[index].Surname" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Ίδρυμα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-university"></i></span>
                                                            <InputText @bind-Value="SelectedProfessorDetails[index].University" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Σχολή</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-school"></i></span>
                                                            <InputText @bind-Value="SelectedProfessorDetails[index].School" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Τμήμα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-building"></i></span>
                                                            <InputText @bind-Value="SelectedProfessorDetails[index].Department" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Βαθμίδα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-bars-staggered"></i></span>
                                                            <InputText @bind-Value="SelectedProfessorDetails[index].Vathmida" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Email</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                                            <InputText @bind-Value="SelectedProfessorDetails[index].Email" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        <label><strong>Προφίλ Google Scholar</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fa-brands fa-google"></i></span>
                                                            <a href="@SelectedProfessorDetails[index].GoogleScholarProfile"
                                                               target="_blank"
                                                               rel="noopener noreferrer"
                                                               class="form-control readonly-input text-decoration-none"
                                                               style="cursor: pointer; color: inherit; background-color: #e9ecef;">
                                                                @SelectedProfessorDetails[index].GoogleScholarProfile
                                                            </a>
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Προφίλ LinkedIn</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fa-brands fa-linkedin"></i></span>
                                                            <a href="@SelectedProfessorDetails[index].LinkedInProfile"
                                                               target="_blank"
                                                               rel="noopener noreferrer"
                                                               class="form-control readonly-input text-decoration-none"
                                                               style="cursor: pointer; color: inherit; background-color: #e9ecef;">
                                                                @SelectedProfessorDetails[index].LinkedInProfile
                                                            </a>
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label style="color: #00008B; font-weight: bold;">Ημερομηνία Εγγραφής</label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                                            @if (SelectedProfessorDetails[index].IsExpanded)
                                                            {
                                                                <InputDate @bind-Value="SelectedProfessorDetails[index].RegistrationDate"
                                                                           class="form-control" />
                                                            }
                                                            else
                                                            {
                                                                <input type="text"
                                                                       value="@SelectedProfessorDetails[index].RegistrationDate.ToShortDateString()"
                                                                       class="form-control readonly-input"
                                                                       readonly />
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                                </div>
                            </div>
                        <h4>3) Συνεργάτες</h4>
                        <div class="student-selection-container">
                            <!-- Single Search Student by Name and Surname -->
                            <div class="form-group position-relative mb-3">
                            <label for="searchStudent" style="font-weight: bold;"><strong>Όνοματεπώνυμο Φοιτητή/Μέλους</strong></label>
                            <!-- Wrapper div for proper dropdown positioning -->
                            <div class="position-relative">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user-graduate"></i></span>
                                    <input type="text"
                                           id="searchStudent"
                                           class="form-control"
                                           placeholder="Αναζήτηση/Προσθήκη Φοιτητή (όνομα, επώνυμο ή email)"
                                           @bind="currentStudentSearch"
                                           @oninput="HandleStudentInputWhenSearchForStudent" />
                                </div>

                                <ul class="list-group position-absolute w-100 student-suggestions"
                                    style="z-index: 1000; max-height: 150px; overflow-y: auto;"
                                    hidden="@(!studentNameSurnameSuggestions.Any() || currentStudentSearch.Length < 2)">
                                    @foreach (var suggestion in studentNameSurnameSuggestions
                                   .Where(s => !SelectedStudents.Contains(s, StringComparer.OrdinalIgnoreCase)))
                                    {
                                        <li class="list-group-item list-group-item-action"
                                            @onclick="async () => {
                                                await AddStudent(suggestion);
                                                await Task.Delay(10);
                                                currentStudentSearch = string.Empty;
                                                StateHasChanged();
                                            }"
                                            @onclick:stopPropagation>
                                            @suggestion
                                        </li>
                                    }
                                </ul>
                                <!-- Student not found message with invitation option -->
                                @if (currentStudentSearch.Length >= 2 && !studentNameSurnameSuggestions.Any() && hasSearchedStudent && showInvitationPromptWhenSendInvitationEmailToStudent)
                                {
                                    <div class="mt-2">
                                        <div class="alert alert-info py-2 mb-2" style="font-size: 0.875rem;">
                                            <i class="fas fa-info-circle me-1"></i>
                                            Ο Συνεργάτης δεν είναι εγγεγραμμένος στο σύστημα....Απαιτείται η Εγγραφή στην πλατφόρμα για κάθε Μέλος!
                                            Πληκτρολογείστε το email του/της στο παραπάνω πεδίο Αναζήτησης για αποστολή email Πρόσκλησης Εγγραφής..
                                        </div>

                                        @if (IsValidEmail(currentStudentSearch))
                                        {
                                            <div class="d-flex align-items-center">
                                                <span class="me-2">Θέλετε να στείλετε πρόσκληση στο email <strong>@currentStudentSearch</strong>;</span>
                                                <button class="btn btn-sm btn-success" @onclick="() => SendInvitationToStudent(currentStudentSearch)"
                                                @onclick:preventDefault>
                                                    <i class="fas fa-check"></i> Ναι
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                                <br />
                                <!-- Selected Students List -->
                                <div class="selected-students ms-4">
                                    @if (SelectedStudents.Any())
                                    {
                                        <h6 class="mb-3" style="color: darkblue;">
                                            → <i class="fas fa-graduation-cap"></i> Επιλεγμένοι Φοιτητές/Μέλη:
                                        </h6>
                                        @foreach (var (student, index) in SelectedStudents.Select((p, i) => (p, i)))
                                        {
                                            <div class="selected-student-item bg-light p-2 mb-2 rounded d-flex justify-content-between align-items-center">
                                                <span>@student</span>
                                                <div class="d-flex align-items-center">
                                                    <select class="form-select form-select-sm me-2" style="width: 120px;"
                                                            @bind="SelectedStudentDetails[index].Role"
                                                            @bind:event="onchange">
                                                        <option value="">Ρόλος</option>
                                                        <option value="Postdoc">Μεταδιδακτορικός</option>
                                                        <option value="PhD_Candidate">Υποψήφιος Διδάκτορας</option>
                                                        <option value="Master Student">Μεταπτυχιακός Φοιτητής</option>
                                                        <option value="Bachelor Student">Προπτυχιακός Φοιτητής</option>
                                                        <option value="Other">Άλλο</option>
                                                    </select>
                                                    <button class="btn btn-sm btn-primary me-2"
                                                            @onclick="() => ToggleStudentDetails(index)"
                                                            @onclick:preventDefault>
                                                        <i class="fas @(SelectedStudentDetails[index].IsExpanded ? "fa-eye-slash" : "fa-eye")"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger"
                                                            @onclick="() => RemoveStudent(student)"
                                                            @onclick:preventDefault
                                                            @onclick:stopPropagation>
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- Student details section - only show if expanded -->
                                            @if (SelectedStudentDetails[index].IsExpanded)
                                            {
                                                <div class="student-details-section bg-white p-3 mb-3 rounded border">

                                                    <div class="form-group">
                                                        <label><strong>Όνομα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].Name" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Επώνυμο</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].Surname" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Επίπεδο Σπουδών</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-graduation-cap"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].LevelOfStudies" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Ίδρυμα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-university"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].University" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Τμήμα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-building"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].Department" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Email</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].Email" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Προσωπική Ιστοσελίδα</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-globe"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].PersonalWebsite" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>Προφίλ Google Scholar</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fa-brands fa-linkedin"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].GoogleScholarProfile" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label><strong>LinkedIn Προφίλ</strong></label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fa-brands fa-linkedin"></i></span>
                                                            <InputText @bind-Value="SelectedStudentDetails[index].LinkedInProfile" readonly class="form-control readonly-input" />
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        <label style="color: #00008B; font-weight: bold;">Ημερομηνία Εγγραφής στην Ερευνητική Ομάδα</label>
                                                        <div class="input-group">
                                                            <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                                            <InputDate @bind-Value="SelectedStudentDetails[index].RegistrationDate"
                                                                       class="form-control" />
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="grouped-section">
                    <div class="publications-container">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4>4) Δημοσιεύσεις Προσωπικού</h4>
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                        id="publicationsPerPageDropdown" data-bs-toggle="dropdown"
                                        aria-expanded="false">
                                    Δημοσιεύσεις ανά σελίδα: @PublicationsPerPage
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="publicationsPerPageDropdown">
                                    <li><button class="dropdown-item" type="button" @onclick="() => ChangePublicationsPerPage(5)">5</button></li>
                                    <li><button class="dropdown-item" type="button" @onclick="() => ChangePublicationsPerPage(10)">10</button></li>
                                    <li><button class="dropdown-item" type="button" @onclick="() => ChangePublicationsPerPage(15)">15</button></li>
                                </ul>
                            </div>
                        </div>

                        <div class="publications-selection-container">
                            @if (isLoadingPublications)
                            {
                                <div class="text-center mt-3">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p>Φόρτωση Δημοσιεύσεων...</p>
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(publicationsErrorMessage))
                            {
                                <div class="alert alert-danger">@publicationsErrorMessage</div>
                            }
                            else if (MemberPublications.Count == 0)
                            {
                                <div class="alert alert-info">
                                    Δεν βρέθηκαν δημοσιεύσεις για τα μέλη της ερευνητικής ομάδας.
                                </div>
                            }
                            else
                            {
                                <div class="publications-list">
                                    @{
                                        // Combine all publications and order by year descending
                                        var allPublications = MemberPublications
                                        .OrderByDescending(p => p.PK_ResearchGroupMemberPublication_Year)
                                        .ToList();

                                        var totalPages = (int)Math.Ceiling((double)allPublications.Count / PublicationsPerPage);
                                        var currentPage = Math.Min(CurrentPublicationPage, totalPages); // Ensure currentPage doesn't exceed totalPages
                                        var paginatedPublications = allPublications
                                        .Skip((currentPage - 1) * PublicationsPerPage)
                                        .Take(PublicationsPerPage)
                                        .ToList();
                                    }

                                    <div class="list-group mb-3">
                                        @foreach (var pub in paginatedPublications)
                                        {
                                            <div class="list-group-item">
                                                <div class="d-flex w-100 justify-content-between align-items-start">
                                                    <div class="flex-grow-1">
                                                        <h6 class="mb-1">
                                                            @if (!string.IsNullOrEmpty(pub.PK_ResearchGroupMemberPublication_Url))
                                                            {
                                                                <a href="@pub.PK_ResearchGroupMemberPublication_Url" target="_blank" rel="noopener noreferrer">
                                                                    @pub.PK_ResearchGroupMemberPublication_Title
                                                                </a>
                                                            }
                                                            else
                                                            {
                                                                @pub.PK_ResearchGroupMemberPublication_Title
                                                            }
                                                        </h6>
                                                        @if (!string.IsNullOrEmpty(pub.PK_ResearchGroupMemberPublication_Authors))
                                                        {
                                                            <p class="mb-1 small">@pub.PK_ResearchGroupMemberPublication_Authors</p>
                                                        }
                                                        @if (!string.IsNullOrEmpty(pub.PK_ResearchGroupMemberPublication_Journal))
                                                        {
                                                            <small class="text-muted">@pub.PK_ResearchGroupMemberPublication_Journal</small>
                                                        }
                                                    </div>
                                                    <div class="d-flex flex-column align-items-end ms-3">
                                                        <small class="text-muted">@pub.PK_ResearchGroupMemberPublication_Year</small>
                                                        <span class="badge @(pub.MemberType == "Professor" ? "bg-primary" : "bg-success") mt-1">
                                                            @(pub.MemberType == "Professor" ? "Μέλος ΔΕΠ" : "Συνεργάτης")
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="mt-2">
                                                    @if (!string.IsNullOrEmpty(pub.PK_ResearchGroupMemberPublication_CitedBy))
                                                    {
                                                        <span class="badge bg-info">
                                                            <i class="fas fa-quote-right"></i> @pub.PK_ResearchGroupMemberPublication_CitedBy citations
                                                        </span>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    @if (allPublications.Count > PublicationsPerPage)
                                    {
                                        <nav aria-label="Publications pagination">
                                            <ul class="pagination justify-content-center flex-wrap">
                                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                                    <button type="button" class="page-link"
                                                            @onclick="() => ChangePage(currentPage - 1)">
                                                        &laquo; Προηγούμενη
                                                    </button>
                                                </li>

                                                @{
                                                    // Show first page, current page with neighbors, and last page
                                                    int pagesToShow = 2; // Adjust as needed
                                                    int startPage = Math.Max(1, currentPage - (pagesToShow / 2));
                                                    int endPage = Math.Min(totalPages, startPage + pagesToShow - 1);

                                                    if (startPage > 1)
                                                    {
                                                        <li class="page-item @(1 == currentPage ? "active" : "")">
                                                            <button type="button" class="page-link"
                                                                    @onclick="() => ChangePage(1)">
                                                                1
                                                            </button>
                                                        </li>
                                                        if (startPage > 2)
                                                        {
                                                            <li class="page-item disabled">
                                                                <span class="page-link">...</span>
                                                            </li>
                                                        }
                                                    }

                                                    for (int i = startPage; i <= endPage; i++)
                                                    {
                                                        var pageNumber = i;
                                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                                            <button type="button" class="page-link"
                                                                    @onclick="() => ChangePage(pageNumber)">
                                                                @i
                                                            </button>
                                                        </li>
                                                    }

                                                    if (endPage < totalPages)
                                                    {
                                                        if (endPage < totalPages - 1)
                                                        {
                                                            <li class="page-item disabled">
                                                                <span class="page-link">...</span>
                                                            </li>
                                                        }
                                                        <li class="page-item @(totalPages == currentPage ? "active" : "")">
                                                            <button type="button" class="page-link"
                                                                    @onclick="() => ChangePage(totalPages)">
                                                                @totalPages
                                                            </button>
                                                        </li>
                                                    }
                                                }

                                                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                                    <button type="button" class="page-link"
                                                            @onclick="() => ChangePage(currentPage + 1)">
                                                        Επόμενη &raquo;
                                                    </button>
                                                </li>
                                            </ul>
                                        </nav>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <br/>
                    <h4>5) Research & Innovation Actions</h4>
                    <div class="researchactions-selection-container">
                            <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center"
                                 @onclick="ToggleManualRegistration"
                                 style="cursor: pointer; padding: 0.75rem 1.25rem;">
                                <div>
                                    <h5 class="mb-0">
                                        <i class="fas fa-plus-circle me-2"></i>Χειροκίνητη Καταχώρηση Έργου
                                    </h5>
                                </div>
                                <div>
                                    @if (isManualRegistrationExpanded)
                                    {
                                        <i class="fas fa-chevron-up text-white"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-chevron-down text-white"></i>
                                    }
                                </div>
                            </div>
                            <div class="student-details-section bg-white p-3 mb-3 rounded border">
                                <div class="card-body p-0" style="overflow: hidden; transition: max-height 0.3s ease, opacity 0.3s ease; @(isManualRegistrationExpanded ? "max-height: 5000px; opacity: 1; overflow: visible;" : "max-height: 0; opacity: 0;")">
                                    <div class="p-3">
                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Τίτλος Έργου *</label>
                                            <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectTitle" />
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Αριθμός Σύμβασης (Grant Agreement Number) *</label>
                                            <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectGrantAgreementNumber" />
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Συντομογραφία (Acronym)</label>
                                            <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectAcronym" />
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label" style="font-weight: bold;">Project Framework</label>
                                            <div class="input-group">
                                                <select class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectFramework">
                                                    <option value=""> -- Επιλέξτε Πλαίσιο Χρηματοδότησης -- </option>
                                                    @foreach (var framework in fundingFrameworks)
                                                    {
                                                        <option value="@framework">@framework</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label class="form-label small-label">Ημερομηνία Έναρξης *</label>
                                                    <input type="date" class="form-control form-control-sm"
                                                           @bind="manualProject.ResearchGroup_ProjectStartDate"
                                                           @bind:format="yyyy-MM-dd" />
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label class="form-label small-label">Ημερομηνία Λήξης *</label>
                                                    <input type="date" class="form-control form-control-sm"
                                                           @bind="manualProject.ResearchGroup_ProjectEndDate"
                                                           @bind:format="yyyy-MM-dd" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Κωδικός ΕΛΚΕ</label>
                                            <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectELKECode" />
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Επιστημονικός Υπεύθυνος/η *</label>
                                            <select class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectScientificResponsibleEmail">
                                                <option value="">-- Επιλέξτε τον Υπεύθυνο --</option>
                                                @foreach (var professor in SelectedProfessors)
                                                {
                                                    <option value="@professor">@professor</option>
                                                }
                                            </select>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Ιστότοπος Έργου</label>
                                            <input type="url" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectWebsite" placeholder="https://..." />
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label class="form-label small-label">Προϋπολογισμός Ομάδας (€)</label>
                                                    <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_OurProjectBudget" placeholder="...σε Ευρώ" />
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label class="form-label small-label">Κατάσταση Έργου *</label>
                                                    <select class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectStatus">
                                                        <option value="OnGoing">Εν Ενεργεία</option>
                                                        <option value="Past">Ολοκληρωμένο</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label class="form-label small-label">Συνολικό Κόστος Έργου (€)</label>
                                                    <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectTotalCost" placeholder="...σε Ευρώ" />
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label class="form-label small-label">Συνολική Συνεισφορά ΕΕ (€)</label>
                                                    <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectTotalEUContribution" placeholder="...σε Ευρώ" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Συντονιστής Έργου</label>
                                            <input type="text" class="form-control form-control-sm" @bind="manualProject.ResearchGroup_ProjectCoordinator" />
                                        </div>
                                    <br />
                                        <br/>
                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Λέξεις Κλειδιά</label>
                                            <input type="text" class="form-control form-control-sm" @bind="manualKeywordsInput"
                                                   placeholder="Πληκτρολογήστε και πατήστε δύο φορές Enter για προσθήκη"
                                                   @onkeypress="AddManualKeyword" />
                                            <small class="form-text text-muted">Διαχωρίστε τις λέξεις κλειδιά με κόμμα</small>
                                            <div class="mt-2">
                                                @if (!string.IsNullOrEmpty(manualProject.ResearchGroup_ProjectKeywords))
                                                {
                                                    var keywords = manualProject.ResearchGroup_ProjectKeywords.Split(',');
                                                    foreach (var keyword in keywords)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(keyword))
                                                        {
                                                            <span class="badge bg-secondary me-1 mb-1">
                                                                @keyword.Trim()
                                                                <button type="button" class="btn-close btn-close-white ms-1" style="font-size: 0.5rem;"
                                                                        @onclick="() => RemoveManualKeyword(keyword.Trim())"></button>
                                                            </span>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label class="form-label small-label">Περιγραφή Έργου</label>
                                            <textarea class="form-control form-control-sm" rows="3" @bind="manualProject.ResearchGroup_ProjectDescription"></textarea>
                                        </div>

                                        <div class="d-flex justify-content-end mt-3 pt-3 border-top">
                                            <button class="btn btn-secondary btn-sm me-2"
                                                    @onclick="ResetManualForm"
                                                    @onclick:preventDefault>
                                                <i class="fas fa-times me-1"></i>Εκκαθάριση
                                            </button>
                                            <button class="btn btn-primary btn-sm"
                                                    @onclick="AddManualProject"
                                                    @onclick:preventDefault>
                                                <i class="fas fa-plus me-1"></i>Προσθήκη Έργου
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        <div class="mb-4" style="max-width: 600px;">
                            <div>
                                <h5 class="mb-0">
                                    <i class="fas"></i> •Αυτόματη Καταχώρηση Έργου •
                                </h5>
                            </div>
                            <div class="input-group">
                                <input type="text" @bind="projectId" class="form-control" placeholder="Εισάγετε έναν Έγκυρο Αριθμό (GA) Έργου">
                                <button @onclick="SearchProject"
                                @onclick:preventDefault
                                        class="btn btn-primary">
                                    <i class="fas fa-search me-1"></i> Αναζήτηση
                                </button>
                            </div>
                        </div>

                        @if (errorMessage != null)
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        @if (successMessage != null)
                        {
                            <div class="alert alert-success">@successMessage</div>
                        }

                        @if (project != null)
                        {
                            <!-- Project Title Header (Clickable) -->
                            <div style="max-width: 600px;">
                                <div class="mb-3" style="border: none;">
                                    <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center"
                                         @onclick="ToggleTable"
                                         style="cursor: pointer; padding: 0.75rem 1.25rem; border-radius: 0.25rem;">
                                        <div>
                                            <h5 class="mb-0">@project.Title</h5>
                                            <div class="badge @(IsProjectOngoing(project) ? "bg-success" : "bg-secondary") mt-1">
                                                @(IsProjectOngoing(project) ? "Εν Ενεργεία Δράση" : "Ολοκληρωμένη Δράση")
                                            </div>
                                        </div>
                                        <div>
                                            <button @onclick="async () => await AddToTemporaryStorage(project)"
                                            @onclick:preventDefault
                                                    class="btn btn-sm btn-success"
                                                    title="Προσθήκη"
                                                    disabled="@(temporaryProjects.Any(p => p.GrantId == project.GrantId))">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                            @if (isTableExpanded)
                                            {
                                                <i class="fas fa-chevron-up ml-2" style="color: #0dcaf0;"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-chevron-down ml-2" style="color: #0dcaf0;"></i>
                                            }
                                        </div>
                                    </div>

                                    <!-- Project Details Table (Collapsible) -->
                                    <div class="card-body p-0" style="overflow: hidden; transition: max-height 0.3s ease, opacity 0.3s ease; @(isTableExpanded ? "max-height: none; opacity: 1; overflow: visible;" : "max-height: 0; opacity: 0;")">
                                        <div class="table-responsive">
                                            <table class="table table-bordered table-striped mb-0">
                                                <tbody>
                                                    <tr>
                                                        <th class="w-25">Acronym</th>
                                                        <td>@project.Acronym</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Grant ID</th>
                                                        <td>@project.GrantId</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Start Date</th>
                                                        <td>@project.StartDate</td>
                                                    </tr>
                                                    <tr>
                                                        <th>End Date</th>
                                                        <td>@project.EndDate</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Total Cost</th>
                                                        <td>@ExtractAndFormatAmount(project.TotalCost)</td>
                                                    </tr>
                                                    <tr>
                                                        <th>EU Contribution</th>
                                                        <td>@ExtractAndFormatAmount(project.EuContribution)</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Coordinator</th>
                                                        <td>@project.Coordinator</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Keywords</th>
                                                        <td>@string.Join(", ", project.Keywords)</td>
                                                    </tr>
                                                    <tr>
                                                        <th class="w-25">Programme(s)</th>
                                                        <td>
                                                            @if (project.Programmes != null && project.Programmes.Any())
                                                            {
                                                                <ul class="list-unstyled mb-0">
                                                                    @foreach (var programme in project.Programmes)
                                                                    {
                                                                        <li>@programme</li>
                                                                    }
                                                                </ul>
                                                            }
                                                            else
                                                            {
                                                                <span>Μη Διαθέσιμο</span>
                                                            }
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <th class="w-25">Topic(s)</th>
                                                        <td>
                                                            @if (project.Topics != null && project.Topics.Any())
                                                            {
                                                                <ul class="list-unstyled mb-0">
                                                                    @foreach (var topic in project.Topics)
                                                                    {
                                                                        <li>@topic</li>
                                                                    }
                                                                </ul>
                                                            }
                                                            else
                                                            {
                                                                <span>Μη Διαθέσιμο</span>
                                                            }
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <th>Description</th>
                                                        <td style="overflow: visible;">
                                                            <textarea class="form-control" rows="3" readonly
                                                                      style="resize: vertical; min-height: 100px; max-height: 300px; overflow-y: auto;">@project.Description</textarea>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>

                                        <!-- Additional Manual Input Fields -->
                                        <div class="p-3 bg-light">
                                            <h5 class="mb-3 d-flex align-items-center justify-content-center" style="color: darkblue;">
                                                <i class="fa-solid fa-circle-info me-2"></i>
                                                Πρόσθετες Πληροφορίες Έργου
                                                <i class="fa-solid fa-circle-info ms-2"></i>
                                            </h5>

                                            <div class="row">
                                                <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label class="small-label">Κωδικός ΕΛΚΕ</label>
                                                            <InputText @bind-Value="project.ResearchGroup_ProjectELKECode" class="form-control" />
                                                        </div>

                                                        <div class="form-group">
                                                            <label>Επιστημονικός Υπεύθυνος</label>
                                                            <select @bind="project.ResearchGroup_ProjectScientificResponsibleEmail" class="form-control">
                                                                <option value="">-- Επιλογή Επιστημονικού Υπεύθυνου --</option>
                                                                @foreach (var professor in SelectedProfessors)
                                                                {
                                                                    <option value="@professor">@professor</option>
                                                                }
                                                            </select>
                                                        </div>

                                                        <!-- ADD PROJECT FRAMEWORK DROPDOWN HERE -->
                                                        <div class="form-group">
                                                            <label class="small-label">Project Framework</label>
                                                            <select class="form-control form-control-sm" @bind="project.ResearchGroup_ProjectFramework">
                                                                <option value=""> -- Επιλέξτε Πλαίσιο Χρηματοδότησης -- </option>
                                                                @foreach (var framework in fundingFrameworks)
                                                                {
                                                                    <option value="@framework">@framework</option>
                                                                }
                                                            </select>
                                                        </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label class="small-label">Ιστότοπος Έργου</label>
                                                        <InputText @bind-Value="project.ResearchGroup_ProjectWebsite" class="form-control" placeholder="https://..." />
                                                    </div>

                                                    <div class="form-group">
                                                        <label class="small-label">Προϋπολογισμός Ομάδας (€)</label>
                                                        <InputText @bind-Value="project.ResearchGroup_OurProjectBudget" class="form-control" placeholder="...σε Ευρώ" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="small-label">Σύνδεσμος Cordis</label>
                                                <div class="input-group">
                                                    <a href="@($"https://cordis.europa.eu/project/id/{ExtractGrantId(project.GrantId)}")"
                                                       target="_blank"
                                                       rel="noopener noreferrer"
                                                       class="form-control bg-light text-primary text-decoration-none"
                                                       style="cursor: pointer;">
                                                        https://cordis.europa.eu/project/id/@ExtractGrantId(project.GrantId)
                                                    </a>
                                                    <span class="input-group-text bg-light border-0">
                                                        <i class="fas fa-external-link-alt"></i>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Temporary Storage Section -->
                        @if (temporaryProjects.Any())
                        {
                            <div class="mt-4">
                                <h5 class="mb-3" style="color: darkblue;">Έχετε Επιλέξει: [@temporaryProjects.Count] Project(s)</h5>
                                <div class="list-group mb-3">
                                    @foreach (var tempProject in temporaryProjects)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@tempProject.Title</strong>
                                                <div class="text-muted small">@tempProject.GrantId</div>
                                                <div class="badge @(IsProjectOngoing(tempProject) ? "bg-success" : "bg-secondary") mt-1">
                                                    @(IsProjectOngoing(tempProject) ? "Εν Ενεργεία Δράση" : "Ολοκληρωμένη Δράση")
                                                </div>
                                            </div>
                                            <button @onclick="async () => await RemoveFromTemporaryStorage(tempProject)"
                                                    class="btn btn-sm btn-danger"
                                            @onclick:preventDefault
                                                    title="Αφαίρεση από Προσωρινή Λίστα της Ομάδας Έργων του Research Group">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        <!-- Existing Projects Section (for updates) -->
                        @if (existingProjects.Any())
                        {
                            <div class="mt-4">
                                <h5 class="mb-3" style="color: darkblue;">→ <i class="fa-solid fa-flask"></i> Αποθηκευμένες Ερευνητικές Δράσεις:</h5>
                                <div class="list-group mb-3">
                                    @foreach (var project in existingProjects)
                                    {
                                        var isEditing = IsProjectEditing(project);
                                        <div class="list-group-item bg-light p-3 mb-3 rounded position-relative">
                                            <!-- Project Header -->
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h6 class="mb-0" style="font-weight: bold; color: red;">@project.ResearchGroup_ProjectTitle</h6>
                                                <div class="badge @(project.ResearchGroup_ProjectStatus == "OnGoing" ? "bg-success" : "bg-secondary")">
                                                    @(project.ResearchGroup_ProjectStatus == "OnGoing" ? "Εν Ενεργεία Δράση" : "Ολοκληρωμένη Δράση")
                                                </div>
                                            </div>

                                            @if (isEditing)
                                            {
                                                <div class="project-edit-form bg-white p-3 rounded border">
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="form-group">
                                                                <label>Κωδικός ΕΛΚΕ</label>
                                                                <InputText @bind-Value="project.ResearchGroup_ProjectELKECode" class="form-control" />
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Επιστημονικός Υπεύθυνος</label>
                                                                <select @bind="project.ResearchGroup_ProjectScientificResponsibleEmail" class="form-control">
                                                                    <option value="">-- Επιλογή Επιστημονικού Υπεύθυνου --</option>
                                                                    @foreach (var professor in SelectedProfessors)
                                                                    {
                                                                        <option value="@professor">@professor</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Project Framework</label>
                                                                <select class="form-control form-control-sm" @bind="project.ResearchGroup_ProjectFramework">
                                                                    <option value=""> -- Επιλέξτε Πλαίσιο Χρηματοδότησης -- </option>
                                                                    @foreach (var framework in fundingFrameworks)
                                                                    {
                                                                        <option value="@framework">@framework</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-group">
                                                                <label>Ιστότοπος Έργου</label>
                                                                <InputText @bind-Value="project.ResearchGroup_ProjectWebsite" class="form-control" placeholder="https://..." />
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Προϋπολογισμός Ομάδας (€)</label>
                                                                <InputText @bind-Value="project.ResearchGroup_OurProjectBudget" class="form-control" />
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Κατάσταση Έργου</label>
                                                                <select class="form-control form-control-sm" @bind="project.ResearchGroup_ProjectStatus">
                                                                    <option value="OnGoing">Εν Ενεργεία</option>
                                                                    <option value="Past">Ολοκληρωμένο</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <!-- Buttons at bottom right for edit form -->
                                                    <div class="d-flex justify-content-end align-items-center mt-3 pt-3 border-top">
                                                        <button type="button" class="btn btn-success btn-sm me-2"
                                                                @onclick="() => ToggleProjectEdit(project)">
                                                            <i class="fas fa-save"></i> Αποθήκευση
                                                        </button>
                                                        <button type="button" class="btn btn-secondary btn-sm"
                                                                @onclick="() => ToggleProjectEdit(project)">
                                                            <i class="fas fa-times"></i> Ακύρωση
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="project-info">
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <p><strong>Grant ID: </strong> @project.ResearchGroup_ProjectGrantAgreementNumber</p>
                                                            <p><strong>Κωδικός ΕΛΚΕ: </strong> @(project.ResearchGroup_ProjectELKECode ?? "Δεν υπάρχει")</p>
                                                            <p><strong>Επιστημονικός Υπεύθυνος: </strong> @(project.ResearchGroup_ProjectScientificResponsibleEmail ?? "Δεν έχει οριστεί")</p>
                                                            <p><strong>Project Framework: </strong> @(project.ResearchGroup_ProjectFramework ?? "Δεν έχει οριστεί")</p>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <p>
                                                                <strong>Ιστότοπος: </strong>
                                                                @if (!string.IsNullOrEmpty(project.ResearchGroup_ProjectWebsite))
                                                                {
                                                                    <a href="@project.ResearchGroup_ProjectWebsite" target="_blank" class="text-break">@project.ResearchGroup_ProjectWebsite</a>
                                                                }
                                                                else
                                                                {
                                                                    <span>Δεν υπάρχει</span>
                                                                }
                                                            </p>
                                                            <p><strong>Προϋπολογισμός: </strong> @(project.ResearchGroup_OurProjectBudget ?? "Δεν έχει οριστεί")</p>
                                                            <p><strong>Κατάσταση: </strong> @(project.ResearchGroup_ProjectStatus == "OnGoing" ? "Εν Ενεργεία" : "Ολοκληρωμένο")</p>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Buttons at bottom right for view mode -->
                                                <div class="d-flex justify-content-end align-items-center mt-3 pt-3 border-top">
                                                    <button type="button" class="btn btn-sm btn-info me-2"
                                                            @onclick="() => ToggleProjectEdit(project)">
                                                        <i class="fas fa-edit me-1"></i> Επεξεργασία
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-danger"
                                                            @onclick="() => RemoveProject(project)">
                                                        <i class="fas fa-trash me-1"></i> Διαγραφή
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }                     

                    </div>

                    <h4>6) Πατέντες</h4>
                    <div class="researchpatents-selection-container">
                        <!-- Existing patent form fields -->
                        <div class="form-group">
                            <label><strong>URL Πατέντας</strong></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-link"></i></span>
                                <InputText @bind-Value="newResearchGroup_Patents.ResearchGroup_Patent_PatentURL" class="form-control"
                                           placeholder="Εισάγετε το URL της Πατέντας" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label><strong>Τίτλος Πατέντας</strong></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-heading"></i></span>
                                <InputText @bind-Value="newResearchGroup_Patents.ResearchGroup_Patent_PatentTitle" class="form-control"
                                           placeholder="Εισάγετε τον Τίτλο της Πατέντας" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label><strong>Σύντομη Περιγραφή Πατέντας</strong></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                <InputTextArea @bind-Value="newResearchGroup_Patents.ResearchGroup_Patent_PatentDescription" class="form-control"
                                               placeholder="Εισάγετε την Περιγραφή της Πατέντας" rows="3" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label><strong>DOI Πατέντας</strong></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-barcode"></i></span>
                                <InputText @bind-Value="newResearchGroup_Patents.ResearchGroup_Patent_PatentDOI" class="form-control"
                                           placeholder="Εισάγετε το DOI της Πατέντας" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label><strong>Τύπος Πατέντας</strong></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-tag"></i></span>
                                <InputSelect @bind-Value="newResearchGroup_Patents.ResearchGroup_Patent_PatentType" class="form-control select-with-arrow">
                                    <option value="">- Επιλέξτε Τύπο Πατέντας -</option>
                                    <option value="US_Patent">US Patent</option>
                                    <option value="EU_Patent">EU Patent</option>
                                    <option value="Global_Patent">Global Patent</option>
                                    <option value="Greek_Patent">Greek Patent</option>
                                </InputSelect>
                            </div>
                        </div>

                        <!-- New Patent Status Dropdown -->
                        <div class="form-group">
                            <label><strong>Κατάσταση Πατέντας</strong></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-check-circle"></i></span>
                                <InputSelect @bind-Value="newResearchGroup_Patents.ResearchGroup_Patent_PatentStatus" class="form-control select-with-arrow">
                                    <option value="">- Επιλέξτε Κατάσταση -</option>
                                    <option value="Ενεργή">Ενεργή</option>
                                    <option value="Ανενεργή">Ανενεργή</option>
                                </InputSelect>
                            </div>
                        </div>

                        <!-- Add Patent Button -->
                        <div class="form-group">
                            <button type="button" class="btn btn-primary" @onclick="AddPatent">
                                <i class="fas fa-plus"></i> Προσθήκη Πατέντας
                            </button>
                        </div>

                        <!-- Selected Patents Display with Edit Options -->
                        @if (SelectedPatents.Any())
                        {
                            <div class="selected-patents mt-3">
                                <h6 class="mb-3" style="color: darkblue;">
                                    → <i class="fa-regular fa-lightbulb"></i> Επιλεγμένες Πατέντες:
                                </h6>
                                @foreach (var patent in SelectedPatents)
                                {
                                    var isEditing = IsPatentEditing(patent);
                                    <div class="patent-item bg-light p-3 mb-3 rounded position-relative">
                                        <!-- Patent Header -->
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h6 class="mb-0" style="font-weight: bold; color: red;">@patent.ResearchGroup_Patent_PatentTitle</h6>
                                            <!-- Status badge -->
                                            <span class="badge @(patent.ResearchGroup_Patent_PatentStatus == "Ενεργή" ? "bg-success" : "bg-secondary")">
                                                @patent.ResearchGroup_Patent_PatentStatus
                                            </span>
                                        </div>

                                        @if (isEditing)
                                        {
                                            <div class="patent-edit-form bg-white p-3 rounded border">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label><strong>URL Πατέντας</strong></label>
                                                            <InputText @bind-Value="patent.ResearchGroup_Patent_PatentURL" class="form-control" />
                                                        </div>

                                                        <div class="form-group">
                                                            <label><strong>Τίτλος Πατέντας</strong></label>
                                                            <InputText @bind-Value="patent.ResearchGroup_Patent_PatentTitle" class="form-control" />
                                                        </div>

                                                        <div class="form-group">
                                                            <label><strong>DOI Πατέντας</strong></label>
                                                            <InputText @bind-Value="patent.ResearchGroup_Patent_PatentDOI" class="form-control" />
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label><strong>Τύπος Πατέντας</strong></label>
                                                            <InputSelect @bind-Value="patent.ResearchGroup_Patent_PatentType" class="form-control">
                                                                <option value="">- Επιλέξτε Τύπο Πατέντας -</option>
                                                                <option value="US_Patent">US Patent</option>
                                                                <option value="EU_Patent">EU Patent</option>
                                                                <option value="Global_Patent">Global Patent</option>
                                                                <option value="Greek_Patent">Greek Patent</option>
                                                            </InputSelect>
                                                        </div>

                                                        <div class="form-group">
                                                            <label><strong>Κατάσταση Πατέντας</strong></label>
                                                            <InputSelect @bind-Value="patent.ResearchGroup_Patent_PatentStatus" class="form-control">
                                                                <option value="">- Επιλέξτε Κατάσταση -</option>
                                                                <option value="Ενεργή">Ενεργή</option>
                                                                <option value="Ανενεργή">Ανενεργή</option>
                                                            </InputSelect>
                                                        </div>

                                                        <div class="form-group">
                                                            <label><strong>Περιγραφή Πατέντας</strong></label>
                                                            <InputTextArea @bind-Value="patent.ResearchGroup_Patent_PatentDescription"
                                                                           class="form-control" rows="5" />
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Buttons at bottom right for edit form -->
                                                <div class="d-flex justify-content-end align-items-center mt-3 pt-3 border-top">
                                                    <button type="button" class="btn btn-success btn-sm me-2"
                                                            @onclick="() => SavePatentEdit(patent)">
                                                        <i class="fas fa-save me-1"></i> Αποθήκευση
                                                    </button>
                                                    <button type="button" class="btn btn-secondary btn-sm"
                                                            @onclick="() => TogglePatentEdit(patent)">
                                                        <i class="fas fa-times me-1"></i> Ακύρωση
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="patent-info">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <p>
                                                            <strong>URL: </strong>
                                                            @if (!string.IsNullOrEmpty(patent.ResearchGroup_Patent_PatentURL))
                                                            {
                                                                <a href="@patent.ResearchGroup_Patent_PatentURL" target="_blank" rel="noopener noreferrer" class="text-break">
                                                                    @patent.ResearchGroup_Patent_PatentURL
                                                                </a>
                                                            }
                                                            else
                                                            {
                                                                <span>Δεν υπάρχει URL</span>
                                                            }
                                                        </p>
                                                        <p><strong>DOI:</strong> @(patent.ResearchGroup_Patent_PatentDOI ?? "Δεν υπάρχει DOI")</p>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <p><strong>Τύπος:</strong> @(patent.ResearchGroup_Patent_PatentType ?? "Δεν έχει οριστεί")</p>
                                                        <p><strong>Κατάσταση:</strong> @(patent.ResearchGroup_Patent_PatentStatus ?? "Δεν έχει οριστεί")</p>
                                                        @if (!string.IsNullOrEmpty(patent.ResearchGroup_Patent_PatentDescription))
                                                        {
                                                            <p><strong>Περιγραφή:</strong> @patent.ResearchGroup_Patent_PatentDescription</p>
                                                        }
                                                    </div>
                                                </div>

                                                <!-- Buttons at bottom right for view mode -->
                                                <div class="d-flex justify-content-end align-items-center mt-3 pt-3 border-top">
                                                    <button type="button" class="btn btn-sm btn-info me-2"
                                                            @onclick="() => TogglePatentEdit(patent)">
                                                        <i class="fas fa-edit me-1"></i> Επεξεργασία
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-danger"
                                                            @onclick="() => RemovePatent(patent)">
                                                        <i class="fas fa-trash me-1"></i> Διαγραφή
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>

                        <h4>7) Εταιρεία Spin-Off</h4>
                            <div class="researchspinoffcompany-selection-container">

                                <div class="form-group">
                                    <label><strong>Όνομα Εταιρείας</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-building"></i></span>
                                        <InputText @bind-Value="newResearchGroup_SpinOff.ResearchGroup_SpinOff_CompanyTitle" class="form-control"
                                                   placeholder="Εισάγετε το Όνομα της Εταιρείας" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label><strong>ΑΦΜ Εταιρείας</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-id-card"></i></span>
                                        <InputText @bind-Value="newResearchGroup_SpinOff.ResearchGroup_SpinOff_CompanyAFM" class="form-control"
                                                   placeholder="Εισάγετε το ΑΦΜ (9 ψηφία)" maxlength="9" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label><strong>Περιγραφή Εταιρείας</strong></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                        <InputTextArea @bind-Value="newResearchGroup_SpinOff.ResearchGroup_SpinOff_CompanyDescription" class="form-control"
                                                       placeholder="Εισάγετε την Περιγραφή της Εταιρείας" rows="3" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <button type="button" class="btn btn-primary" @onclick="AddSpinOffCompany">
                                        <i class="fas fa-plus"></i> Προσθήκη Spin-Off Εταιρείας
                                    </button>
                                </div>

                                @if (SelectedSpinOffCompanies.Any())
                                {
                                    <div class="selected-spinoffs mt-3">
                                        <h6 class="mb-3" style="color: darkblue;">
                                            → <i class="fa-regular fa-square-caret-right"></i> Εταιρεία:
                                        </h6>
                                        @foreach (var spinoff in SelectedSpinOffCompanies)
                                        {
                                            var isEditing = IsSpinOffEditing(spinoff);
                                            <div class="spinoff-item bg-light p-3 mb-3 rounded position-relative">
                                                <!-- Spin-off Header -->
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <h6 class="mb-0" style="font-weight: bold; color: red;">@spinoff.ResearchGroup_SpinOff_CompanyTitle</h6>
                                                </div>

                                                @if (isEditing)
                                                {
                                                    <div class="spinoff-edit-form bg-white p-3 rounded border">
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label><strong>Όνομα Εταιρείας</strong></label>
                                                                    <InputText @bind-Value="spinoff.ResearchGroup_SpinOff_CompanyTitle" class="form-control" />
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label><strong>ΑΦΜ Εταιρείας</strong></label>
                                                                    <InputText @bind-Value="spinoff.ResearchGroup_SpinOff_CompanyAFM" class="form-control"
                                                                               maxlength="9" />
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="form-group">
                                                            <label><strong>Περιγραφή Εταιρείας</strong></label>
                                                            <InputTextArea @bind-Value="spinoff.ResearchGroup_SpinOff_CompanyDescription"
                                                                           class="form-control" rows="3" />
                                                        </div>

                                                        <!-- Buttons at bottom right for edit form -->
                                                        <div class="d-flex justify-content-end align-items-center mt-3 pt-3 border-top">
                                                            <button type="button" class="btn btn-success btn-sm me-2"
                                                                    @onclick="() => SaveSpinOffEdit(spinoff)">
                                                                <i class="fas fa-save me-1"></i> Αποθήκευση
                                                            </button>
                                                            <button type="button" class="btn btn-secondary btn-sm"
                                                                    @onclick="() => ToggleSpinOffEdit(spinoff)">
                                                                <i class="fas fa-times me-1"></i> Ακύρωση
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="spinoff-info">
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <p><strong>ΑΦΜ:</strong> @(spinoff.ResearchGroup_SpinOff_CompanyAFM ?? "Δεν υπάρχει ΑΦΜ")</p>
                                                            </div>
                                                            <div class="col-md-6">
                                                                @if (!string.IsNullOrEmpty(spinoff.ResearchGroup_SpinOff_CompanyDescription))
                                                                {
                                                                    <p><strong>Περιγραφή:</strong> @spinoff.ResearchGroup_SpinOff_CompanyDescription</p>
                                                                }
                                                            </div>
                                                        </div>

                                                        <!-- Buttons at bottom right for view mode -->
                                                        <div class="d-flex justify-content-end align-items-center mt-3 pt-3 border-top">
                                                            <button type="button" class="btn btn-sm btn-info me-2"
                                                                    @onclick="() => ToggleSpinOffEdit(spinoff)">
                                                                <i class="fas fa-edit me-1"></i> Επεξεργασία
                                                            </button>
                                                            <button type="button" class="btn btn-sm btn-danger"
                                                                    @onclick="() => RemoveSpinOffCompany(spinoff)">
                                                                <i class="fas fa-trash me-1"></i> Διαγραφή
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }

                            </div>

                    </div>
<!---------------------------------------------------------------------------------------------------- Key Personnel Info END  -------------------------------------------------------------------------------------------------------------------->
                </div>


                    <br />
            <!-- Validation Error Message -->
            @if (showResearchGroupValidationError)
            {
                <div class="alert alert-danger" role="alert">
                    <strong>Σφάλμα:</strong> @researchGroupErrorMessage
                </div>
            }

            <!-- Terms and Conditions -->
            <div class="form-check" @onclick="ShowMessage">
                <CustomCheckbox @bind-Value="agreeTerms" @ref="customCheckbox" />
                <label class="form-check-label" for="customCheckboxId">
                    Έχω διαβάσει και αποδέχομαι τους
                    <a @onclick="ShowUserAgreementModal" style="text-decoration: underline; color: blue;">όρους συμμετοχής</a>
                    στην πλατφόρμα
                </label>
            </div>
            <br />

            @if (showMessage)
            {
                <div class="alert alert-warning" role="alert">
                    Πατήστε πρώτα παραπάνω στους <span style="color: blue;">όρους συμμετοχής</span> και στην συνέχεια επιλέξτε Αποδοχή Όρων για να συνεχίσετε!
                </div>
            }

            <!-- Submit Buttons -->
            <div class="form-check">
                @if (!isRegistered)
                {
                    <button type="submit" class="btn btn-submit1" disabled="@(!agreeTerms)">Αποθήκευση</button>
                }
                else
                {
                    <button type="button" class="btn btn-submit1" disabled="@(!agreeTerms)" @onclick="UpdateResearchGroupRegistration">Αποθήκευση Ανανέωσης</button>
                }
                <UserAgreementModal OnAgree="AgreeToTerms" OnDecline="DeclineTerms" />
            </div>

            <!-- Success Messages -->
            @if (saved)
            {
                <br />
                <p class="good-message"><strong>Η Εγγραφή της Ερευνητικής Ομάδας ολοκληρώθηκε επιτυχώς!</strong></p>
            }

            @if (updated)
            {
                <p class="good-message"><strong>Η Ανανέωση των στοιχείων της Ερευνητικής Ομάδας ολοκληρώθηκε επιτυχώς!</strong></p>
            }

            <!-- Error Messages -->
            @if (error && !showResearchGroupValidationError)
            {
                <div class="alert alert-danger" role="alert">
                    <p>...Κάτι πήγε Λάθος!</p>
                </div>
            }
            <br />
            <br />
        </EditForm>
    }

</div>




@inject GoogleScholarService _googleScholarService;
@inject InternshipEmailService InternshipEmailService;
@inject ICordisService CordisService;
@inject IJSRuntime JS;
@inject AppDbContext Context; 
@code {

    private string researchGroupNameInputClass = "";
    private string researchGroupSchoolInputClass = "";
    private string researchGroupDepartmentInputClass = "";
    private string researchGroupContactEmailInputClass = "";
    private string researchGroupTelephoneInputClass = "";
    private string researchGroupDateInputClass = "";
    private string researchGroupAddressInputClass = "";
    private string researchGroupAreasInputClass = "";
    private string researchGroupAttachmentInputClass = "";
    private bool showResearchGroupValidationError = false;
    private string researchGroupErrorMessage = "";

    // In your code-behind (e.g., ResearchGroup.razor.cs)
    private Dictionary<string, List<string>> schoolDepartments = new()
    {
        ["ΑΓΡΟΤΙΚΗΣ ΑΝΑΠΤΥΞΗΣ, ΔΙΑΤΡΟΦΗΣ ΚΑΙ ΑΕΙΦΟΡΙΑΣ"] = new List<string>
        {
            "ΤΜΗΜΑ ΑΓΡΟΤΙΚΗΣ ΑΝΑΠΤΥΞΗΣ, ΑΓΡΟΔΙΑΤΡΟΦΗΣ ΚΑΙ ΔΙΑΧΕΙΡΙΣΗΣ ΦΥΣΙΚΩΝ ΠΟΡΩΝ"
        },
        ["ΕΠΙΣΤΗΜΩΝ ΑΓΩΓΗΣ"] = new List<string>
        {
            "ΠΑΙΔΑΓΩΓΙΚΟ ΤΜΗΜΑ ΔΗΜΟΤΙΚΗΣ ΕΚΠΑΙΔΕΥΣΗΣ",
            "ΤΜΗΜΑ ΕΚΠΑΙΔΕΥΣΗΣ ΚΑΙ ΑΓΩΓΗΣ ΣΤΗΝ ΠΡΟΣΧΟΛΙΚΗ ΗΛΙΚΙΑ"
        },
        ["ΕΠΙΣΤΗΜΩΝ ΥΓΕΙΑΣ"] = new List<string>
        {
            "ΤΜΗΜΑ ΙΑΤΡΙΚΗΣ",
            "ΤΜΗΜΑ ΝΟΣΗΛΕΥΤΙΚΗΣ",
            "ΤΜΗΜΑ ΟΔΟΝΤΙΑΤΡΙΚΗΣ",
            "ΤΜΗΜΑ ΦΑΡΜΑΚΕΥΤΙΚΗΣ"
        },
        ["ΕΠΙΣΤΗΜΗΣ ΦΥΣΙΚΗΣ ΑΓΩΓΗΣ ΚΑΙ ΑΘΛΗΤΙΣΜΟΥ"] = new List<string>
        {
            "ΤΜΗΜΑ ΕΠΙΣΤΗΜΗΣ ΦΥΣΙΚΗΣ ΑΓΩΓΗΣ ΚΑΙ ΑΘΛΗΤΙΣΜΟΥ"
        },
        ["ΘΕΟΛΟΓΙΚΗ"] = new List<string>
        {
            "ΤΜΗΜΑ ΘΕΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΚΟΙΝΩΝΙΚΗΣ ΘΕΟΛΟΓΙΑΣ ΚΑΙ ΘΡΗΣΚΕΙΟΛΟΓΙΑΣ"
        },
        ["ΘΕΤΙΚΩΝ ΕΠΙΣΤΗΜΩΝ"] = new List<string>
        {
            "ΤΜΗΜΑ ΑΕΡΟΔΙΑΣΤΗΜΙΚΗΣ ΕΠΙΣΤΗΜΗΣ ΚΑΙ ΤΕΧΝΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΒΙΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΓΕΩΛΟΓΙΑΣ ΚΑΙ ΓΕΩΠΕΡΙΒΑΛΛΟΝΤΟΣ",
            "ΤΜΗΜΑ ΙΣΤΟΡΙΑΣ ΚΑΙ ΦΙΛΟΣΟΦΙΑΣ ΤΗΣ ΕΠΙΣΤΗΜΗΣ",
            "ΤΜΗΜΑ ΜΑΘΗΜΑΤΙΚΩΝ",
            "ΤΜΗΜΑ ΠΛΗΡΟΦΟΡΙΚΗΣ ΚΑΙ ΤΗΛΕΠΙΚΟΙΝΩΝΙΩΝ",
            "ΤΜΗΜΑ ΤΕΧΝΟΛΟΓΙΩΝ ΨΗΦΙΑΚΗΣ ΒΙΟΜΗΧΑΝΙΑΣ",
            "ΤΜΗΜΑ ΦΥΣΙΚΗΣ",
            "ΤΜΗΜΑ ΧΗΜΕΙΑΣ"
        },
        ["ΝΟΜΙΚΗ"] = new List<string>
        {
            "ΝΟΜΙΚΗ ΣΧΟΛΗ"
        },
        ["ΟΙΚΟΝΟΜΙΚΩΝ ΚΑΙ ΠΟΛΙΤΙΚΩΝ ΕΠΙΣΤΗΜΩΝ"] = new List<string>
        {
            "ΤΜΗΜΑ ΔΙΑΧΕΙΡΙΣΗΣ ΛΙΜΕΝΩΝ ΚΑΙ ΝΑΥΤΙΛΙΑΣ",
            "ΤΜΗΜΑ ΕΠΙΚΟΙΝΩΝΙΑΣ ΚΑΙ ΜΕΣΩΝ ΜΑΖΙΚΗΣ ΕΝΗΜΕΡΩΣΗΣ",
            "ΤΜΗΜΑ ΟΙΚΟΝΟΜΙΚΩΝ ΕΠΙΣΤΗΜΩΝ",
            "ΤΜΗΜΑ ΠΟΛΙΤΙΚΗΣ ΕΠΙΣΤΗΜΗΣ ΚΑΙ ΔΗΜΟΣΙΑΣ ΔΙΟΙΚΗΣΗΣ",
            "ΤΜΗΜΑ ΤΟΥΡΚΙΚΩΝ ΣΠΟΥΔΩΝ ΚΑΙ ΣΥΓΧΡΟΝΩΝ ΑΣΙΑΤΙΚΩΝ ΣΠΟΥΔΩΝ",
            "ΤΜΗΜΑ ΔΙΟΙΚΗΣΗΣ ΕΠΙΧΕΙΡΗΣΕΩΝ ΚΑΙ ΟΡΓΑΝΙΣΜΩΝ",
            "ΤΜΗΜΑ ΚΟΙΝΩΝΙΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΨΗΦΙΑΚΩΝ ΤΕΧΝΩΝ ΚΑΙ ΚΙΝΗΜΑΤΟΓΡΑΦΟΥ"
        },
        ["ΦΙΛΟΣΟΦΙΚΗ"] = new List<string>
        {
            "ΠΑΙΔΑΓΩΓΙΚΟ ΤΜΗΜΑ ΔΕΥΤΕΡΟΒΑΘΜΙΑΣ ΕΚΠΑΙΔΕΥΣΗΣ",
            "ΤΜΗΜΑ ΑΓΓΛΙΚΗΣ ΓΛΩΣΣΑΣ ΚΑΙ ΦΙΛΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΓΑΛΛΙΚΗΣ ΓΛΩΣΣΑΣ ΚΑΙ ΦΙΛΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΓΕΡΜΑΝΙΚΗΣ ΓΛΩΣΣΑΣ ΚΑΙ ΦΙΛΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΘΕΑΤΡΙΚΩΝ ΣΠΟΥΔΩΝ",
            "ΤΜΗΜΑ ΙΣΠΑΝΙΚΗΣ ΓΛΩΣΣΑΣ ΚΑΙ ΦΙΛΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΙΣΤΟΡΙΑΣ ΚΑΙ ΑΡΧΑΙΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΙΤΑΛΙΚΗΣ ΓΛΩΣΣΑΣ ΚΑΙ ΦΙΛΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΜΟΥΣΙΚΩΝ ΣΠΟΥΔΩΝ",
            "ΤΜΗΜΑ ΡΩΣΙΚΗΣ ΓΛΩΣΣΑΣ ΚΑΙ ΦΙΛΟΛΟΓΙΑΣ ΚΑΙ ΣΛΑΒΙΚΩΝ ΣΠΟΥΔΩΝ",
            "ΤΜΗΜΑ ΦΙΛΟΛΟΓΙΑΣ",
            "ΤΜΗΜΑ ΦΙΛΟΣΟΦΙΑΣ",
            "ΤΜΗΜΑ ΨΥΧΟΛΟΓΙΑΣ"
        }
    };

    private List<string> schools = new();
    private List<string> departments = new();

    private string selectedProfessorDisplay { get; set; }

    private List<string> fundingFrameworks = new List<string>
    {
        "Horizon 2020 Framework Programme (H2020)",
        "Horizon Europe (HORIZON)",
        "Digital Europe Programme (DIGITAL)",
        "Connecting Europe Facility (CEF)",
        "Erasmus+ (ERASMUS+)",
        "Single Market Programme (SMP)",
        "European Defence Fund (EDF)",
        "Programme for the Environment and Climate Action (LIFE)",
        "Creative Europe Programme (CREA)",
        "Citizens, Equality, Rights and Values Programme (CERV)",
        "Programme for the Competitiveness of Enterprises and small and medium-sized enterprises (COSME)",
        "Promotion of Agricultural Products (AGRIP)",
        "EU4Health Programme (EU4H)",
        "Europe Direct (ED)",
        "Rights, Equality and Citizenship Programme (REC)",
        "3rd Health Programme (3HP)",
        "Internal Security Fund Police (ISFP)",
        "Euratom Research and Training Programme (EURATOM)",
        "Hercule III (HERC)",
        "European Defence Industrial Development Programme (EDIDP)",
        "Union Anti-fraud Programme (EUAF)",
        "EU Bodies and Agencies (EUBA)",
        "Research Fund for Coal & Steel (RFCS)",
        "Justice Programme (JUST)",
        "European Social Fund + (ESF)",
        "European Parliament (EP)",
        "Interregional Innovation Investments Instrument (I3)",
        "Pilot Projects and Preparation Actions (PPPA)",
        "EU External Action - Prospect (RELEX-PROSPECT)",
        "Asylum, Migration and Integration Fund (AMIF)",
        "Innovation Fund (INNOVFUND)",
        "Erasmus+ Programme (EPLUS)",
        "European Maritime, Fisheries and Aquaculture Fund (EMFAF)",
        "Internal Security Fund (ISF)",
        "Union Civil Protection Mechanism (UCPM)",
        "Social Prerogative and Specific Competencies Lines (SOCPL)",
        "Consumer Programme (CP)",
        "European Maritime and Fisheries Fund (EMFF)",
        "European Solidarity Corps (ESC)",
        "Programme for the Protection of the Euro against Counterfeiting (PERICLES IV)",
        "Europe For Citizens (EFC)",
        "Support for information measures relating to the common agricultural policy (IMCAP)",
        "Internal Security Fund Borders and Visa (ISFB)",
        "Border Management and Visa Policy Instrument (BMVI)",
        "Information Measures for the EU Cohesion policy (IMREG)",
        "European Statistics (ESTAT)",
        "Union Renewable Energy Financing Mechanism (RENEWFM)",
        "Just Transition Mechanism (JTM)",
        "Neighbourhood, Development and International Cooperation Instrument – Global Europe (NDICI)",
        "Technical assistance for ERDF, CF and JTF (ERDF-TA)",
        "EU External Action - eGrants (RELEX2027)",
        "Business and Consumer Surveys Programme (BCS)",
        "EU Aid Volunteers Programme (EUAID)",
        "Intra-Africa Academic Mobility Scheme (PANAF)"
    };

    public class SelectedArea
    {
        public string AreaName { get; set; } = string.Empty;
    }

    public class Skill
    {
        public string SkillName { get; set; } = string.Empty;
        public int Assessment { get; set; }
    }

    // Research Group Areas and Skills properties
    private string researchGroupAreasSearchTerm = string.Empty;
    private string researchGroupSkillSearchTerm = string.Empty;
    private List<Area> availableResearchGroupAreas = new();
    private List<string> availableResearchGroupSkills = new();
    private List<Area> filteredResearchGroupAreas = new();
    private List<string> filteredResearchGroupSkills = new();
    private List<SelectedArea> selectedResearchGroupAreas = new();
    private List<string> selectedResearchGroupSkills = new();
    private List<string> finalSelectedResearchGroupSkills = new();
    private List<Skill> selectedResearchGroupSkillsForAssessment = new();
    private HashSet<string> expandedResearchGroupAreas = new();

    private bool isManualRegistrationExpanded = false;
    private void ToggleManualRegistration()
    {
        isManualRegistrationExpanded = !isManualRegistrationExpanded;
    }
    private ResearchGroup_ResearchActions manualProject = new ResearchGroup_ResearchActions();
    private string manualKeywordsInput = "";

    public ResearchGroup newResearchGroup = new ResearchGroup();

    //Research Actions
    private List<ResearchGroup_ResearchActions> existingProjects = new List<ResearchGroup_ResearchActions>();
    private Dictionary<int, bool> projectEditingStates = new Dictionary<int, bool>();

    //Patents
    private List<ResearchGroup_Patents> SelectedPatents = new List<ResearchGroup_Patents>();
    private ResearchGroup_Patents newResearchGroup_Patents = new ResearchGroup_Patents();
    private Dictionary<int, bool> patentEditingStates = new Dictionary<int, bool>();

    //Spin-Off Company
    private List<ResearchGroup_SpinOffCompany> SelectedSpinOffCompanies = new List<ResearchGroup_SpinOffCompany>();
    private ResearchGroup_SpinOffCompany newResearchGroup_SpinOff = new ResearchGroup_SpinOffCompany();
    private Dictionary<int, bool> spinOffEditingStates = new Dictionary<int, bool>();

    private bool showAttachmentAlert = false;
    private bool hasReadAsResearchGroupPermission = false;
    public bool saved = false;
    public bool error = false;
    private bool showValidationError = false;
    private bool isRegistered;
    private string researchGroupName = "Anonymous Research Group";
    private string ResearchGroupUniversityReadOnlyName = "Εθνικό & Καποδιστριακό Πανεπιστήμιο Αθηνών";
    private string ResearchGroupUniversitySchoolReadOnlyName = "Σχολή Θετικών Επιστημών";
    private string selectedDepartment = "";
    private string FileErrorMessage { get; set; }
    public List<string> courses = new List<string>(); 
    private Dictionary<string, bool> selectedCoursesDictionary = new Dictionary<string, bool>();
    private bool showMessage = false;
    private CustomCheckbox customCheckbox;
    private bool agreeTerms = false;
    public bool updated = false;
    private string currentProfessorSearch = string.Empty;
    private string searchNameSurnameAsResearchGroupToFindProfessor = string.Empty;
    private List<string> professorNameSurnameSuggestions = new();
    private List<string> SelectedProfessors = new();
    private bool hasSearched = false;

    // Professor details to autocomplete after choosing a Professor 
    public string? ResearchGroupProfessorName { get; set; }
    public string? ResearchGroupProfessorSurname { get; set; }
    public string? ResearchGroupProfessorEmail { get; set; }
    public string? ResearchGroupProfessorVathmida { get; set; }
    public string? ResearchGroupProfessorUnivesrity { get; set; }
    public string? ResearchGroupProfessorSchool { get; set; }
    public string? ResearchGroupProfessorUniversityDepartment { get; set; }
    public string? ResearchGroupProfessorGoogleScholarProfile { get; set; }
    public string? ResearchGroupProfessorLinkedInProfile { get; set; }
    private List<ProfessorDetails> SelectedProfessorDetails { get; set; } = new();
    public class ProfessorDetails
    {
        public string Name { get; set; } = string.Empty;
        public string Surname { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Vathmida { get; set; } = string.Empty;
        public string University { get; set; } = string.Empty;
        public string School { get; set; } = string.Empty;
        public string Department { get; set; } = string.Empty;
        public string GoogleScholarProfile { get; set; } = string.Empty;
        public string LinkedInProfile { get; set; } = string.Empty;
        public DateTime RegistrationDate { get; set; } = DateTime.Now;
        public bool IsExpanded { get; set; } = false;
        public string Role { get; set; } = string.Empty;
        public string PersonalWebsite { get; set; } = string.Empty;

    }

    private string currentStudentSearch = string.Empty;
    private List<string> studentNameSurnameSuggestions = new();
    private bool hasSearchedStudent = false;
    public List<string> SelectedStudents { get; set; } = new();
    public List<StudentDetails> SelectedStudentDetails { get; set; } = new();
    public class StudentDetails
    {
        public string LevelOfStudies { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Surname { get; set; } = string.Empty;
        public string University { get; set; } = string.Empty;
        public string Department { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public DateTime RegistrationDate { get; set; } = DateTime.Now;
        public bool IsExpanded { get; set; } = false;
        public string PersonalWebsite { get; set; } = string.Empty;
        public string LinkedInProfile { get; set; } = string.Empty;
        public string GoogleScholarProfile { get; set; } = string.Empty; 
    }

    public List<ResearchGroup_Publications> MemberPublications { get; set; } = new();
    private bool isLoadingPublications = false;
    private string publicationsErrorMessage = string.Empty;
    private Dictionary<string, int> CurrentPublicationPages = new();
    private int PublicationsPerPage { get; set; } = 5; // Default value is 5
    private bool showInvitationPromptWhenSendInvitationEmailToStudent = true;
    private bool showInvitationPromptWhenSendInvitationEmailToProfessor = true;


    @*
    private List<string> departments = new List<string>
    {
        "Αγροτικής Ανάπτυξης, Αγροδιατροφής & Διαχείρισης Φυσικών Πόρων",
        "Τεχνολογιών Ψηφιακής Βιομηχανίας", //117
        "Αεροδιαστημικής Επιστήμης & Τεχνολογίας", //116
        "Διαχείρισης Λιμένων & Ναυτιλίας",
        "Ψηφιακών Τεχνών & Κινηματογράφου",
    };
    *@

    private void InitializeSelectedCourses()
    {
        selectedCoursesDictionary.Clear();
        foreach (var course in courses)
        {
            selectedCoursesDictionary[course] = false;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        schools = schoolDepartments.Keys.ToList();
        departments = new List<string>();

        newResearchGroup.ResearchGroupUniversity = ResearchGroupUniversityReadOnlyName;
        newResearchGroup.ResearchGroupSchool = string.Empty;
        newResearchGroup.ResearchGroupUniversityDepartment = string.Empty;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        using var dbContext = await DbContextFactory.CreateDbContextAsync();

        var researchGroupEmail = user.Identity.Name;
        var researchGroupFromDb = await dbContext.ResearchGroups.FirstOrDefaultAsync(s => s.ResearchGroupEmail == researchGroupEmail);

        InitializeManualProject();

        availableResearchGroupAreas = await dbContext.Areas.ToListAsync();
        await LoadAvailableResearchGroupSkills();

        if (researchGroupFromDb != null)
        {
            isRegistered = true;
            newResearchGroup = researchGroupFromDb;

            if (!string.IsNullOrEmpty(newResearchGroup.ResearchGroupSchool) &&
                schoolDepartments.ContainsKey(newResearchGroup.ResearchGroupSchool))
            {
                departments = schoolDepartments[newResearchGroup.ResearchGroupSchool];
            }

            await LoadExistingMembers();
            await LoadPublications();
            await LoadExistingPatents();
            await LoadExistingSpinOffCompanies();
            await LoadExistingProjects();
        }
        else
        {
            isRegistered = false;
            SelectedPatents = new List<ResearchGroup_Patents>();
            patentEditingStates.Clear();

            SelectedSpinOffCompanies = new List<ResearchGroup_SpinOffCompany>();
            spinOffEditingStates.Clear();
        }

        if (user.Identity.IsAuthenticated)
        {
            Console.WriteLine($"Authentication Type: {user.Identity.AuthenticationType}");

            foreach (var claim in user.Claims)
            {
                Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
            }

            var roleClaim = user.FindFirst("http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

            if (roleClaim != null)
            {
                researchGroupName = user.Identity?.Name ?? "Anonymous Research Group";
                newResearchGroup.ResearchGroupEmail = researchGroupName;
                var userRole = roleClaim.Value;
                Console.WriteLine($"User Role: {userRole}");
                Console.WriteLine($"User Email: {researchGroupName}");

                hasReadAsResearchGroupPermission = userRole == "Research Group";
            }
            Console.WriteLine($"User Has Research Group Permission: {hasReadAsResearchGroupPermission}");
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
            hasReadAsResearchGroupPermission = false;
        }

        // Load existing areas and skills for Research Group
        if (newResearchGroup != null && newResearchGroup.Id != 0)
        {
            // Load the areas already assigned to the research group
            var existingResearchGroupAreas = await dbContext.ResearchGroups
                .Where(rg => rg.Id == newResearchGroup.Id)
                .Select(rg => rg.ResearchGroupAreas)
                .FirstOrDefaultAsync();

            var areaList = existingResearchGroupAreas?
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(a => a.Trim())
                .ToList() ?? new List<string>();

            selectedResearchGroupAreas = areaList
                .Select(area => new SelectedArea { AreaName = area })
                .ToList();

            availableResearchGroupAreas = availableResearchGroupAreas
                .Where(a => !selectedResearchGroupAreas.Any(sa => sa.AreaName == a.AreaName))
                .ToList();

            // Load the skills already assigned to the research group
            var existingResearchGroupSkills = await dbContext.ResearchGroups
                .Where(rg => rg.Id == newResearchGroup.Id)
                .Select(rg => rg.ResearchGroupSkills)
                .FirstOrDefaultAsync();

            var skillList = existingResearchGroupSkills?
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim())
                .ToList() ?? new List<string>();

            selectedResearchGroupSkillsForAssessment = skillList
                .Select(skill => new Skill { SkillName = skill, Assessment = 1 })
                .ToList();

            selectedResearchGroupSkills = new List<string>(selectedResearchGroupSkillsForAssessment.Select(s => s.SkillName));

            availableResearchGroupSkills = availableResearchGroupSkills
                .Where(s => !selectedResearchGroupSkills.Contains(s))
                .ToList();

            var existingResearchGroupKeywords = await dbContext.ResearchGroups
                .Where(rg => rg.Id == newResearchGroup.Id)
                .Select(rg => rg.ResearchGroupKeywords)
                .FirstOrDefaultAsync();

            ResearchGroupKeywords = existingResearchGroupKeywords ?? "";
        }

        filteredResearchGroupAreas = availableResearchGroupAreas.ToList();
        filteredResearchGroupSkills = availableResearchGroupSkills.ToList();

    }

    private void InitializeManualProject()
    {
        manualProject = new ResearchGroup_ResearchActions
            {
                ResearchGroup_ProjectStartDate = DateTime.Today,
                ResearchGroup_ProjectEndDate = DateTime.Today,
                ResearchGroup_ProjectStatus = "OnGoing" // Set default to "Εν Ενεργεία"
            };
    }


    private async Task SubmitResearchGroupForm()
    {
        error = false;
        saved = false;
        updated = false;
        showValidationError = false;
        showResearchGroupValidationError = false;

        // Reset all input classes
        ResetResearchGroupValidationClasses();

        // List to track missing mandatory fields
        var missingFields = new List<string>();

        // Validate ONLY mandatory fields
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupName))
        {
            researchGroupNameInputClass = "shake shake-input";
            missingFields.Add("Όνομα Ερευνητικής Ομάδας");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupSchool))
        {
            researchGroupSchoolInputClass = "shake shake-input";
            missingFields.Add("Σχολή");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupUniversityDepartment))
        {
            researchGroupDepartmentInputClass = "shake shake-input";
            missingFields.Add("Τμήμα");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupContactEmail))
        {
            researchGroupContactEmailInputClass = "shake shake-input";
            missingFields.Add("Email Επικοινωνίας");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupPostalAddress))
        {
            researchGroupAddressInputClass = "shake shake-input";
            missingFields.Add("Διεύθυνση");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupTelephoneNumber))
        {
            researchGroupTelephoneInputClass = "shake shake-input";
            missingFields.Add("Τηλέφωνο");
        }
        if (newResearchGroup.ResearchGroup_DateOfCreation == default)
        {
            researchGroupDateInputClass = "shake shake-input";
            missingFields.Add("Ημερομηνία Ίδρυσης");
        }
        if (selectedResearchGroupAreas.Count == 0)
        {
            researchGroupAreasInputClass = "shake shake-input";
            missingFields.Add("Περιοχές Ερευνητικού Ενδιαφέροντος");
        }

        // Validate phone number format
        if (!string.IsNullOrEmpty(newResearchGroup.ResearchGroupTelephoneNumber) &&
            (newResearchGroup.ResearchGroupTelephoneNumber.Length != 10 || !Regex.IsMatch(newResearchGroup.ResearchGroupTelephoneNumber, @"^\d{10}$")))
        {
            researchGroupTelephoneInputClass = "shake shake-input";
            if (!missingFields.Contains("Τηλέφωνο"))
            {
                missingFields.Add("Τηλέφωνο (πρέπει να είναι 10 ψηφία)");
            }
        }

        // Validate email format
        if (!string.IsNullOrEmpty(newResearchGroup.ResearchGroupContactEmail) &&
            !Regex.IsMatch(newResearchGroup.ResearchGroupContactEmail, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            researchGroupContactEmailInputClass = "shake shake-input";
            if (!missingFields.Contains("Email Επικοινωνίας"))
            {
                missingFields.Add("Email Επικοινωνίας (μη έγκυρη μορφή)");
            }
        }

        // Check if any mandatory field is empty
        if (missingFields.Count > 0)
        {
            error = true;
            showResearchGroupValidationError = true;
            researchGroupErrorMessage = $"Συμπληρώστε τα ακόλουθα υποχρεωτικά πεδία: {string.Join(", ", missingFields)}";
            return;
        }

        // Check for duplicate entries only for new registration
        if (!isRegistered)
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var existingResearchGroup = await dbContext.ResearchGroups
                .FirstOrDefaultAsync(rg => rg.ResearchGroupEmail == newResearchGroup.ResearchGroupEmail);

            if (existingResearchGroup != null)
            {
                error = true;
                showResearchGroupValidationError = true;
                researchGroupErrorMessage = "Υπάρχει ήδη ερευνητική ομάδα με αυτό το email.";
                return;
            }
        }

        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            using var transaction = await dbContext.Database.BeginTransactionAsync();

            try
            {
                // Set Areas and Skills
                newResearchGroup.ResearchGroupAreas = string.Join(",", selectedResearchGroupAreas.Select(sa => sa.AreaName));
                newResearchGroup.ResearchGroupSkills = string.Join(",", selectedResearchGroupSkills);
                newResearchGroup.ResearchGroupKeywords = ResearchGroupKeywords;

                var existingResearchGroup = await dbContext.ResearchGroups
                    .FirstOrDefaultAsync(rg => rg.ResearchGroupEmail == newResearchGroup.ResearchGroupEmail);

                string researchGroupEmail = newResearchGroup.ResearchGroupEmail;

                if (existingResearchGroup != null)
                {
                    // Update case
                    dbContext.Entry(existingResearchGroup).CurrentValues.SetValues(newResearchGroup);
                    newResearchGroup = existingResearchGroup;

                    await HandleMemberUpdates(dbContext, researchGroupEmail);
                    await HandlePublicationUpdates(dbContext, researchGroupEmail);
                    await HandlePatentUpdates(dbContext, researchGroupEmail);
                    await HandleSpinOffUpdates(dbContext, researchGroupEmail);
                    await HandleProjectUpdates(dbContext, researchGroupEmail);

                    updated = true;
                }
                else
                {
                    // Set unique ID
                    newResearchGroup.ResearchGroup_UniqueID = "RG_" + HashingHelper.HashString(newResearchGroup.ResearchGroupEmail);

                    // New registration case
                    dbContext.ResearchGroups.Add(newResearchGroup);
                    await dbContext.SaveChangesAsync();

                    await HandleMemberUpdates(dbContext, researchGroupEmail);
                    await HandlePublicationUpdates(dbContext, researchGroupEmail);
                    await HandlePatentUpdates(dbContext, researchGroupEmail);
                    await HandleSpinOffUpdates(dbContext, researchGroupEmail);
                    await HandleProjectUpdates(dbContext, researchGroupEmail);

                    saved = true;
                }

                await dbContext.SaveChangesAsync();
                await transaction.CommitAsync();
                error = false;

                // Reset validation classes after success
                await Task.Delay(3000);
                ResetResearchGroupValidationClasses();
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                throw;
            }
        }
        catch (Exception ex)
        {
            error = true;
            showResearchGroupValidationError = true;
            researchGroupErrorMessage = "Σφάλμα κατά την αποθήκευση. Παρακαλώ δοκιμάστε ξανά.";
            Console.WriteLine($"Error saving research group: {ex.Message}");
        }

        // Only navigate if we actually saved/updated
        if (saved || updated)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task HandleMemberUpdates(AppDbContext dbContext, string researchGroupEmail)
    {
        // Get current member emails
        var currentProfessorEmails = SelectedProfessorDetails.Select(p => p.Email).ToList();
        var currentStudentEmails = SelectedStudentDetails.Select(s => s.Email).ToList();
        var allCurrentMemberEmails = currentProfessorEmails.Concat(currentStudentEmails).ToList();

        // Handle professors
        var existingProfessors = await dbContext.ResearchGroup_Professors
            .Where(rp => rp.PK_ResearchGroupEmail == researchGroupEmail)
            .ToListAsync();

        // Remove deselected professors
        var professorsToRemove = existingProfessors
            .Where(ep => !currentProfessorEmails.Contains(ep.PK_ProfessorEmail))
            .ToList();

        if (professorsToRemove.Any())
        {
            dbContext.ResearchGroup_Professors.RemoveRange(professorsToRemove);

            // Remove publications for removed professors
            var professorEmailsToRemove = professorsToRemove.Select(p => p.PK_ProfessorEmail).ToList();
            var publicationsToRemove = await dbContext.ResearchGroup_Publications
                .Where(p => p.PK_ResearchGroupEmail == researchGroupEmail &&
                           professorEmailsToRemove.Contains(p.PK_ResearchGroupMemberEmail))
                .ToListAsync();

            if (publicationsToRemove.Any())
            {
                dbContext.ResearchGroup_Publications.RemoveRange(publicationsToRemove);
            }
        }

        // Add/update professors with roles
        var existingProfessorEmails = existingProfessors.Select(ep => ep.PK_ProfessorEmail).ToList();
        foreach (var professor in SelectedProfessorDetails)
        {
            if (!existingProfessorEmails.Contains(professor.Email))
            {
                // Add new professor with role
                dbContext.ResearchGroup_Professors.Add(new ResearchGroup_Professors
                    {
                        PK_ResearchGroupEmail = researchGroupEmail,
                        PK_ProfessorEmail = professor.Email,
                        DateOfRegistrationOnResearchGroup_ForProfessorMember = professor.RegistrationDate,
                        PK_ProfessorRole = professor.Role
                    });
            }
            else
            {
                // Update existing professor's role and registration date
                var existingProf = existingProfessors.FirstOrDefault(ep => ep.PK_ProfessorEmail == professor.Email);
                if (existingProf != null)
                {
                    existingProf.PK_ProfessorRole = professor.Role;
                    existingProf.DateOfRegistrationOnResearchGroup_ForProfessorMember = professor.RegistrationDate;
                }
            }
        }

        // Handle students
        var existingStudents = await dbContext.ResearchGroup_NonFacultyMembers
            .Where(rnf => rnf.PK_ResearchGroupEmail == researchGroupEmail)
            .ToListAsync();

        // Remove deselected students
        var studentsToRemove = existingStudents
            .Where(es => !currentStudentEmails.Contains(es.PK_NonFacultyMemberEmail))
            .ToList();

        if (studentsToRemove.Any())
        {
            dbContext.ResearchGroup_NonFacultyMembers.RemoveRange(studentsToRemove);

            // Remove publications for removed students
            var studentEmailsToRemove = studentsToRemove.Select(s => s.PK_NonFacultyMemberEmail).ToList();
            var publicationsToRemove = await dbContext.ResearchGroup_Publications
                .Where(p => p.PK_ResearchGroupEmail == researchGroupEmail &&
                           studentEmailsToRemove.Contains(p.PK_ResearchGroupMemberEmail))
                .ToListAsync();

            if (publicationsToRemove.Any())
            {
                dbContext.ResearchGroup_Publications.RemoveRange(publicationsToRemove);
            }
        }

        // Add/update students with roles
        var existingStudentEmails = existingStudents.Select(es => es.PK_NonFacultyMemberEmail).ToList();
        foreach (var student in SelectedStudentDetails)
        {
            if (!existingStudentEmails.Contains(student.Email))
            {
                // Add new student with role
                dbContext.ResearchGroup_NonFacultyMembers.Add(new ResearchGroup_NonFacultyMembers
                    {
                        PK_ResearchGroupEmail = researchGroupEmail,
                        PK_NonFacultyMemberEmail = student.Email,
                        DateOfRegistrationOnResearchGroup_ForNonFacultyMember = student.RegistrationDate,
                        PK_NonFacultyMemberLevelOfStudies = student.Role
                    });
            }
            else
            {
                // Update existing student's role and registration date
                var existingStudent = existingStudents.FirstOrDefault(es => es.PK_NonFacultyMemberEmail == student.Email);
                if (existingStudent != null)
                {
                    existingStudent.PK_NonFacultyMemberLevelOfStudies = student.Role;
                    existingStudent.DateOfRegistrationOnResearchGroup_ForNonFacultyMember = student.RegistrationDate;
                }
            }
        }

        // Remove publications for any members no longer in either list
        var allExistingMemberEmails = existingProfessors.Select(p => p.PK_ProfessorEmail)
            .Concat(existingStudents.Select(s => s.PK_NonFacultyMemberEmail))
            .ToList();

        var membersToCleanup = allExistingMemberEmails.Except(allCurrentMemberEmails).ToList();
        if (membersToCleanup.Any())
        {
            var orphanedPublications = await dbContext.ResearchGroup_Publications
                .Where(p => p.PK_ResearchGroupEmail == researchGroupEmail &&
                           membersToCleanup.Contains(p.PK_ResearchGroupMemberEmail))
                .ToListAsync();

            if (orphanedPublications.Any())
            {
                dbContext.ResearchGroup_Publications.RemoveRange(orphanedPublications);
            }
        }
    }

    private void AddPatent()
    {
        if (!string.IsNullOrEmpty(newResearchGroup_Patents.ResearchGroup_Patent_PatentTitle) &&
            !string.IsNullOrEmpty(newResearchGroup_Patents.ResearchGroup_Patent_PatentURL))
        {
            var newPatent = new ResearchGroup_Patents
                {
                    ResearchGroup_Patent_PatentURL = newResearchGroup_Patents.ResearchGroup_Patent_PatentURL,
                    ResearchGroup_Patent_PatentTitle = newResearchGroup_Patents.ResearchGroup_Patent_PatentTitle,
                    ResearchGroup_Patent_PatentDescription = newResearchGroup_Patents.ResearchGroup_Patent_PatentDescription,
                    ResearchGroup_Patent_PatentDOI = newResearchGroup_Patents.ResearchGroup_Patent_PatentDOI,
                    ResearchGroup_Patent_PatentType = newResearchGroup_Patents.ResearchGroup_Patent_PatentType,
                    ResearchGroup_Patent_PatentStatus = newResearchGroup_Patents.ResearchGroup_Patent_PatentStatus
                };

            SelectedPatents.Add(newPatent);

            // For new patents (ID = 0), use a temporary key based on index
            patentEditingStates[GetPatentKey(newPatent)] = false;

            // Reset the form
            newResearchGroup_Patents = new ResearchGroup_Patents(); 
        }
    }

    private void RemovePatent(ResearchGroup_Patents patent)
    {
        SelectedPatents.Remove(patent);
        patentEditingStates.Remove(GetPatentKey(patent));
    }

    private void TogglePatentEdit(ResearchGroup_Patents patent)
    {
        var key = GetPatentKey(patent);
        patentEditingStates[key] = !patentEditingStates.GetValueOrDefault(key, false);
        StateHasChanged();
    }

    private void SavePatentEdit(ResearchGroup_Patents patent)
    {
        var key = GetPatentKey(patent);
        patentEditingStates[key] = false;
        StateHasChanged();
    }

    // Helper method to get a unique key for each patent
    private int GetPatentKey(ResearchGroup_Patents patent)
    {
        // For existing patents, use the ID
        // For new patents (ID = 0), use a hash of the title + URL to create a temporary key
        return patent.Id != 0 ? patent.Id : (patent.ResearchGroup_Patent_PatentTitle + patent.ResearchGroup_Patent_PatentURL).GetHashCode();
    }

    private bool IsPatentEditing(ResearchGroup_Patents patent)
    {
        return patentEditingStates.GetValueOrDefault(GetPatentKey(patent), false);
    }

    private async Task LoadExistingPatents()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            // Load existing patents for this research group
            var existingPatents = await dbContext.ResearchGroup_Patents
                .Where(rp => rp.ResearchGroupEmail == newResearchGroup.ResearchGroupEmail)
                .ToListAsync();

            SelectedPatents = existingPatents;

            // Initialize editing states
            patentEditingStates.Clear();
            foreach (var patent in SelectedPatents)
            {
                patentEditingStates[GetPatentKey(patent)] = false;
            }

            Console.WriteLine($"Loaded {SelectedPatents.Count} existing patents");
            foreach (var patent in SelectedPatents)
            {
                Console.WriteLine($"Patent: {patent.ResearchGroup_Patent_PatentTitle}, ID: {patent.Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patents: {ex.Message}");
        }
    }

    private async Task HandlePatentUpdates(AppDbContext dbContext, string researchGroupEmail)
    {
        try
        {
            Console.WriteLine($"=== HandlePatentUpdates START ===");
            Console.WriteLine($"Research Group Email: {researchGroupEmail}");
            Console.WriteLine($"SelectedPatents count: {SelectedPatents?.Count ?? 0}");

            // Get the research group to get the UniqueID
            var researchGroup = await dbContext.ResearchGroups
                .FirstOrDefaultAsync(rg => rg.ResearchGroupEmail == researchGroupEmail);

            string researchGroupUniqueID = researchGroup?.ResearchGroup_UniqueID;

            Console.WriteLine($"Research Group UniqueID: {researchGroupUniqueID}");

            // Handle existing patents
            var existingPatents = await dbContext.ResearchGroup_Patents
                .Where(rp => rp.ResearchGroupEmail == researchGroupEmail)
                .ToListAsync();

            if (SelectedPatents == null || SelectedPatents.Count == 0)
            {
                Console.WriteLine("No patents to process");

                // Remove all existing patents if none are selected
                if (existingPatents.Any())
                {
                    Console.WriteLine($"Removing all {existingPatents.Count} existing patents");
                    dbContext.ResearchGroup_Patents.RemoveRange(existingPatents);
                }
                Console.WriteLine("=== HandlePatentUpdates END ===");
                return;
            }

            var currentPatentIds = SelectedPatents.Select(p => p.Id).Where(id => id != 0).ToList();
            Console.WriteLine($"Current patent IDs: {string.Join(", ", currentPatentIds)}");

            Console.WriteLine($"Existing patents count: {existingPatents.Count}");

            // Remove patents that are no longer selected
            var patentsToRemove = existingPatents
                .Where(ep => !currentPatentIds.Contains(ep.Id))
                .ToList();

            if (patentsToRemove.Any())
            {
                Console.WriteLine($"Removing {patentsToRemove.Count} patents");
                dbContext.ResearchGroup_Patents.RemoveRange(patentsToRemove);
            }

            // Add/update selected patents
            foreach (var patent in SelectedPatents)
            {
                // Set the research group email and unique ID for all patents
                patent.ResearchGroupEmail = researchGroupEmail;
                patent.ResearchGroup_UniqueID = researchGroupUniqueID;

                if (patent.Id == 0)
                {
                    // New patent
                    Console.WriteLine($"Adding new patent: {patent.ResearchGroup_Patent_PatentTitle}");
                    Console.WriteLine($"With ResearchGroup_UniqueID: {patent.ResearchGroup_UniqueID}");
                    dbContext.ResearchGroup_Patents.Add(patent);
                }
                else
                {
                    // Update existing patent
                    var existingPatent = existingPatents.FirstOrDefault(ep => ep.Id == patent.Id);
                    if (existingPatent != null)
                    {
                        Console.WriteLine($"Updating existing patent: {patent.ResearchGroup_Patent_PatentTitle}");
                        Console.WriteLine($"With ResearchGroup_UniqueID: {patent.ResearchGroup_UniqueID}");
                        dbContext.Entry(existingPatent).CurrentValues.SetValues(patent);
                    }
                    else
                    {
                        // This shouldn't happen, but just in case
                        Console.WriteLine($"Adding patent that should exist: {patent.ResearchGroup_Patent_PatentTitle}");
                        Console.WriteLine($"With ResearchGroup_UniqueID: {patent.ResearchGroup_UniqueID}");
                        dbContext.ResearchGroup_Patents.Add(patent);
                    }
                }
            }
            Console.WriteLine("=== HandlePatentUpdates END ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"=== HandlePatentUpdates ERROR: {ex.Message} ===");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            throw;
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var selectedFiles = e.GetMultipleFiles();
            var file = selectedFiles.FirstOrDefault();

            if (file != null)
            {
                // Check file type
                var allowedTypes = new[] { "image/jpeg", "image/png" };
                if (!allowedTypes.Contains(file.ContentType))
                {
                    FileErrorMessage = "Λάθος τύπος αρχείου. Επιλέξτε .jpg ή .png";
                    newResearchGroup.ResearchGroupImage = null;
                    return;
                }

                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(memoryStream);
                    newResearchGroup.ResearchGroupImage = memoryStream.ToArray();
                }

                // Clear any previous error message
                FileErrorMessage = null;
            }
            else
            {
                newResearchGroup.ResearchGroupImage = null;
                FileErrorMessage = "Παρακαλώ επιλέξτε ένα αρχείο.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
            newResearchGroup.ResearchGroupImage = null;
            FileErrorMessage = "Προέκυψε ένα σφάλμα κατά την μεταφόρτωση του αρχείου.";
        }
    }

    private async Task HandleFileChangeForTeamImage(InputFileChangeEventArgs e)
    {
        try
        {
            var selectedFiles = e.GetMultipleFiles();
            var file = selectedFiles.FirstOrDefault();

            if (file != null)
            {
                // Check file type
                var allowedTypes = new[] { "image/jpeg", "image/png" };
                if (!allowedTypes.Contains(file.ContentType))
                {
                    FileErrorMessage = "Λάθος τύπος αρχείου. Επιλέξτε .jpg ή .png";
                    newResearchGroup.ResearchGroupTeamImage = null;
                    return;
                }

                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(memoryStream);
                    newResearchGroup.ResearchGroupTeamImage = memoryStream.ToArray();
                }

                // Clear any previous error message
                FileErrorMessage = null;
            }
            else
            {
                newResearchGroup.ResearchGroupTeamImage = null;
                FileErrorMessage = "Παρακαλώ επιλέξτε ένα αρχείο.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
            newResearchGroup.ResearchGroupTeamImage = null;
            FileErrorMessage = "Προέκυψε ένα σφάλμα κατά την μεταφόρτωση του αρχείου.";
        }
    }

    private string GetValidationClass(string fieldValue)
    {
        return string.IsNullOrEmpty(fieldValue) && showValidationError ? "shake error" : "";
    }

    private void OnDepartmentChange(ChangeEventArgs e)
    {
        newResearchGroup.ResearchGroupUniversityDepartment = e.Value?.ToString();
    }

    private void AgreeToTerms()
    {
        // Programmatically set the checkbox value
        customCheckbox?.SetValue(true);
        agreeTerms = true;
        showMessage = false;
        StateHasChanged(); // Re-render the component to reflect changes
    }

    private void DeclineTerms()
    {
        // Programmatically unset the checkbox value
        customCheckbox?.SetValue(false);
        agreeTerms = false;
        showMessage = true;
        StateHasChanged(); // Re-render the component to reflect changes
    }

    private void ShowMessage()
    {
        if (!agreeTerms)
        {
            showMessage = true;
        }
        else
        {
            showMessage = false;
        }
    }

    private async Task ShowUserAgreementModal(MouseEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("showModal1", "#userAgreementModal");
    }

    private async Task UpdateResearchGroupRegistration()
    {
        error = false;
        updated = false;
        showValidationError = false;
        showResearchGroupValidationError = false;

        // Reset all input classes
        ResetResearchGroupValidationClasses();

        // List to track missing mandatory fields
        var missingFields = new List<string>();

        // Validate ONLY mandatory fields
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupName))
        {
            researchGroupNameInputClass = "shake shake-input";
            missingFields.Add("Όνομα Ερευνητικής Ομάδας");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupSchool))
        {
            researchGroupSchoolInputClass = "shake shake-input";
            missingFields.Add("Σχολή");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupUniversityDepartment))
        {
            researchGroupDepartmentInputClass = "shake shake-input";
            missingFields.Add("Τμήμα");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupContactEmail))
        {
            researchGroupContactEmailInputClass = "shake shake-input";
            missingFields.Add("Email Επικοινωνίας");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupPostalAddress))
        {
            researchGroupAddressInputClass = "shake shake-input";
            missingFields.Add("Διεύθυνση");
        }
        if (string.IsNullOrEmpty(newResearchGroup.ResearchGroupTelephoneNumber))
        {
            researchGroupTelephoneInputClass = "shake shake-input";
            missingFields.Add("Τηλέφωνο");
        }
        if (newResearchGroup.ResearchGroup_DateOfCreation == default)
        {
            researchGroupDateInputClass = "shake shake-input";
            missingFields.Add("Ημερομηνία Ίδρυσης");
        }
        if (selectedResearchGroupAreas.Count == 0)
        {
            researchGroupAreasInputClass = "shake shake-input";
            missingFields.Add("Περιοχές Ερευνητικού Ενδιαφέροντος");
        }

        // Check if any mandatory field is empty
        if (missingFields.Count > 0)
        {
            error = true;
            showResearchGroupValidationError = true;
            researchGroupErrorMessage = $"Συμπληρώστε τα ακόλουθα υποχρεωτικά πεδία: {string.Join(", ", missingFields)}";
            return;
        }

        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        using var transaction = await dbContext.Database.BeginTransactionAsync();

        try
        {
            if (isRegistered)
            {
                // Update existing research group
                var existingResearchGroup = await dbContext.ResearchGroups
                    .FirstOrDefaultAsync(rg => rg.ResearchGroupEmail == newResearchGroup.ResearchGroupEmail);

                if (existingResearchGroup != null)
                {
                    // Set Areas and Skills
                    newResearchGroup.ResearchGroupAreas = string.Join(",", selectedResearchGroupAreas.Select(sa => sa.AreaName));
                    newResearchGroup.ResearchGroupSkills = string.Join(",", selectedResearchGroupSkills);
                    newResearchGroup.ResearchGroupKeywords = ResearchGroupKeywords;

                    // Update research group fields
                    dbContext.Entry(existingResearchGroup).CurrentValues.SetValues(newResearchGroup);

                    await HandleMemberUpdates(dbContext, existingResearchGroup.ResearchGroupEmail);
                    await HandlePublicationUpdates(dbContext, existingResearchGroup.ResearchGroupEmail);
                    await HandlePatentUpdates(dbContext, existingResearchGroup.ResearchGroupEmail);
                    await HandleSpinOffUpdates(dbContext, existingResearchGroup.ResearchGroupEmail);
                    await HandleProjectUpdates(dbContext, existingResearchGroup.ResearchGroupEmail);

                    await dbContext.SaveChangesAsync();
                    await transaction.CommitAsync();

                    updated = true;
                    error = false;

                    // Reset validation classes after success
                    await Task.Delay(3000);
                    ResetResearchGroupValidationClasses();
                }
            }
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            error = true;
            showResearchGroupValidationError = true;
            researchGroupErrorMessage = "Σφάλμα κατά την ενημέρωση. Παρακαλώ δοκιμάστε ξανά.";
            Console.WriteLine($"Error updating research group: {ex.Message}");
        }

        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private async Task HandleProfessorInputWhenSearchForProfessorAsResearchGroup(ChangeEventArgs e)
    {
        currentProfessorSearch = e.Value?.ToString();
        showInvitationPromptWhenSendInvitationEmailToProfessor = true; 
        hasSearched = false;

        if (!string.IsNullOrWhiteSpace(currentProfessorSearch) &&
            currentProfessorSearch.Length >= 2)
        {
            hasSearched = true;
            // Search professors from database
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            professorNameSurnameSuggestions = await dbContext.Professors
                .Where(p => p.ProfName.Contains(currentProfessorSearch) ||
                           p.ProfSurname.Contains(currentProfessorSearch) ||
                           (p.ProfName + " " + p.ProfSurname).Contains(currentProfessorSearch) ||
                           p.ProfEmail.Contains(currentProfessorSearch))
                .Select(p => p.ProfName + " " + p.ProfSurname + (string.IsNullOrEmpty(p.ProfEmail) ? "" : $" ({p.ProfEmail})"))
                .Distinct()
                .ToListAsync();
        }
        else
        {
            professorNameSurnameSuggestions.Clear();
        }
    }

    

    private async Task RemoveProfessor(string professor)
    {
        try
        {
            int index = SelectedProfessors.IndexOf(professor);
            if (index >= 0)
            {
                string professorEmail = SelectedProfessorDetails[index].Email;

                SelectedProfessors.RemoveAt(index);
                SelectedProfessorDetails.RemoveAt(index);

                MemberPublications.RemoveAll(p => p.PK_ResearchGroupMemberEmail == professorEmail);

                if (isRegistered && !string.IsNullOrEmpty(newResearchGroup.ResearchGroupEmail))
                {
                    using var dbContext = await DbContextFactory.CreateDbContextAsync();

                    var publicationsToRemove = await dbContext.ResearchGroup_Publications
                        .Where(p => p.PK_ResearchGroupEmail == newResearchGroup.ResearchGroupEmail &&
                                   p.PK_ResearchGroupMemberEmail == professorEmail)
                        .ToListAsync();

                    if (publicationsToRemove.Any())
                    {
                        dbContext.ResearchGroup_Publications.RemoveRange(publicationsToRemove);
                        await dbContext.SaveChangesAsync();
                    }
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing professor: {ex.Message}");
        }
    }

    private async Task RemoveStudent(string student)
    {
        try
        {
            int index = SelectedStudents.IndexOf(student);
            if (index >= 0)
            {
                string studentEmail = SelectedStudentDetails[index].Email;

                SelectedStudents.RemoveAt(index);
                SelectedStudentDetails.RemoveAt(index);

                MemberPublications.RemoveAll(p => p.PK_ResearchGroupMemberEmail == studentEmail);

                if (isRegistered && !string.IsNullOrEmpty(newResearchGroup.ResearchGroupEmail))
                {
                    using var dbContext = await DbContextFactory.CreateDbContextAsync();

                    var publicationsToRemove = await dbContext.ResearchGroup_Publications
                        .Where(p => p.PK_ResearchGroupEmail == newResearchGroup.ResearchGroupEmail &&
                                   p.PK_ResearchGroupMemberEmail == studentEmail)
                        .ToListAsync();

                    if (publicationsToRemove.Any())
                    {
                        dbContext.ResearchGroup_Publications.RemoveRange(publicationsToRemove);
                        await dbContext.SaveChangesAsync();
                    }
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing student: {ex.Message}");
        }
    }

    private void ClearProfessorFields()
    {
        ResearchGroupProfessorName = null;
        ResearchGroupProfessorSurname = null;
        ResearchGroupProfessorEmail = null;
        ResearchGroupProfessorVathmida = null;
        ResearchGroupProfessorUnivesrity = null;
        ResearchGroupProfessorSchool = null;
        ResearchGroupProfessorUniversityDepartment = null;
        ResearchGroupProfessorGoogleScholarProfile = null;
        ResearchGroupProfessorLinkedInProfile = null;
    }

    private void ToggleProfessorDetails(int index)
    {
        if (index >= 0 && index < SelectedProfessorDetails.Count)
        {
            SelectedProfessorDetails[index].IsExpanded = !SelectedProfessorDetails[index].IsExpanded;
            StateHasChanged();
        }
    }


    private bool IsHeadAssignedToOther(int currentIndex)
    {
        return SelectedProfessorDetails
            .Where((p, i) => i != currentIndex)
            .Any(p => p.Role == "Head");
    }

    private void HandleRoleChange(string newRole, int index)
    {
        if (index >= 0 && index < SelectedProfessorDetails.Count)
        {
            SelectedProfessorDetails[index].Role = newRole;
            if (newRole == "Head")
            {
                for (int i = 0; i < SelectedProfessorDetails.Count; i++)
                {
                    if (i != index && SelectedProfessorDetails[i].Role == "Head")
                    {
                        SelectedProfessorDetails[i].Role = null;
                    }
                }
            }
        }
        StateHasChanged();
    }

    private void HandleStudentRoleChange(string newRole, int index)
    {
        if (index >= 0 && index < SelectedStudentDetails.Count)
        {
            SelectedStudentDetails[index].Role = newRole;
        }
        StateHasChanged();
    }

    private async Task HandleStudentInputWhenSearchForStudent(ChangeEventArgs e)
    {
        currentStudentSearch = e.Value?.ToString();
        hasSearchedStudent = false;

        if (!string.IsNullOrWhiteSpace(currentStudentSearch) && currentStudentSearch.Length >= 2)
        {
            hasSearchedStudent = true;
            showInvitationPromptWhenSendInvitationEmailToStudent = true; 
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            studentNameSurnameSuggestions = await dbContext.Students
                .Where(s => s.Name.Contains(currentStudentSearch) ||
                           s.Surname.Contains(currentStudentSearch) ||
                           (s.Name + " " + s.Surname).Contains(currentStudentSearch) ||
                           s.Email.Contains(currentStudentSearch))
                .Select(s => s.Name + " " + s.Surname + (string.IsNullOrEmpty(s.Email) ? "" : $" ({s.Email})"))
                .Distinct()
                .ToListAsync();
        }
        else
        {
            studentNameSurnameSuggestions.Clear();
        }
    }

    private async Task AddStudent(string studentNameSurname)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(studentNameSurname))
            {
                return;
            }

            // Extract email from the format "Name Surname (email)"
            var emailMatch = Regex.Match(studentNameSurname, @"\(([^)]+)\)");
            var email = emailMatch.Success ? emailMatch.Groups[1].Value.Trim() : null;

            // Check if this student is already selected by email
            if (!string.IsNullOrEmpty(email) &&
                SelectedStudentDetails.Any(s => s.Email.Equals(email, StringComparison.OrdinalIgnoreCase)))
            {
                return;
            }

            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            var namePart = emailMatch.Success ? studentNameSurname.Substring(0, emailMatch.Index).Trim() : studentNameSurname;
            var nameParts = namePart.Split(new[] { ' ' }, 2, StringSplitOptions.RemoveEmptyEntries);

            if (nameParts.Length < 2 && email == null) return;

            Student student = null;

            if (!string.IsNullOrEmpty(email))
            {
                student = await dbContext.Students
                    .FirstOrDefaultAsync(s => s.Email == email);
            }

            if (student == null && nameParts.Length >= 2)
            {
                student = await dbContext.Students
                    .FirstOrDefaultAsync(s =>
                        s.Name == nameParts[0] &&
                        s.Surname == nameParts[1]);
            }

            if (student == null) return;

            string studentDisplay = $"{student.Name} {student.Surname} ({student.Email})";

            // Final check to prevent duplicates by display name
            if (SelectedStudents.Any(s => s.Equals(studentDisplay, StringComparison.OrdinalIgnoreCase)))
            {
                return;
            }

            SelectedStudents.Add(studentDisplay);

            var studentDetails = new StudentDetails
                {
                    Name = student.Name,
                    Surname = student.Surname,
                    Email = student.Email,
                    University = student.University,
                    Department = student.Department,
                    LevelOfStudies = student.LevelOfDegree,
                    PersonalWebsite = student.PersonalWebsite,
                    LinkedInProfile = student.LinkedInProfile,
                    GoogleScholarProfile = student.StudentGoogleScholarProfile, // Add this line
                    RegistrationDate = DateTime.Now,
                    Role = string.Empty
                };

            SelectedStudentDetails.Add(studentDetails);

            currentStudentSearch = string.Empty;
            studentNameSurnameSuggestions.Clear();

            // Fetch publications from Google Scholar instead of LinkedIn
            if (!string.IsNullOrEmpty(studentDetails.GoogleScholarProfile))
            {
                await FetchPublicationsForMember(studentDetails.Email, studentDetails.GoogleScholarProfile, "Student");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in AddStudent: {ex.Message}");
        }
    }


    private void ToggleStudentDetails(int index)
    {
        if (index >= 0 && index < SelectedStudentDetails.Count)
        {
            SelectedStudentDetails[index].IsExpanded = !SelectedStudentDetails[index].IsExpanded;
            StateHasChanged();
        }
    }

    private async Task LoadExistingMembers()
    {
        if (!isRegistered || newResearchGroup?.Id == null) return;

        using var dbContext = await DbContextFactory.CreateDbContextAsync();

        // Clear current selections
        SelectedProfessors.Clear();
        SelectedProfessorDetails.Clear();
        SelectedStudents.Clear();
        SelectedStudentDetails.Clear();
        MemberPublications.Clear();

        var existingProfessors = await dbContext.ResearchGroup_Professors
            .Where(rp => rp.PK_ResearchGroupEmail == newResearchGroup.ResearchGroupEmail)
            .ToListAsync();

        var professorEmails = existingProfessors.Select(ep => ep.PK_ProfessorEmail).ToList();
        var professors = await dbContext.Professors
            .Where(p => professorEmails.Contains(p.ProfEmail))
            .ToListAsync();

        foreach (var professor in existingProfessors)
        {
            var professorDetails = professors.FirstOrDefault(p => p.ProfEmail == professor.PK_ProfessorEmail);
            if (professorDetails != null)
            {
                var details = new ProfessorDetails
                    {
                        Name = professorDetails.ProfName,
                        Surname = professorDetails.ProfSurname,
                        Email = professorDetails.ProfEmail,
                        Vathmida = professorDetails.ProfVahmidaDEP,
                        University = professorDetails.ProfUniversity,
                        School = ResearchGroupUniversitySchoolReadOnlyName,
                        Department = professorDetails.ProfDepartment,
                        GoogleScholarProfile = professorDetails.ProfScholarProfile,
                        LinkedInProfile = professorDetails.ProfLinkedInSite,
                        PersonalWebsite = professorDetails.ProfPersonalWebsite,
                        RegistrationDate = professor.DateOfRegistrationOnResearchGroup_ForProfessorMember,
                        Role = professor.PK_ProfessorRole // Load the role
                    };

                SelectedProfessorDetails.Add(details);
                SelectedProfessors.Add($"{details.Name} {details.Surname}");

                if (!string.IsNullOrEmpty(details.GoogleScholarProfile))
                {
                    await FetchPublicationsForMember(details.Email, details.GoogleScholarProfile, "Professor"); // Updated call
                }
            }
        }

        var existingStudents = await dbContext.ResearchGroup_NonFacultyMembers
            .Where(rnf => rnf.PK_ResearchGroupEmail == newResearchGroup.ResearchGroupEmail)
            .ToListAsync();

        var studentEmails = existingStudents.Select(es => es.PK_NonFacultyMemberEmail).ToList();
        var students = await dbContext.Students
            .Where(s => studentEmails.Contains(s.Email))
            .ToListAsync();

        foreach (var student in existingStudents)
        {
            var studentDetails = students.FirstOrDefault(s => s.Email == student.PK_NonFacultyMemberEmail);
            if (studentDetails != null)
            {
                var details = new StudentDetails
                    {
                        LevelOfStudies = studentDetails.LevelOfDegree,
                        Name = studentDetails.Name,
                        Surname = studentDetails.Surname,
                        University = studentDetails.University,
                        Department = studentDetails.Department,
                        Email = studentDetails.Email,
                        PersonalWebsite = studentDetails.PersonalWebsite,
                        LinkedInProfile = studentDetails.LinkedInProfile,
                        GoogleScholarProfile = studentDetails.StudentGoogleScholarProfile, // Add this line
                        RegistrationDate = student.DateOfRegistrationOnResearchGroup_ForNonFacultyMember,
                        Role = student.PK_NonFacultyMemberLevelOfStudies
                    };

                SelectedStudentDetails.Add(details);
                SelectedStudents.Add($"{details.Name} {details.Surname}");

                // Fetch from Google Scholar instead of LinkedIn
                if (!string.IsNullOrEmpty(details.GoogleScholarProfile))
                {
                    await FetchPublicationsForMember(details.Email, details.GoogleScholarProfile, "Student"); // Updated call
                }
                // Optional: Keep LinkedIn as fallback if no Google Scholar profile exists
                else if (!string.IsNullOrEmpty(details.LinkedInProfile))
                {
                    Console.WriteLine($"No Google Scholar profile found for {details.Email}, falling back to LinkedIn");
                    // You might want to handle this differently since LinkedIn doesn't provide publications
                }
            }
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isRegistered)
        {
            Console.WriteLine("LoadPublications() called");
            await LoadPublications();
        }
    }

    private async Task LoadPublications()
    {
        Console.WriteLine("LoadPublications() started - fetching from Google Scholar for both professors and students");
        isLoadingPublications = true;
        publicationsErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            MemberPublications.Clear();

            // Get members with Google Scholar profiles (both professors and students)
            var memberEmails = SelectedProfessorDetails
                .Where(p => !string.IsNullOrEmpty(p.Email) && !string.IsNullOrEmpty(p.GoogleScholarProfile))
                .Select(p => p.Email)
                .Concat(SelectedStudentDetails
                    .Where(s => !string.IsNullOrEmpty(s.Email) && !string.IsNullOrEmpty(s.GoogleScholarProfile)) 
                    .Select(s => s.Email))
                .Distinct()
                .ToList();

            Console.WriteLine($"Found {memberEmails.Count} member emails with Google Scholar profiles");

            if (memberEmails.Any())
            {
                foreach (var email in memberEmails)
                {
                    var professor = SelectedProfessorDetails.FirstOrDefault(p => p.Email == email);
                    if (professor != null)
                    {
                        await FetchPublicationsForMember(email, professor.GoogleScholarProfile, "Professor");
                    }
                    else
                    {
                        var student = SelectedStudentDetails.FirstOrDefault(s => s.Email == email);
                        if (student != null)
                        {
                            await FetchPublicationsForMember(email, student.GoogleScholarProfile, "Student"); // Use GoogleScholarProfile
                        }
                    }
                }
                Console.WriteLine($"Total publications found: {MemberPublications.Count}");
            }
            else
            {
                Console.WriteLine("No member emails with Google Scholar profiles found");
            }
        }
        catch (Exception ex)
        {
            publicationsErrorMessage = $"Σφάλμα κατά τη φόρτωση των δημοσιεύσεων: {ex.Message}";
            Console.WriteLine($"Error loading publications: {ex}");
        }
        finally
        {
            isLoadingPublications = false;
            StateHasChanged();
            Console.WriteLine("LoadPublications() completed");
        }
    }

    private async Task FetchPublicationsFromGoogleScholar(List<string> memberEmails)
    {
        Console.WriteLine($"FetchPublicationsFromGoogleScholar started for {memberEmails.Count} members");

        foreach (var email in memberEmails)
        {
            try
            {
                var professor = SelectedProfessorDetails.FirstOrDefault(p => p.Email == email);
                if (professor == null || string.IsNullOrEmpty(professor.GoogleScholarProfile))
                {
                    Console.WriteLine($"No Google Scholar profile found for {email}");
                    continue;
                }

                Console.WriteLine($"Fetching publications for {email} from {professor.GoogleScholarProfile}");

                var publications = await _googleScholarService.GetPublications(professor.GoogleScholarProfile);
                Console.WriteLine($"Found {publications.Count} publications for {email}");

                foreach (var pub in publications)
                {
                    var newPub = new ResearchGroup_Publications
                        {
                            PK_ResearchGroupEmail = newResearchGroup.ResearchGroupEmail,
                            PK_ResearchGroupMemberEmail = email,
                            PK_ResearchGroupMemberPublication_Title = pub.Title,
                            PK_ResearchGroupMemberPublication_CitedBy = pub.CitedBy,
                            PK_ResearchGroupMemberPublication_Year = pub.Year,
                            PK_ResearchGroupMemberPublication_Authors = pub.Authors,
                            PK_ResearchGroupMemberPublication_Journal = pub.Journal,
                            PK_ResearchGroupMemberPublication_Url = pub.Url
                        };

                    MemberPublications.Add(newPub);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching publications for {email}: {ex.Message}");
            }
        }

        Console.WriteLine("FetchPublicationsFromGoogleScholar completed");
    }

    private async Task ChangePage(string memberKey, int newPage)
    {
        Console.WriteLine($"ChangePage called for {memberKey}, requested page: {newPage}");

        var memberPubs = MemberPublications
            .Where(p => p.PK_ResearchGroupMemberEmail == memberKey)
            .ToList();

        var totalPages = (int)Math.Ceiling((double)memberPubs.Count / PublicationsPerPage);

        // Validate page number
        newPage = Math.Max(1, Math.Min(newPage, totalPages));


        CurrentPublicationPages[memberKey] = newPage;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task FetchPublicationsForMember(string email, string googleScholarProfile, string memberType)
    {
        try
        {
            if (string.IsNullOrEmpty(googleScholarProfile))
            {
                Console.WriteLine($"No Google Scholar profile found for {email}");
                return;
            }

            Console.WriteLine($"Fetching publications for {memberType} {email} from {googleScholarProfile}");

            var publications = await _googleScholarService.GetPublications(googleScholarProfile);
            Console.WriteLine($"Found {publications.Count} publications for {email}");

            foreach (var pub in publications)
            {
                var newPub = new ResearchGroup_Publications
                    {
                        PK_ResearchGroupEmail = newResearchGroup.ResearchGroupEmail,
                        PK_ResearchGroupMemberEmail = email,
                        PK_ResearchGroupMemberPublication_Title = pub.Title,
                        PK_ResearchGroupMemberPublication_CitedBy = pub.CitedBy,
                        PK_ResearchGroupMemberPublication_Year = pub.Year,
                        PK_ResearchGroupMemberPublication_Authors = pub.Authors,
                        PK_ResearchGroupMemberPublication_Journal = pub.Journal,
                        PK_ResearchGroupMemberPublication_Url = pub.Url,
                        MemberType = memberType 
                    };

                MemberPublications.Add(newPub);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching publications for {email}: {ex.Message}");
        }
    }

    private async Task HandlePublicationUpdates(AppDbContext dbContext, string researchGroupEmail)
    {
        var existingPublications = await dbContext.ResearchGroup_Publications
            .Where(p => p.PK_ResearchGroupEmail == researchGroupEmail)
            .ToListAsync();

        dbContext.ResearchGroup_Publications.RemoveRange(existingPublications);

        foreach (var pub in MemberPublications)
        {
            dbContext.ResearchGroup_Publications.Add(new ResearchGroup_Publications
                {
                    PK_ResearchGroupEmail = researchGroupEmail,
                    PK_ResearchGroupMemberEmail = pub.PK_ResearchGroupMemberEmail,
                    PK_ResearchGroupMemberPublication_Title = pub.PK_ResearchGroupMemberPublication_Title,
                    PK_ResearchGroupMemberPublication_CitedBy = pub.PK_ResearchGroupMemberPublication_CitedBy,
                    PK_ResearchGroupMemberPublication_Year = pub.PK_ResearchGroupMemberPublication_Year,
                    PK_ResearchGroupMemberPublication_Authors = pub.PK_ResearchGroupMemberPublication_Authors,
                    PK_ResearchGroupMemberPublication_Journal = pub.PK_ResearchGroupMemberPublication_Journal,
                    PK_ResearchGroupMemberPublication_Url = pub.PK_ResearchGroupMemberPublication_Url
                });
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task SendInvitationToProfessor(string email)
    {
        try
        {
            await InternshipEmailService.SendInvitationEmailToProfessorToRegisterOnPlatform(email);
            showInvitationPromptWhenSendInvitationEmailToProfessor = false; 
            currentProfessorSearch = "";
            await JS.InvokeVoidAsync("confirmActionWithHTML2", $"Έχει σταλεί Πρόσκληση Εγγραφής στο AcademyHub στην διεύθυνση: {email}");
            Console.WriteLine($"Professor Invitation sent to {email}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to send Professor invitation: {ex.Message}");
        }
    }

    private async Task SendInvitationToStudent(string email)
    {
        try
        {
            await InternshipEmailService.SendInvitationEmailToStudentToRegisterOnPlatform(email);
            showInvitationPromptWhenSendInvitationEmailToStudent = false; 
            currentStudentSearch = "";
            await JS.InvokeVoidAsync("confirmActionWithHTML2", $"Έχει σταλεί Πρόσκληση Εγγραφής στο AcademyHub στην διεύθυνση: {email}");
            Console.WriteLine($"Student invitation sent to {email}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to send student invitation: {ex.Message}");
        }
    }

    private int CurrentPublicationPage = 1;

    private async Task ChangePage(int newPage)
    {
        var totalPages = (int)Math.Ceiling((double)MemberPublications.Count / PublicationsPerPage);

        newPage = Math.Max(1, Math.Min(newPage, totalPages));

        CurrentPublicationPage = newPage;
        StateHasChanged();
        await Task.CompletedTask;
    }

    public class Project
    {
        public string Title { get; set; }
        public string Acronym { get; set; }
        public string GrantId { get; set; }
        public string Duration { get; set; }
        public string StartDate { get; set; }
        public string EndDate { get; set; }
        public string TotalCost { get; set; }
        public string EuContribution { get; set; }
        public string Coordinator { get; set; }
        public List<string> Keywords { get; set; } = new List<string>();
        public string Description { get; set; }
        public List<string> Programmes { get; set; } = new List<string>();
        public List<string> Topics { get; set; } = new List<string>();

        public string ResearchGroup_ProjectELKECode { get; set; }
        public string ResearchGroup_ProjectScientificResponsibleEmail { get; set; }
        public string ResearchGroup_EuropaCordisWebsite { get; set; }
        public string ResearchGroup_ProjectWebsite { get; set; }
        public string? ResearchGroup_OurProjectBudget { get; set; }
        public string? ResearchGroupAcronym { get; set; }

        // ADD THIS MISSING PROPERTY
        public string ResearchGroup_ProjectFramework { get; set; }
    }

    private string projectId = string.Empty;
    private Project? project;
    private bool isTableExpanded = false;
    private string? errorMessage;
    private string? successMessage;
    private List<Project> temporaryProjects = new List<Project>();

    private async Task SearchProject()
    {
        try
        {
            errorMessage = null;
            successMessage = null;

            if (temporaryProjects.Any(p => p.GrantId == projectId))
            {
                errorMessage = "Αυτό το έργο είναι ήδη στην προσωρινή λίστα.";
                project = null;
                _ = ClearErrorMessageAfterDelay(); 
                return;
            }

            var existingProject = await Context.ResearchGroup_ResearchActions
                .FirstOrDefaultAsync(p => p.ResearchGroup_ProjectGrantAgreementNumber == projectId || p.ResearchGroup_ProjectGrantAgreementNumber == projectId);

            if (existingProject != null)
            {
                errorMessage = "Αυτό το έργο είναι ήδη αποθηκευμένο στη βάση δεδομένων.";
                project = null;
                _ = ClearErrorMessageAfterDelay(); 
                return;
            }

            project = await CordisService.GetProjectByIdAsync(projectId);
            isTableExpanded = project != null;

            if (project == null)
            {
                errorMessage = "Δεν βρέθηκε έργο με τον συγκεκριμένο αριθμό (GA).";
                _ = ClearErrorMessageAfterDelay(); 
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Σφάλμα κατά την αναζήτηση: {ex.Message}";
            project = null;
            _ = ClearErrorMessageAfterDelay(); 
        }
    }

    private async Task ClearErrorMessageAfterDelay()
    {
        await Task.Delay(4000); 
        errorMessage = null;
        StateHasChanged(); 
    }

    private void ToggleTable()
    {
        isTableExpanded = !isTableExpanded;
    }

    private async Task AddToTemporaryStorage(Project projectToAdd)
    {
        if (!temporaryProjects.Any(p => p.GrantId == projectToAdd.GrantId))
        {
            temporaryProjects.Add(projectToAdd);
            project = null;
            projectId = string.Empty;
            successMessage = $"Το έργο '{projectToAdd.Title}' προστέθηκε στην προσωρινή αποθήκευση.";
            errorMessage = null;
            StateHasChanged();
            await Task.Delay(3000);
            successMessage = null;
            StateHasChanged();
        }
    }

    private async Task RemoveFromTemporaryStorage(Project projectToRemove)
    {
        temporaryProjects.Remove(projectToRemove);
        successMessage = $"Το έργο '{projectToRemove.Title}' αφαιρέθηκε από την προσωρινή αποθήκευση.";
        StateHasChanged(); 
        await Task.Delay(3000); 
        successMessage += " "; 
        StateHasChanged();
        await Task.Delay(500); 
        successMessage = null; 
        StateHasChanged();
    }

    private void ClearTemporaryStorage()
    {
        temporaryProjects.Clear();
        successMessage = "Η προσωρινή αποθήκευση καθαρίστηκε.";
    }

    private async Task SaveAllProjects()
    {
        try
        {
            if (temporaryProjects.Any())
            {
                successMessage = $"Επιτυχής αποθήκευση {temporaryProjects.Count} έργων στη βάση δεδομένων.";
                temporaryProjects.Clear();
                errorMessage = null;
            }
            else
            {
                errorMessage = "Δεν υπάρχουν έργα προς αποθήκευση.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Σφάλμα κατά την αποθήκευση: {ex.Message}";
        }
    }

    private string ExtractGrantId(string grantId)
    {
        if (grantId.Contains("Grant agreement ID:"))
        {
            return grantId.Replace("Grant agreement ID:", "").Trim();
        }
        return grantId;
    }

    private string GetYoutubeEmbedUrl(string url)
    {
        if (string.IsNullOrEmpty(url))
            return string.Empty;

        var match = Regex.Match(url, @"(youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})");
        if (match.Success)
        {
            string videoId = match.Groups[2].Value;
            return $"https://www.youtube.com/embed/{videoId}";
        }

        return string.Empty;
    }

    private async Task UploadResearchGroupPresentationAttachment(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            showAttachmentAlert = true;
            newResearchGroup.ResearchGroup_PresentationAttachment = null; 
            return;
        }

        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        newResearchGroup.ResearchGroup_PresentationAttachment = ms.ToArray();
    }

    private bool IsProjectOngoing(Project project)
    {
        if (string.IsNullOrEmpty(project.EndDate))
            return false;

        DateTime? endDate = ParseDate(project.EndDate);
        if (endDate == null)
            return false;

        return endDate.Value > DateTime.Now;
    }

    private void ChangePublicationsPerPage(int perPage)
    {
        PublicationsPerPage = perPage;
        CurrentPublicationPage = 1; 
        StateHasChanged();
        
    }

    private void AddSpinOffCompany()
    {
        if (!string.IsNullOrEmpty(newResearchGroup_SpinOff.ResearchGroup_SpinOff_CompanyTitle))
        {
            var newSpinOff = new ResearchGroup_SpinOffCompany
                {
                    ResearchGroup_SpinOff_CompanyTitle = newResearchGroup_SpinOff.ResearchGroup_SpinOff_CompanyTitle,
                    ResearchGroup_SpinOff_CompanyAFM = newResearchGroup_SpinOff.ResearchGroup_SpinOff_CompanyAFM,
                    ResearchGroup_SpinOff_CompanyDescription = newResearchGroup_SpinOff.ResearchGroup_SpinOff_CompanyDescription
                };

            SelectedSpinOffCompanies.Add(newSpinOff);

            spinOffEditingStates[GetSpinOffKey(newSpinOff)] = false;

            // Reset the form
            newResearchGroup_SpinOff = new ResearchGroup_SpinOffCompany();
        }
    }

    private void RemoveSpinOffCompany(ResearchGroup_SpinOffCompany spinoff)
    {
        SelectedSpinOffCompanies.Remove(spinoff);
        spinOffEditingStates.Remove(GetSpinOffKey(spinoff));
    }

    private void ToggleSpinOffEdit(ResearchGroup_SpinOffCompany spinoff)
    {
        var key = GetSpinOffKey(spinoff);
        spinOffEditingStates[key] = !spinOffEditingStates.GetValueOrDefault(key, false);
        StateHasChanged();
    }

    private void SaveSpinOffEdit(ResearchGroup_SpinOffCompany spinoff)
    {
        var key = GetSpinOffKey(spinoff);
        spinOffEditingStates[key] = false;
        StateHasChanged();
    }

    private int GetSpinOffKey(ResearchGroup_SpinOffCompany spinoff)
    {
        return spinoff.Id != 0 ? spinoff.Id : (spinoff.ResearchGroup_SpinOff_CompanyTitle + spinoff.ResearchGroup_SpinOff_CompanyAFM).GetHashCode();
    }

    private bool IsSpinOffEditing(ResearchGroup_SpinOffCompany spinoff)
    {
        return spinOffEditingStates.GetValueOrDefault(GetSpinOffKey(spinoff), false);
    }

    private async Task LoadExistingSpinOffCompanies()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            var existingSpinOffs = await dbContext.ResearchGroup_SpinOffCompany
                .Where(rs => rs.ResearchGroupEmail == newResearchGroup.ResearchGroupEmail)
                .ToListAsync();

            SelectedSpinOffCompanies = existingSpinOffs;

            spinOffEditingStates.Clear();
            foreach (var spinoff in SelectedSpinOffCompanies)
            {
                spinOffEditingStates[GetSpinOffKey(spinoff)] = false;
            }

            Console.WriteLine($"Loaded {SelectedSpinOffCompanies.Count} existing SpinOff companies");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading SpinOff companies: {ex.Message}");
        }
    }

    private async Task HandleSpinOffUpdates(AppDbContext dbContext, string researchGroupEmail)
    {
        try
        {
            Console.WriteLine($"=== HandleSpinOffUpdates START ===");
            Console.WriteLine($"Research Group Email: {researchGroupEmail}");
            Console.WriteLine($"SelectedSpinOffCompanies count: {SelectedSpinOffCompanies?.Count ?? 0}");

            var researchGroup = await dbContext.ResearchGroups
                .FirstOrDefaultAsync(rg => rg.ResearchGroupEmail == researchGroupEmail);

            string researchGroupUniqueID = researchGroup?.ResearchGroup_UniqueID;

            var existingSpinOffs = await dbContext.ResearchGroup_SpinOffCompany
                .Where(rs => rs.ResearchGroupEmail == researchGroupEmail)
                .ToListAsync();

            if (SelectedSpinOffCompanies == null || SelectedSpinOffCompanies.Count == 0)
            {
                Console.WriteLine("No SpinOff companies to process");

                if (existingSpinOffs.Any())
                {
                    Console.WriteLine($"Removing all {existingSpinOffs.Count} existing SpinOff companies");
                    dbContext.ResearchGroup_SpinOffCompany.RemoveRange(existingSpinOffs);
                }
                Console.WriteLine("=== HandleSpinOffUpdates END ===");
                return;
            }

            var currentSpinOffIds = SelectedSpinOffCompanies.Select(s => s.Id).Where(id => id != 0).ToList();
            Console.WriteLine($"Current SpinOff IDs: {string.Join(", ", currentSpinOffIds)}");

            Console.WriteLine($"Existing SpinOff companies count: {existingSpinOffs.Count}");

            var spinOffsToRemove = existingSpinOffs
                .Where(es => !currentSpinOffIds.Contains(es.Id))
                .ToList();

            if (spinOffsToRemove.Any())
            {
                Console.WriteLine($"Removing {spinOffsToRemove.Count} SpinOff companies");
                dbContext.ResearchGroup_SpinOffCompany.RemoveRange(spinOffsToRemove);
            }

            foreach (var spinoff in SelectedSpinOffCompanies)
            {
                spinoff.ResearchGroupEmail = researchGroupEmail;
                spinoff.ResearchGroup_UniqueID = researchGroupUniqueID;

                if (spinoff.Id == 0)
                {
                    Console.WriteLine($"Adding new SpinOff company: {spinoff.ResearchGroup_SpinOff_CompanyTitle}");
                    dbContext.ResearchGroup_SpinOffCompany.Add(spinoff);
                }
                else
                {
                    var existingSpinOff = existingSpinOffs.FirstOrDefault(es => es.Id == spinoff.Id);
                    if (existingSpinOff != null)
                    {
                        Console.WriteLine($"Updating existing SpinOff company: {spinoff.ResearchGroup_SpinOff_CompanyTitle}");
                        dbContext.Entry(existingSpinOff).CurrentValues.SetValues(spinoff);
                    }
                    else
                    {
                        Console.WriteLine($"Adding SpinOff company that should exist: {spinoff.ResearchGroup_SpinOff_CompanyTitle}");
                        dbContext.ResearchGroup_SpinOffCompany.Add(spinoff);
                    }
                }
            }
            Console.WriteLine("=== HandleSpinOffUpdates END ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"=== HandleSpinOffUpdates ERROR: {ex.Message} ===");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            throw;
        }
    }

    private async Task HandleProjectUpdates(AppDbContext dbContext, string researchGroupEmail)
    {
        try
        {
            Console.WriteLine($"=== HANDLING PROJECT UPDATES ===");
            Console.WriteLine($"Temporary projects count: {temporaryProjects?.Count ?? 0}");
            Console.WriteLine($"Existing projects count: {existingProjects?.Count ?? 0}");

            var dbProjects = await dbContext.ResearchGroup_ResearchActions
                .Where(p => p.ResearchGroupEmail == researchGroupEmail)
                .ToListAsync();

            foreach (var dbProject in dbProjects)
            {
                if (!existingProjects.Any(p => p.Id == dbProject.Id))
                {
                    dbContext.ResearchGroup_ResearchActions.Remove(dbProject);
                    Console.WriteLine($"Removed project: {dbProject.ResearchGroup_ProjectTitle}");
                }
            }

            foreach (var existingProject in existingProjects)
            {
                if (existingProject.Id != 0)
                {
                    var dbProject = dbProjects.FirstOrDefault(p => p.Id == existingProject.Id);
                    if (dbProject != null)
                    {
                        // Update all fields including framework
                        dbProject.ResearchGroup_ProjectELKECode = existingProject.ResearchGroup_ProjectELKECode;
                        dbProject.ResearchGroup_ProjectScientificResponsibleEmail = existingProject.ResearchGroup_ProjectScientificResponsibleEmail;
                        dbProject.ResearchGroup_ProjectWebsite = existingProject.ResearchGroup_ProjectWebsite;
                        dbProject.ResearchGroup_OurProjectBudget = existingProject.ResearchGroup_OurProjectBudget;
                        dbProject.ResearchGroup_ProjectFramework = existingProject.ResearchGroup_ProjectFramework; // Add this line
                        dbProject.ResearchGroup_ProjectStatus = existingProject.ResearchGroup_ProjectStatus;

                        dbContext.ResearchGroup_ResearchActions.Update(dbProject);
                        Console.WriteLine($"Updated existing project: {existingProject.ResearchGroup_ProjectTitle}");
                    }
                }
            }

            foreach (var tempProject in temporaryProjects)
            {
                var newResearchAction = CreateResearchActionFromProject(tempProject, researchGroupEmail);
                dbContext.ResearchGroup_ResearchActions.Add(newResearchAction);
                Console.WriteLine($"Added new project: {tempProject.Title}");
            }

            await dbContext.SaveChangesAsync();
            Console.WriteLine("=== PROJECT UPDATES COMPLETED ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleProjectUpdates: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            throw;
        }
    }

    private void UpdateProjectProperties(ResearchGroup_ResearchActions researchAction, Project project)
    {
        researchAction.ResearchGroup_ProjectStatus = IsProjectOngoing(project) ? "OnGoing" : "Past";
        researchAction.ResearchGroup_ProjectTitle = project.Title;
        researchAction.ResearchGroup_ProjectAcronym = project.Acronym;
        researchAction.ResearchGroup_ProjectFramework = project.ResearchGroup_ProjectFramework;

        researchAction.ResearchGroup_ProjectGrantAgreementNumber = ExtractGrantId(project.GrantId);

        researchAction.ResearchGroup_ProjectStartDate = ParseDate(project.StartDate);
        researchAction.ResearchGroup_ProjectEndDate = ParseDate(project.EndDate);
        researchAction.ResearchGroup_ProjectTotalCost = ExtractAmountOnly(project.TotalCost); // Use the helper method
        researchAction.ResearchGroup_ProjectTotalEUContribution = ExtractAmountOnly(project.EuContribution); // Use the helper method
        researchAction.ResearchGroup_ProjectCoordinator = project.Coordinator;
        researchAction.ResearchGroup_ProjectKeywords = project.Keywords != null ? string.Join(", ", project.Keywords) : null;
        researchAction.ResearchGroup_ProjectProgramme = project.Programmes != null ? string.Join(", ", project.Programmes) : null;
        researchAction.ResearchGroup_ProjectTopic = project.Topics != null ? string.Join(", ", project.Topics) : null;
        researchAction.ResearchGroup_ProjectDescription = project.Description;
        researchAction.ResearchGroup_ProjectELKECode = project.ResearchGroup_ProjectELKECode;
        researchAction.ResearchGroup_ProjectScientificResponsibleEmail = project.ResearchGroup_ProjectScientificResponsibleEmail;
        researchAction.ResearchGroup_EuropaCordisWebsite = $"https://cordis.europa.eu/project/id/{ExtractGrantId(project.GrantId)}";
        researchAction.ResearchGroup_ProjectWebsite = project.ResearchGroup_ProjectWebsite;
        researchAction.ResearchGroup_OurProjectBudget = project.ResearchGroup_OurProjectBudget?.ToString();
    }

    private ResearchGroup_ResearchActions CreateResearchActionFromProject(Project project, string researchGroupEmail)
    {
        return new ResearchGroup_ResearchActions
            {
                ResearchGroupEmail = researchGroupEmail,
                ResearchGroup_UniqueID = newResearchGroup.ResearchGroup_UniqueID,
                ResearchGroup_ProjectStatus = IsProjectOngoing(project) ? "OnGoing" : "Past",
                ResearchGroup_ProjectTitle = project.Title,
                ResearchGroup_ProjectAcronym = project.Acronym,
                ResearchGroup_ProjectFramework = project.ResearchGroup_ProjectFramework,
                ResearchGroup_ProjectGrantAgreementNumber = ExtractGrantId(project.GrantId),
                ResearchGroup_ProjectStartDate = ParseDate(project.StartDate),
                ResearchGroup_ProjectEndDate = ParseDate(project.EndDate),
                ResearchGroup_ProjectTotalCost = ExtractAmountOnly(project.TotalCost), // Use extracted amount
                ResearchGroup_ProjectTotalEUContribution = ExtractAmountOnly(project.EuContribution), // Use extracted amount
                ResearchGroup_ProjectCoordinator = project.Coordinator,
                ResearchGroup_ProjectKeywords = project.Keywords != null ? string.Join(", ", project.Keywords) : null,
                ResearchGroup_ProjectProgramme = project.Programmes != null ? string.Join(", ", project.Programmes) : null,
                ResearchGroup_ProjectTopic = project.Topics != null ? string.Join(", ", project.Topics) : null,
                ResearchGroup_ProjectDescription = project.Description,
                ResearchGroup_ProjectELKECode = project.ResearchGroup_ProjectELKECode,
                ResearchGroup_ProjectScientificResponsibleEmail = project.ResearchGroup_ProjectScientificResponsibleEmail,
                ResearchGroup_EuropaCordisWebsite = $"https://cordis.europa.eu/project/id/{ExtractGrantId(project.GrantId)}",
                ResearchGroup_ProjectWebsite = project.ResearchGroup_ProjectWebsite,
                ResearchGroup_OurProjectBudget = project.ResearchGroup_OurProjectBudget?.ToString()
            };
    }

    private DateTime? ParseDate(string dateString)
    {
        if (string.IsNullOrEmpty(dateString))
            return null;

        if (DateTime.TryParse(dateString, out DateTime result))
            return result;

        string[] formats = {
        "yyyy-MM-dd",
        "dd/MM/yyyy",
        "MM/dd/yyyy",
        "yyyy/MM/dd",
        "dd-MM-yyyy",
        "MM-dd-yyyy"
    };

        if (DateTime.TryParseExact(dateString, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime exactResult))
            return exactResult;

        Console.WriteLine($"Warning: Could not parse date: {dateString}");
        return null;
    }

    private async Task LoadExistingProjects()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            existingProjects = await dbContext.ResearchGroup_ResearchActions
                .Where(rp => rp.ResearchGroupEmail == newResearchGroup.ResearchGroupEmail)
                .ToListAsync();

            projectEditingStates.Clear();
            foreach (var project in existingProjects)
            {
                projectEditingStates[project.Id] = false;
            }

            Console.WriteLine($"Loaded {existingProjects.Count} existing projects");
            foreach (var project in existingProjects)
            {
                Console.WriteLine($"Project: {project.ResearchGroup_ProjectTitle}, ID: {project.Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
    }

    private void ToggleProjectEdit(ResearchGroup_ResearchActions project)
    {
        projectEditingStates[project.Id] = !projectEditingStates.GetValueOrDefault(project.Id, false);
        StateHasChanged();
    }

    private bool IsProjectEditing(ResearchGroup_ResearchActions project)
    {
        return projectEditingStates.GetValueOrDefault(project.Id, false);
    }

    private void RemoveProject(ResearchGroup_ResearchActions project)
    {
        existingProjects.Remove(project);
        projectEditingStates.Remove(project.Id);
        StateHasChanged();
    }

    private string GetProfessorEmail(string professorString)
    {
        if (string.IsNullOrEmpty(professorString)) return string.Empty;

        var emailMatch = Regex.Match(professorString, @"\(([^)]+)\)");
        return emailMatch.Success ? emailMatch.Groups[1].Value.Trim() : string.Empty;
    }

    private string GetProfessorNameFromEmail(string email)
    {
        if (string.IsNullOrEmpty(email)) return null;

        var professor = SelectedProfessors.FirstOrDefault(p =>
            p.Contains($"({email})", StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrEmpty(professor))
        {
            var emailIndex = professor.IndexOf('(');
            return emailIndex > 0 ? professor.Substring(0, emailIndex).Trim() : professor;
        }

        return null;
    }

    private async Task AddProfessor(string professorNameSurname)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(professorNameSurname))
            {
                return;
            }

            // Extract email from the format "Name Surname (email)"
            var emailMatch = Regex.Match(professorNameSurname, @"\(([^)]+)\)");
            var email = emailMatch.Success ? emailMatch.Groups[1].Value.Trim() : null;

            // Check if this professor is already selected by email
            if (!string.IsNullOrEmpty(email) &&
                SelectedProfessorDetails.Any(p => p.Email.Equals(email, StringComparison.OrdinalIgnoreCase)))
            {
                return;
            }

            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            var namePart = emailMatch.Success ? professorNameSurname.Substring(0, emailMatch.Index).Trim() : professorNameSurname;
            var nameParts = namePart.Split(new[] { ' ' }, 2, StringSplitOptions.RemoveEmptyEntries);

            if (nameParts.Length < 2 && email == null) return;

            Professor professor = null;

            if (!string.IsNullOrEmpty(email))
            {
                professor = await dbContext.Professors
                    .FirstOrDefaultAsync(p => p.ProfEmail == email);
            }

            if (professor == null && nameParts.Length >= 2)
            {
                professor = await dbContext.Professors
                    .FirstOrDefaultAsync(p =>
                        p.ProfName == nameParts[0] &&
                        p.ProfSurname == nameParts[1]);
            }

            if (professor == null) return;

            string professorDisplay = $"{professor.ProfName} {professor.ProfSurname} ({professor.ProfEmail})";

            // Final check to prevent duplicates by display name
            if (SelectedProfessors.Any(p => p.Equals(professorDisplay, StringComparison.OrdinalIgnoreCase)))
            {
                return;
            }

            SelectedProfessors.Add(professorDisplay);

            var professorDetails = new ProfessorDetails
                {
                    Name = professor.ProfName,
                    Surname = professor.ProfSurname,
                    Email = professor.ProfEmail,
                    Vathmida = professor.ProfVahmidaDEP,
                    University = professor.ProfUniversity,
                    School = ResearchGroupUniversitySchoolReadOnlyName,
                    Department = professor.ProfDepartment,
                    GoogleScholarProfile = professor.ProfScholarProfile,
                    LinkedInProfile = professor.ProfLinkedInSite,
                    PersonalWebsite = professor.ProfPersonalWebsite,
                    RegistrationDate = DateTime.Now,
                    Role = string.Empty
                };

            SelectedProfessorDetails.Add(professorDetails);

            currentProfessorSearch = string.Empty;
            professorNameSurnameSuggestions.Clear();

            if (!string.IsNullOrEmpty(professorDetails.GoogleScholarProfile))
            {
                await FetchPublicationsForMember(professorDetails.Email, professorDetails.GoogleScholarProfile, "Professor"); // Updated call
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in AddProfessor: {ex.Message}");
        }
    }

    private void AddManualKeyword(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(manualKeywordsInput))
        {
            if (string.IsNullOrEmpty(manualProject.ResearchGroup_ProjectKeywords))
            {
                manualProject.ResearchGroup_ProjectKeywords = manualKeywordsInput.Trim();
            }
            else
            {
                manualProject.ResearchGroup_ProjectKeywords += ", " + manualKeywordsInput.Trim();
            }
            manualKeywordsInput = "";
        }
    }

    // Method to remove a keyword
    private void RemoveManualKeyword(string keyword)
    {
        if (!string.IsNullOrEmpty(manualProject.ResearchGroup_ProjectKeywords))
        {
            var keywords = manualProject.ResearchGroup_ProjectKeywords.Split(',')
                .Select(k => k.Trim())
                .Where(k => k != keyword)
                .ToList();

            manualProject.ResearchGroup_ProjectKeywords = string.Join(", ", keywords);
        }
    }

    // Method to reset the manual form
    private void ResetManualForm()
    {
        manualProject = new ResearchGroup_ResearchActions();
        manualKeywordsInput = "";
        selectedProfessorDisplay = "";
        InitializeManualProject();
    }

    // Method to convert ResearchGroup_ResearchActions to Project
    private Project ConvertToProject(ResearchGroup_ResearchActions researchAction)
    {
        var project = new Project
            {
                Title = researchAction.ResearchGroup_ProjectTitle,
                Acronym = researchAction.ResearchGroup_ProjectAcronym,
                GrantId = researchAction.ResearchGroup_ProjectGrantAgreementNumber,
                StartDate = researchAction.ResearchGroup_ProjectStartDate?.ToString("yyyy-MM-dd"),
                EndDate = researchAction.ResearchGroup_ProjectEndDate?.ToString("yyyy-MM-dd"),
                TotalCost = researchAction.ResearchGroup_ProjectTotalCost,
                EuContribution = researchAction.ResearchGroup_ProjectTotalEUContribution,
                Coordinator = researchAction.ResearchGroup_ProjectCoordinator,
                Description = researchAction.ResearchGroup_ProjectDescription,
                ResearchGroup_ProjectFramework = researchAction.ResearchGroup_ProjectFramework, // ADD THIS LINE
                ResearchGroup_ProjectELKECode = researchAction.ResearchGroup_ProjectELKECode,
                ResearchGroup_ProjectScientificResponsibleEmail = researchAction.ResearchGroup_ProjectScientificResponsibleEmail,
                ResearchGroup_ProjectWebsite = researchAction.ResearchGroup_ProjectWebsite,
                ResearchGroup_OurProjectBudget = researchAction.ResearchGroup_OurProjectBudget
            };

        // Parse keywords
        if (!string.IsNullOrEmpty(researchAction.ResearchGroup_ProjectKeywords))
        {
            project.Keywords = researchAction.ResearchGroup_ProjectKeywords
                .Split(',')
                .Select(k => k.Trim())
                .Where(k => !string.IsNullOrEmpty(k))
                .ToList();
        }

        // Parse programmes
        if (!string.IsNullOrEmpty(researchAction.ResearchGroup_ProjectProgramme))
        {
            project.Programmes = researchAction.ResearchGroup_ProjectProgramme
                .Split(',')
                .Select(p => p.Trim())
                .Where(p => !string.IsNullOrEmpty(p))
                .ToList();
        }

        // Parse topics
        if (!string.IsNullOrEmpty(researchAction.ResearchGroup_ProjectTopic))
        {
            project.Topics = researchAction.ResearchGroup_ProjectTopic
                .Split(',')
                .Select(t => t.Trim())
                .Where(t => !string.IsNullOrEmpty(t))
                .ToList();
        }

        return project;
    }

    // Method to add the manually created project
    private async Task AddManualProject()
    {
        try
        {
            // Basic validation - now just check if a professor was selected
            if (string.IsNullOrWhiteSpace(manualProject.ResearchGroup_ProjectTitle))
            {
                errorMessage = "Παρακαλώ εισάγετε τίτλο έργου";
                return;
            }

            if (string.IsNullOrWhiteSpace(manualProject.ResearchGroup_ProjectGrantAgreementNumber))
            {
                errorMessage = "Παρακαλώ εισάγετε αριθμό σύμβασης έργου";
                return;
            }

            if (!manualProject.ResearchGroup_ProjectStartDate.HasValue)
            {
                errorMessage = "Παρακαλώ εισάγετε ημερομηνία έναρξης";
                return;
            }

            if (!manualProject.ResearchGroup_ProjectEndDate.HasValue)
            {
                errorMessage = "Παρακαλώ εισάγετε ημερομηνία λήξης";
                return;
            }

            // SIMPLIFIED: Just check if a professor was selected (no email extraction needed)
            if (string.IsNullOrWhiteSpace(manualProject.ResearchGroup_ProjectScientificResponsibleEmail))
            {
                errorMessage = "Παρακαλώ επιλέξτε επιστημονικό υπεύθυνο";
                return;
            }

            if (string.IsNullOrWhiteSpace(manualProject.ResearchGroup_ProjectStatus))
            {
                errorMessage = "Παρακαλώ επιλέξτε κατάσταση έργου";
                return;
            }

            // Convert to Project object
            var project = ConvertToProject(manualProject);

            // Add to temporary storage using your existing method
            await AddToTemporaryStorage(project);

            // Reset form
            ResetManualForm();

            successMessage = "Το έργο προστέθηκε επιτυχώς στην προσωρινή λίστα";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Σφάλμα κατά την προσθήκη έργου: {ex.Message}";
        }
    }

    private string ExtractAndFormatAmount(string input)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;

        // Extract the numeric part after the € symbol
        var euroIndex = input.IndexOf('€');
        if (euroIndex >= 0 && euroIndex < input.Length - 1)
        {
            var amountString = input.Substring(euroIndex + 1).Trim();

            // Remove any spaces and format with proper thousands separators and decimal
            amountString = amountString.Replace(" ", "").Replace(".", "").Replace(",", ".");

            if (decimal.TryParse(amountString, NumberStyles.Any, CultureInfo.InvariantCulture, out var amount))
            {
                // Format with Greek-style formatting: 6.746.086,25
                return amount.ToString("N2", new CultureInfo("el-GR"));
            }
        }

        // If parsing fails, return the original string
        return input;
    }

    private string ExtractAmountOnly(string input)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;

        // Extract the numeric part after the € symbol
        var euroIndex = input.IndexOf('€');
        if (euroIndex >= 0 && euroIndex < input.Length - 1)
        {
            return input.Substring(euroIndex + 1).Trim();
        }

        return input;
    }

    // Research Group Areas Methods
    private void FilterResearchGroupAvailableAreas(ChangeEventArgs e)
    {
        researchGroupAreasSearchTerm = e.Value?.ToString() ?? string.Empty;

        filteredResearchGroupAreas = availableResearchGroupAreas
            .Where(a => a.AreaName.Contains(researchGroupAreasSearchTerm, StringComparison.OrdinalIgnoreCase) &&
                       !selectedResearchGroupAreas.Any(sa => sa.AreaName == a.AreaName))
            .ToList();

        StateHasChanged();
    }

    private void OnResearchGroupAreaSelect(ChangeEventArgs e)
    {
        var selectedArea = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedArea))
        {
            if (expandedResearchGroupAreas.Contains(selectedArea))
            {
                expandedResearchGroupAreas.Remove(selectedArea);
            }
            else
            {
                expandedResearchGroupAreas.Add(selectedArea);
            }
            StateHasChanged();
        }
    }

    private void ToggleResearchGroupExpansion(string areaName)
    {
        if (expandedResearchGroupAreas.Contains(areaName))
        {
            expandedResearchGroupAreas.Remove(areaName);
        }
        else
        {
            expandedResearchGroupAreas.Add(areaName);
        }
        StateHasChanged();
    }

    private async Task MoveSelectedResearchGroupAreaToRight()
    {
        var newlySelectedAreas = await GetSelectedResearchGroupAreasFromDOM("researchGroupAvailableAreas");

        foreach (var areaName in newlySelectedAreas)
        {
            var areaToRemove = availableResearchGroupAreas.FirstOrDefault(a => a.AreaName == areaName);
            if (areaToRemove != null)
            {
                availableResearchGroupAreas.Remove(areaToRemove);
                if (!selectedResearchGroupAreas.Any(a => a.AreaName == areaName))
                {
                    selectedResearchGroupAreas.Add(new SelectedArea { AreaName = areaToRemove.AreaName });
                }
            }
        }

        if (!string.IsNullOrWhiteSpace(researchGroupAreasSearchTerm) &&
            !selectedResearchGroupAreas.Any(a => a.AreaName.Equals(researchGroupAreasSearchTerm, StringComparison.OrdinalIgnoreCase)))
        {
            selectedResearchGroupAreas.Add(new SelectedArea { AreaName = researchGroupAreasSearchTerm });
            researchGroupAreasSearchTerm = string.Empty;
        }

        FilterResearchGroupAvailableAreas(new ChangeEventArgs { Value = researchGroupAreasSearchTerm });
        StateHasChanged();
    }

    private async Task MoveSelectedResearchGroupAreaToLeft()
    {
        var newlySelectedAreas = await GetSelectedResearchGroupAreasFromDOM("researchGroupSelectedAreas");

        foreach (var areaName in newlySelectedAreas)
        {
            var areaToRemove = selectedResearchGroupAreas.FirstOrDefault(a => a.AreaName == areaName);
            if (areaToRemove != null)
            {
                selectedResearchGroupAreas.Remove(areaToRemove);
                if (!availableResearchGroupAreas.Any(a => a.AreaName == areaName))
                {
                    availableResearchGroupAreas.Add(new Area { AreaName = areaToRemove.AreaName });
                }
            }
        }

        FilterResearchGroupAvailableAreas(new ChangeEventArgs { Value = researchGroupAreasSearchTerm });
        StateHasChanged();
    }

    // Research Group Skills Methods
    private void FilterResearchGroupAvailableSkills(ChangeEventArgs e)
    {
        researchGroupSkillSearchTerm = e.Value?.ToString() ?? string.Empty;

        filteredResearchGroupSkills = availableResearchGroupSkills
            .Where(s => s.Contains(researchGroupSkillSearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

        StateHasChanged();
    }

    private async Task MoveSelectedResearchGroupSkillToRight()
    {
        var newlySelectedSkills = await GetSelectedResearchGroupSkillsFromDOM("researchGroupAvailableSkills");

        foreach (var skill in newlySelectedSkills)
        {
            availableResearchGroupSkills.Remove(skill);
            if (!selectedResearchGroupSkills.Contains(skill))
            {
                selectedResearchGroupSkills.Add(skill);
                finalSelectedResearchGroupSkills.Add(skill);
                selectedResearchGroupSkillsForAssessment.Add(new Skill { SkillName = skill, Assessment = 1 });
            }
        }

        if (!string.IsNullOrWhiteSpace(researchGroupSkillSearchTerm) &&
            !selectedResearchGroupSkills.Any(s => s.Equals(researchGroupSkillSearchTerm, StringComparison.OrdinalIgnoreCase)))
        {
            selectedResearchGroupSkills.Add(researchGroupSkillSearchTerm);
            finalSelectedResearchGroupSkills.Add(researchGroupSkillSearchTerm);
            selectedResearchGroupSkillsForAssessment.Add(new Skill { SkillName = researchGroupSkillSearchTerm, Assessment = 1 });
            researchGroupSkillSearchTerm = string.Empty;
        }

        StateHasChanged();
    }

    private async Task MoveSelectedResearchGroupSkillToLeft()
    {
        var newlySelectedSkills = await GetSelectedResearchGroupSkillsFromDOM("researchGroupSelectedSkills");

        foreach (var skill in newlySelectedSkills)
        {
            selectedResearchGroupSkills.Remove(skill);
            finalSelectedResearchGroupSkills.Remove(skill);

            var skillForAssessment = selectedResearchGroupSkillsForAssessment.FirstOrDefault(s => s.SkillName == skill);
            if (skillForAssessment != null)
            {
                selectedResearchGroupSkillsForAssessment.Remove(skillForAssessment);
            }

            if (!availableResearchGroupSkills.Contains(skill))
            {
                availableResearchGroupSkills.Add(skill);
            }
        }

        StateHasChanged();
    }

    // Helper Methods
    private async Task<List<string>> GetSelectedResearchGroupAreasFromDOM(string selectId)
    {
        return await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", selectId);
    }

    private async Task<List<string>> GetSelectedResearchGroupSkillsFromDOM(string selectId)
    {
        return await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", selectId);
    }

    private string GetValidationClassForEmptyResearchGroupAreas(int areasCount)
    {
        return areasCount == 0 && showResearchGroupValidationError ? "shake error" : "";
    }

    private async Task LoadAvailableResearchGroupSkills()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();

        // Assuming you have a Skills table in your database
        // Adjust this based on your actual database structure
        var skillsFromDb = await dbContext.Skills.Select(s => s.SkillName).ToListAsync();
        availableResearchGroupSkills = skillsFromDb;
    }

    private void OnSchoolChange(ChangeEventArgs e)
    {
        newResearchGroup.ResearchGroupSchool = e.Value?.ToString();
        UpdateDepartments();
    }

    private void UpdateDepartments()
    {
        if (!string.IsNullOrEmpty(newResearchGroup.ResearchGroupSchool) && 
            schoolDepartments.ContainsKey(newResearchGroup.ResearchGroupSchool))
        {
            departments = schoolDepartments[newResearchGroup.ResearchGroupSchool];
            // Reset department selection when school changes
            newResearchGroup.ResearchGroupUniversityDepartment = string.Empty;
        }
        else
        {
            departments = new List<string>();
            newResearchGroup.ResearchGroupUniversityDepartment = string.Empty;
        }
    
        StateHasChanged();
    }

    private string researchGroupKeywordsInput = "";
    private string ResearchGroupKeywords { get; set; } = "";
    private void AddResearchGroupKeyword(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(researchGroupKeywordsInput))
        {
            if (string.IsNullOrEmpty(ResearchGroupKeywords))
            {
                ResearchGroupKeywords = researchGroupKeywordsInput.Trim();
            }
            else
            {
                ResearchGroupKeywords += ", " + researchGroupKeywordsInput.Trim();
            }
            researchGroupKeywordsInput = "";
        }
    }

    private void RemoveResearchGroupKeyword(string keyword)
    {
        if (!string.IsNullOrEmpty(ResearchGroupKeywords))
        {
            var keywords = ResearchGroupKeywords.Split(',')
                .Select(k => k.Trim())
                .Where(k => k != keyword && !string.IsNullOrWhiteSpace(k))
                .ToList();

            ResearchGroupKeywords = string.Join(", ", keywords);
        }
    }

    private void ResetResearchGroupValidationClasses()
    {
        researchGroupNameInputClass = "";
        researchGroupSchoolInputClass = "";
        researchGroupDepartmentInputClass = "";
        researchGroupContactEmailInputClass = "";
        researchGroupTelephoneInputClass = "";
        researchGroupDateInputClass = "";
        researchGroupAddressInputClass = "";
        researchGroupAreasInputClass = "";
        researchGroupAttachmentInputClass = "";
        researchGroupErrorMessage = "";
        showResearchGroupValidationError = false;
    }

}


